AccountProducer
1. Create Spring boot project with eureka server dependency

2. Configure eureka server info in application.properties

eureka:
  instance:
    hostname: localhost
  client: 
    registerWithEureka: false
    fetchRegistry: false

server:
  port: 1111   

3. Define @EnableEurekaServer in main class


AccountConsumer appl
1. Create Spring boot project with web, spring data jpa, mysql, lombok, eureka client

2. Define @EnableDiscoveryClient in main class

3. Configure db info in application.properties and eureka info in yml file

spring.jpa.hibernate.ddl-auto=update
spring.datasource.url=jdbc:mysql://localhost:3306/batch
spring.datasource.username=root
spring.datasource.password=root
spring.jpa.database-platform = org.hibernate.dialect.MySQL8Dialect

spring:
  application:
    name: accounts-consumer

eureka:
    client:
      serviceUrl:
        defaultZone: http://localhost:1111/eureka/

server: 
  port: 2222

4. Create entity class

@Entity @Table(name="account") @Data @NoArgsConstructor @AllArgsConstructor
public class Account {
	@Id
	private Integer id;
	private double amount;
	private String type;
	private String name;
}

5. Create Repository interface

public interface AccountRepository extends JpaRepository<Account, Integer> {
}

6. Create controller prg

@RestController
public class AccountController {

	@Autowired
	AccountRepository accountRepository;
	
	@RequestMapping("/accounts")
	public List<Account> all() {
	    return (List<Account>) accountRepository.findAll();
	}
	
	@RequestMapping("/accounts/{id}")
	public Account byId(@PathVariable("id") Integer id) {
		Account account= accountRepository.findById(id).get();
	//logger.info("accounts-microservice byId() found: " + account);
		return account;
	}
	
	@RequestMapping(value="/accounts",method=RequestMethod.POST)
	public Account save(@RequestBody Account account) {
		return accountRepository.save(account);
	}
	
	@RequestMapping(value="/delete/{id}")
	public void deleteAccount(@PathVariable("id") Integer id) {
		 accountRepository.deleteById(id);
	}
	
}

AccountClient appl
1. Create spring boot project with web, eureka client, lombok, swagger 

	<dependency>
			<groupId>org.springdoc</groupId>
		<artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
			<version>2.2.0</version>
		</dependency>

2. Define @EnableDiscoveryClient in main class

3. Configure eureka info in application.yml file

spring:
  application:
    name: accounts-web

server:
   port: 3333

eureka:
  client:
    serviceUrl:
      defaultZone: http://localhost:1111/eureka/

4. Create model class

@Data @AllArgsConstructor @NoArgsConstructor
public class Account {
	private Integer id;
	private Double amount;
	private String type;
	private String name;
}

5. Create controller prg

@RestController
@CrossOrigin(origins = "http://localhost:4444")
public class AccountController {

	@Autowired
	protected RestTemplate restTemplate;
	
	@GetMapping("/accountList")
	public List<Account> accountList() {
		   Account[] accounts = restTemplate.getForObject("http://ACCOUNTS-CONSUMER/accounts", Account[].class);
		   List<Account> list= Arrays.asList(accounts);
		   return list;
	}

	
	public List<Account> fallbackMethod(Throwable throwable)  {
		List<Account> accList=Stream.of(
                     new Account(1,100.0,"Saving","Raj"),
                     new Account(2,200.0,"Saving","Ram")
				).collect(Collectors.toList());	
		return accList;		
	}
	
	@GetMapping("/accountDetails")
	public Account accountDetails(@RequestParam("number") Integer id) {
		       Account acc=restTemplate.getForObject("http://ACCOUNTS-CONSUMER/accounts/{id}",
				Account.class, id);
		       return acc;
	}
	
	@PostMapping(value="/save")
	public Account saveAccount(@RequestBody Account account) {
				Random r=new Random();
			    int id=r.nextInt(99999)+10000;
			    account.setId(id);
			    Account acc=restTemplate.postForObject("http://ACCOUNTS-CONSUMER/accounts", account, Account.class);
			    return acc;		
	}
}

6. Start all 3 appl and check in eureka server all are registered 

Run http://localhost:3333/swagger-ui/index.html and check endpoints

Springboot Feign Client
1. In AccountClient add feign client dependency

<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-feign</artifactId>
			<version>1.4.7.RELEASE</version>
		</dependency>

2. @EnableFeignClients in main class

3. Create interface

@FeignClient(value="accounts-consumer",url="http://localhost:2222/")
public interface AccountClient {

	@PostMapping("/accounts")
	public Account createAccount(@RequestBody Account account);
	
	@GetMapping("/accounts")
	public List<Account> getAllAccounts();
	
	@GetMapping("/accounts/{id}")
	public Account getById(@PathVariable("id")Integer id);
}

4. Change controller class

@RestController
@CrossOrigin(origins="http://localhost:4444")
public class AccountController {
	
	//@Autowired
	//RestTemplate restTemplate;
	
	@Autowired
	AccountClient accClient;

	@PostMapping("/save")
	public Account saveAccount(@RequestBody Account account) {
		 Random r=new Random();
		 int id=r.nextInt(99999)+10000;
		 account.setId(id);
		 //Account acc=restTemplate.postForObject("http://ACCOUNTS-CONSUMER/accounts", account, Account.class);
		 Account acc=accClient.createAccount(account);
		 return acc;
	}
	
	@GetMapping("/accountList")
	@CircuitBreaker(name="accountMS", fallbackMethod="fallbackMethod")
	public List<Account> accountList() {
		//Account[] account=restTemplate.getForObject("http://ACCOUNTS-CONSUMER/accounts", Account[].class);
		//List<Account> accList=Arrays.asList(account);
		List<Account> accList=accClient.getAllAccounts();
		return accList;
	}
	
	public List<Account> fallbackMethod(Throwable throwable) {
		List<Account> accList=Stream.of(
				      new Account(1,100.0,"saving","ABC"),
				      new Account(2,200.0,"saving","XYZ"),
				      new Account(3,300.0,"saving","PQR")
				).collect(Collectors.toList());
		return accList;
	}
	
	@GetMapping("/accountDetails")
	public Account accountDetails(@RequestParam("number")Integer aid) {
		//Account acc=restTemplate.getForObject("http://ACCOUNTS-CONSUMER/accounts/{id}", Account.class, aid);
		Account acc=accClient.getById(aid);
		return acc;
	}
}



AccountGateway application
1. Create spring boot project with reactive gateway, actuator, eureka client and swagger related to reactive 

<dependency>
            <groupId>org.springdoc</groupId>
            <artifactId>springdoc-openapi-starter-webflux-ui</artifactId>
            <version>2.5.0</version>
        </dependency>

2. Define @EnableDiscoveryClient in main class

3. Configure eureka info and gateway configuration in application.properties 
server.port=4444
spring.application.name=gateway-service
eureka.client.serviceUrl.defaultZone=http://localhost:1111/eureka/

spring.cloud.gateway.discovery.locator.enabled=true

spring.cloud.gateway.routes[0].id=accounts-web
spring.cloud.gateway.routes[0].uri=${ACCOUNTS_WEB_URL:http://localhost:3333}
spring.cloud.gateway.routes[0].predicates[0]=Path=/account/**
spring.cloud.gateway.routes[0].filters[0]=RewritePath=/account/?(?<segment>.*), /${segment}

spring.cloud.gateway.routes[1].id=openapi
spring.cloud.gateway.routes[1].uri=http://localhost:${server.port}
spring.cloud.gateway.routes[1].predicates[0]=Path=/v3/api-docs/**
spring.cloud.gateway.routes[1].filters[0]=RewritePath=/v3/api-docs/?(?<segment>.*), /${segment}/v3/api-docs

######## Actuator Configuration  #########
management.info.git.mode=full
management.endpoints.web.exposure.include=*
management.metrics.tags.application=${spring.application.name}
management.tracing.enabled=false
management.tracing.sampling.probability=1.0

######## Swagger Configuration  #########
springdoc.swagger-ui.use-root-path=true
springdoc.swagger-ui.urls[0].name=account
springdoc.swagger-ui.urls[0].url=/v3/api-docs/account
#springdoc.swagger-ui.urls[1].name=orders
#springdoc.swagger-ui.urls[1].url=/v3/api-docs/orders

4. Start the appl and run 
http://localhost:4444/webjars/swagger-ui/index.html

Resilence4j
   In a micro service architecture it's common for a service to call another
service and there is always the possibility that the other service is
being called is unavailable or unable to respond so what can you do when this
situation happens. In our example, if you observe here each microservices communicate with each other, let's assume due to some technical fault or infrastructure related issue accountconsumer microservice is down, now if accountclient will call consumer service immediately you will get 500
internal server error
    In micro service world intermittent failure are common so we can't predict that consumer microservice will be go down for long time, so we should not stop allowing request from client to consumer service, we will keep allow all the requests from client to consumer service and here what we can do rather than stop processing the request, we can set some threshold (ie) we'll wait for few more calls, if failure rate exceed that threshold then we'll stop allowing to call that microservices
    In circuit breaker there are three state, closed, open and half open, by default status will be closed it means electricity is flowing through the circuits, in our scenario accountclient can call to the consumer service (ie) both the service is up and running, let's say we set the threshold as 50 (ie) if 50% of call from client to consumer service will fail then immediately trip will happen and status will be changed from close to open.
    We have client and consumer service and due to some tech fault
consumer service is down, so client service called first time to consumer service and got the failure response, similarly we did five subsequent call to the consumer service and out of five, three call failed and two are succeed, so if you observe here failure rate exit the threshold so circuit breaker status will immediately change to open, now in open state no electricity is
flowing it means circuit breaker won't allow you to call dependent microservices 
    Next we have settimeout and once the timeout expired it will change the status to half open, let say we set the timeout as 5 second after 5 second status will immediately change to the half open state, now in half open state it will allow only few calls to go through and check availability of consumer
service, if it fails again then the status will change to open and if it
again find that the consumer service is back online then status will change to closed again 

1. Start all appl and it works fine, but we forcefully stop consumer appl,in that case if we run then we get 500-Internal Server Error 
   Now how we can handle this situation rather than giving this ugly message to the end user, we just want to return few available accounts object even though my micro service or application is down, still we want to give some response back to the end user, so that my user will keep engaged with my application so that is where this resilience 4j came into the picture

2. Add actuator,aop and resilence4j dependency 

<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-aop</artifactId>
		</dependency>

		<dependency>
			<groupId>io.github.resilience4j</groupId>
			<artifactId>resilience4j-spring-boot3</artifactId>
			<version>2.0.2</version>
		</dependency>

3. Configure properties for resilence4j in application.yml file 

#Enable all endpoints of the actuator 
management:
  health:
    circuitbreakers:
      enabled: true
  endpoints:
    web:
      exposure:
        include: health
  endpoint:
    health:
      show-details: always
      
resilience4j:
  circuitbreaker:
    instances:
      accountMS:
        register-health-indicator: true # this property enables the registeration of health indicator for external circuit breaker called accountMS
        event-consumer-buffer-size: 10 #This property sets the size of event consumer buffer for the external circuit breaker, it holds circuit breaker events that occur during runtime
        failure-rate-threshold: 50  # if 50 of request from this particular client service to consumer service will fail then immediately change the status to the open
        minimum-number-of-calls: 3 # this property is important to calculate the failure rate and deciding whether to open or close the circuit
        automatic-transition-from-open-to-half-open-enabled: true #we just set the time limit as five second, so after five second from open to half open
this transition will happen automatically 
        wait-duration-in-open-state: 5s # after the circuit breaker
opens it will remain in the open state for 5 seconds, after five second
automatically the status will be changed from open to half open
        permitted-number-of-calls-in-half-open-state: 3 #in half open state we allow three call, after this three call if status is succeed then it will change to the closed, if still api is not up and running again it will status will change to the open and the result will get fail
        sliding-window-size: 10 # with value of 10, the sliding window will track last 10 calls made to circuit breaker 
        sliding-window-type: count-based  # it means sliding window is based on number of calls, 2 types - count based and time based 


4. Configure fallback method in AccountController, so whenever the appl is down it will invoke fallbackMethod

        @GetMapping("/accountList")
	@CircuitBreaker(name = "accountMS", fallbackMethod = "fallbackMethod")
	public List<Account> accountList() {
		   Account[] accounts = restTemplate.getForObject("http://ACCOUNTS-CONSUMER/accounts", Account[].class);
		   List<Account> list= Arrays.asList(accounts);
		   return list;
	}
	
	public List<Account> fallbackMethod(Throwable throwable)  {
		List<Account> accList=Stream.of(
                     new Account(1,100.0,"Saving","Raj"),
                     new Account(2,200.0,"Saving","Ram")
				).collect(Collectors.toList());	
		return accList;		
	}

5. Start all the appl, run and check whether it is working fine 

6. To check circuit breaker status, we run http://localhost:3333/actuator/health
   - We can see the state to be closed, as all appl are up and running 

7. Stop consumer appl
      Now if we refresh, still we can see status is closed (ie) it will still allow the call from the account client to consumer service
      Now if we go and hit /accountList in swagger, now if you see rather than giving 500 error it's giving me dummy fallback method response
      Now still if you check the status is closed and you can see here failed call is 1, so we tried one time and that got failed because it didn't exceed the threshold which is 50% so far now 

8. Now once again hit /accountList in swagger, now we can see dummy fallback method response and refresh /actuator browser, it still status is closed and you can see the fail count is two

9. Now once again hit /accountList in swagger, now we can see dummy fallback method response and refresh /actuator browser, now status is changed to open 
   Now if you will refresh you can see the status got changed to open, so if you observe your buffer call is 5 and there is total 3 call which is failed
so the threshold is set as 50 percent and out of 3, 3 is failed so definitely
exceed the threshold which is 50 then again status is changed 
  Now if we refresh, it status will be changed to half open because if you remember in configuration, we set wait duration in open state as 5second, so already we cross that five second limit, so if we refresh we can see status as
half open

10. Now if we observe in the configuration permitted number of calls in half open state is three call, sp after three subsequent call again it will take the decision whether it need to go to the closed state or open state, it will only go to the close state if the consumer service is up, if not again it will
go to the open state 
   Now once again hit /accountList in swagger for 3 times where it display dummy response 
   Now if we refresh browser we can see the status is open, and once again refresh it will change status to half open because it will just stay
for five seconds
    As per the rule in half open state we can do three times subsequent call so we hit  /accountList in swagger for 3 times, now if we refresh browser, the 
status will come to open and it will just stay for five seconds, if we refresh once again then status is changed to half open 

11. Now we start consumer service 
       -  In half open state it will allow three call as given in configuration file,now we hit /accountList in swagger for 3 times, now if we refresh browser, the  status will change to closed and now if we try accessing the endpoint we will get the actual response 


Retry mechanism
    We have two micro services accountclient service and consumer service, now
let's say accountclient called consumer service and due to some connectivity
issue consumer service is taking longer time to respond, so there could be couple of possible reason for this slowness, for example let's assume consumer service is listening to kafka server and in kafka there is some lag so definitely this will impact on your application and user can expect slowness in your api. 
     Similarly we take a scenario where our consumer service is using some cloud database which is running in different data center or you can say it's running a different server so anytime we can face intermittent network connectivity error which will again impact to your application. 
    Similarly there can be also temporary unavailability of dependency or there can be deployment environment failure due to some wrong configuration, so you can find any number of reason for api fail or slowness in microservices world         
     Since microservices are distributed in nature various things can go wrong anytime, so to make our service resilient to this kind of failures we must need to adapt these retry patterns. The idea behind the retry pattern is simple,  let's say accountclient service called consumer service and received an unexpected response then in that case client service need to re-attempt few call again and again to consumer service in some time interval, if any of your attempt to consumer service back to online then you are good otherwise we have option to return fallback response to the end user, so resilience 4j provides a separate module to implement this retry pattern in your application

1. In application.yml configure retry info

retry:
    instances:
      accountMS:
        maxRetryAttempts: 5
        waitDuration: 10s 

The number of maximum attempt you can do from client service to consumer service and each 10 second it will attempt once so  we just set the wait duration

2. Configure @Retry

        private int attempt=1;
	
	@GetMapping("/accountList")
	//@CircuitBreaker(name = "accountMS", fallbackMethod = "fallbackMethod")
	@Retry(name = "accountMS", fallbackMethod = "fallbackMethod")
	public List<Account> accountList() {
		   Account[] accounts = restTemplate.getForObject("http://ACCOUNTS-CONSUMER/accounts", Account[].class);
		   List<Account> list= Arrays.asList(accounts);
		   System.out.println("retry method called "+attempt++ +" times "+" at "+new Date());
		   return list;
	}

It will just attempt one then it will wait for 10 seconds, then again it will attempt second time it will wait for 10 second, meanwhile if you get the response then it will return you the success response otherwise you will get the fallback response

3. Start all the appl
      When we hit /accountList in swagger, we can see in console the retry attempt in certain time,  the next call should be after 10sec like that, so it will just try for five times and if you do not get any response or your
consumer service is down, it will return you this fallback response

Spring cloud Config server
 
Why?
1. Changes in properties file in different env like dev, prod, test
2. Need to restart the appl to change the configuration

What is config server?
   1. Used to change the configuration at runtime and for that we dont need to restart or redeploy ur appl
   2. Externalize the configuration (ie) we are changing the property configuration from outside without the changing code itself. So we keep all properties file inside github or gitlab or bitbucket

1. Create AccountConfigServer with actuator, config server dependency - used to read all configuration from GIT repository 

2. @EnableConfigServer in main class, which makes spring boot appl to act as config server

3. Create repository in GITHUB and create different properties files

4. Configure GitHub info to config server in application.properties or application.yml

server.port=9000
spring.cloud.config.server.git.uri=github url/gitlab url
spring.application.name=config-server
management.endpoint.health.show-details=always
health.endpoints.enabled=true
spring.cloud.config.server.git.skip-ssl-validation=true


label - master indicate that we take from master

Config server library exposes some endpoints to access the properties files
/{applicationname}/{profile}/[{label}]
/{application}-{profile}.yml
/{application}-{profile}.properties
     
5. In accountconsumer appl, configure config client and bootstrap dependency

<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-bootstrap</artifactId>
		</dependency>

6. Configure in appl.properties

spring.cloud.config.enabled=false

7. Create bootstrap.yml file

spring:
  cloud:
    config:
       uri: http://localhost:8090/
       profile: prod

management:
  endpoints:
    web:
      exposure:
        include:
          - health
          - refresh
           
8. Start the appl, now it will store all account info in batch2 db, since we gave profile to be prod

9. Now if we change db name in prod properties in github, once again run swagger we can see the data is still stored in batch2 db
   If we want to reflect the changes automatuically then we have to give
