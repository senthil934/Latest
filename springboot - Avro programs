1. SpringBoot-Kafka-Producer

pom.xml

<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.6.2</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.pack</groupId>
	<artifactId>SpringBoot-Kakfa-Producer</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>SpringBoot-Kakfa-Producer</name>
	<description>Demo project for Spring Boot</description>
	<properties>
		<java.version>11</java.version>
	</properties>
	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter</artifactId>
		</dependency>
         <dependency>
			<groupId>org.springframework.kafka</groupId>
			<artifactId>spring-kafka</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
		</plugins>
	</build>

</project>


application.yml

server:
   port: 1111

spring:
   kafka:
     producer:
       bootstrap-server: "localhost:9092"  
       keySerializer: "org.apache.kafka.common.serialization.StringSerializer"
       #valueSerializer: "org.apache.kafka.common.serialization.StringSerializer"
       valueSerializer: "org.springframework.kafka.support.serializer.JsonSerializer"


SpringBootKafkaProducerApplication.java
@SpringBootApplication
@EnableKafka
public class SpringBootKakfaProducerApplication {

	public static void main(String[] args) {
		SpringApplication.run(SpringBootKakfaProducerApplication.class, args);
	}

}


Person.java
public class Person {
   String id;
   String name;
   Integer age;
}

SpringBootKafkaController.java
package com.pack.SpringBootKakfaProducer.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import com.pack.SpringBootKakfaProducer.model.Person;
import com.pack.SpringBootKakfaProducer.producer.SpringBootKafkaProducer;

@RestController
public class SpringBootKafkaController {

	@Autowired
	SpringBootKafkaProducer springBootKafkaProducer;
	
	/*@GetMapping("/send/{message}")
	public void send(@PathVariable("message")String message) {
		springBootKafkaProducer.sendMessage(message);
	}*/
	
	@PostMapping("/send")
	public void send(@RequestBody Person person) {
		springBootKafkaProducer.sendMessage(person);
	}
}


SpringBootKafkaProducer.java
package com.pack.SpringBootKakfaProducer.producer;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.kafka.support.SendResult;
import org.springframework.stereotype.Service;
import org.springframework.util.concurrent.ListenableFuture;
import org.springframework.util.concurrent.ListenableFutureCallback;

import com.pack.SpringBootKakfaProducer.model.Person;

@Service
public class SpringBootKafkaProducer {
	
	//@Autowired
	//public KafkaTemplate<String,String> kafkaTemplate;
	
	@Autowired
	public KafkaTemplate<String,Person> kafkaTemplate1;
	
	/*public void sendMessage(String value) {
		ListenableFuture<SendResult<String,String>> future=kafkaTemplate.send("spring_boot_kafka_topic_v1",value);
		future.addCallback(new ListenableFutureCallback<Object>() {

			@Override
			public void onSuccess(Object result) {
				System.out.println("Messages successfully pushed on topic");
			}

			@Override
			public void onFailure(Throwable ex) {
				System.out.println("Messages failed to push on topic");
			}
			
		});
	}*/
	
	public void sendMessage(Person person) {
		ListenableFuture<SendResult<String,Person>> future=kafkaTemplate1.send("spring_boot_kafka_topic_v1",person);
		future.addCallback(new ListenableFutureCallback<Object>() {

			@Override
			public void onSuccess(Object result) {
				System.out.println("Messages successfully pushed on topic");
			}

			@Override
			public void onFailure(Throwable ex) {
				System.out.println("Messages failed to push on topic");
			}
			
		});
	}


}


2. SpringBoot-Kafka-Consumer

pom.xml

<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.6.2</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.pack</groupId>
	<artifactId>SpringBoot-Kakfa-Consumer</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>SpringBoot-Kakfa-Consumer</name>
	<description>Demo project for Spring Boot</description>
	<properties>
		<java.version>11</java.version>
	</properties>
	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter</artifactId>
		</dependency>
         <dependency>
			<groupId>org.springframework.kafka</groupId>
			<artifactId>spring-kafka</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
		</plugins>
	</build>

</project>


application.yml
server:
   port: 2222

spring:
   kafka:
     producer:
       bootstrap-server: "localhost:9092"  
       key-serializer: "org.apache.kafka.common.serialization.StringSerializer"
       #value-serializer: "org.apache.kafka.common.serialization.StringSerializer"
       value-serializer: "org.springframework.kafka.support.serializer.JsonSerializer"
     consumer:
       bootstrap-server: "localhost:9092"
       key-deserializer: "org.apache.kafka.common.serialization.StringDeserializer"
       #value-deserializer: "org.apache.kafka.common.serialization.StringDeserializer"
       value-serializer: "org.springframework.kafka.support.serializer.JsonDeserializer"
       group-id: "spring-boot-kafka-consumer"

topic:
  name: "spring_boot_kafka_topic_v1"


SpringBootKafkaConsumerApplication.java
package com.pack.SpringBootKakfaConsumer;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.kafka.annotation.EnableKafka;

@SpringBootApplication
@EnableKafka
public class SpringBootKakfaConsumerApplication {

	public static void main(String[] args) {
		SpringApplication.run(SpringBootKakfaConsumerApplication.class, args);
	}

}


Person.java
public class Person {
   String id;
   String name;
   Integer age;
}

Config.java
package com.pack.SpringBootKakfaConsumer.config;

import org.apache.kafka.common.serialization.StringDeserializer;
import org.springframework.boot.autoconfigure.kafka.KafkaProperties;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.kafka.config.ConcurrentKafkaListenerContainerFactory;
import org.springframework.kafka.config.KafkaListenerContainerFactory;
import org.springframework.kafka.core.ConsumerFactory;
import org.springframework.kafka.core.DefaultKafkaConsumerFactory;
import org.springframework.kafka.listener.ConcurrentMessageListenerContainer;
import org.springframework.kafka.support.serializer.JsonDeserializer;

import com.pack.SpringBootKakfaConsumer.model.Person;

@Configuration
public class Config {

	/*@Bean
	public ConsumerFactory<String,String> consumerFactory(KafkaProperties kafkaProperties){
	   return new DefaultKafkaConsumerFactory<>(kafkaProperties.buildConsumerProperties());
	}
	
	@Bean
	public KafkaListenerContainerFactory<ConcurrentMessageListenerContainer<String,String>> kafkaListenerContainerFactory(KafkaProperties kafkaProperties){
	   ConcurrentKafkaListenerContainerFactory<String,String> factory=new ConcurrentKafkaListenerContainerFactory<>();
	   factory.setConsumerFactory(consumerFactory(kafkaProperties));
	   return factory;
	}*/

	@Bean
	public ConsumerFactory<String,Person> consumerFactory1(KafkaProperties kafkaProperties){
		JsonDeserializer<Person> deserialize=new JsonDeserializer<Person>(Person.class,false);
		deserialize.addTrustedPackages("*");
	   return new DefaultKafkaConsumerFactory<>(kafkaProperties.buildConsumerProperties(),new StringDeserializer(),deserialize);
	}
	
	@Bean
	public KafkaListenerContainerFactory<ConcurrentMessageListenerContainer<String,Person>> kafkaListenerContainerFactory1(KafkaProperties kafkaProperties){
	   ConcurrentKafkaListenerContainerFactory<String,Person> factory=new ConcurrentKafkaListenerContainerFactory<>();
	   factory.setConsumerFactory(consumerFactory1(kafkaProperties));
	   return factory;
	}

}


SpringBootKafkaConsumer.java
package com.pack.SpringBootKakfaConsumer.consumer;

import org.springframework.kafka.annotation.KafkaListener;
import org.springframework.stereotype.Service;

import com.pack.SpringBootKakfaConsumer.model.Person;

@Service
public class SpringBootKafkaConsumer {

	/*@KafkaListener(topics = "${topic.name}", containerFactory = "kafkaListenerContainerFactory")
	public void listen(String value) {
		System.out.println("Message received: " + value);
	}*/
	
	@KafkaListener(topics = "${topic.name}", containerFactory = "kafkaListenerContainerFactory1")
	public void listen1(Person value) {
		System.out.println("Message received: " + value);
	}
}



3. SpringBootKafkaProducer1

pom.xml

<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.7.5</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.pack</groupId>
	<artifactId>SpringBootKafkaProducer1</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>SpringBootKafkaProducer1</name>
	<description>Demo project for Spring Boot</description>
	<properties>
		<java.version>11</java.version>
	</properties>
	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.kafka</groupId>
			<artifactId>spring-kafka</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.kafka</groupId>
			<artifactId>spring-kafka-test</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
		</plugins>
	</build>

</project>


application.properties
server.port=3333

SpringBootKafkaProducer1Application.java
package com.pack.SpringBootKafkaProducer1;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.kafka.annotation.EnableKafka;

@SpringBootApplication
@EnableKafka
public class SpringBootKafkaProducer1Application {

	public static void main(String[] args) {
		SpringApplication.run(SpringBootKafkaProducer1Application.class, args);
	}

}


KafkaProducerConfiguration.java
package com.pack.SpringBootKafkaProducer1.config;

import java.util.HashMap;
import java.util.Map;

import org.apache.kafka.clients.producer.ProducerConfig;
import org.apache.kafka.common.serialization.StringSerializer;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.kafka.core.DefaultKafkaProducerFactory;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.kafka.core.ProducerFactory;

@Configuration
public class KafkaProducerConfiguration {

	@Bean
	public ProducerFactory<String, String> producerFactory(){
		 Map<String,Object> configProps=new HashMap<>();
		 configProps.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, "localhost:9092");
		 configProps.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);
		 configProps.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, StringSerializer.class);
		 return new DefaultKafkaProducerFactory<String, String>(configProps);
	}
	
	@Bean
	public KafkaTemplate<String,String> kafkaTemplate(){
		return new KafkaTemplate<>(producerFactory());
	}
}


KafkaProducerController.java
package com.pack.SpringBootKafkaProducer1.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;

import com.pack.SpringBootKafkaProducer1.service.KafkaProducer;

@RestController
public class KafkaProducerController {
	
	@Autowired
	KafkaProducer producer;

	@GetMapping("/animal")
	public void sendAnimals() throws Exception {
		producer.sendMessage();
	}
}


KafkaProducer.java

package com.pack.SpringBootKafkaProducer1.service;

import java.util.ArrayList;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.stereotype.Service;

@Service
public class KafkaProducer {
	
	@Autowired
	KafkaTemplate<String,String> kafkaTemplate;
	
	//custom method 
	public void sendMessage() throws Exception {
		ArrayList<String> animallist=new ArrayList<>();
		animallist.add("Tiger");
		animallist.add("Lion");
		animallist.add("Beer");
		animallist.add("Dog");
		animallist.add("Cat");
		
		for(String animals:animallist) {
		   kafkaTemplate.send("animaltopic", animals);
		   System.out.println("Successfully sent the animal name "+animals+" to the topic");
		   Thread.sleep(4000);
		}
	}

}


4. SpringBootKafkaConsumer1

pom.xml

<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.7.5</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.pack</groupId>
	<artifactId>SpringBootKafkaConsumer1</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>SpringBootKafkaConsumer1</name>
	<description>Demo project for Spring Boot</description>
	<properties>
		<java.version>11</java.version>
	</properties>
	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.kafka</groupId>
			<artifactId>spring-kafka</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.kafka</groupId>
			<artifactId>spring-kafka-test</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
		</plugins>
	</build>

</project>


SpringBootKafkaConsumer1Application.java
package com.pack.SpringBootKafkaConsumer1;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.kafka.annotation.EnableKafka;

@SpringBootApplication
@EnableKafka
public class SpringBootKafkaConsumer1Application {

	public static void main(String[] args) {
		SpringApplication.run(SpringBootKafkaConsumer1Application.class, args);
	}

}


KafkaConsumerConfiguration.java
package com.pack.SpringBootKafkaConsumer1.config;

import java.util.HashMap;
import java.util.Map;

import org.apache.kafka.clients.consumer.ConsumerConfig;
import org.apache.kafka.common.serialization.StringDeserializer;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.kafka.config.ConcurrentKafkaListenerContainerFactory;
import org.springframework.kafka.core.ConsumerFactory;
import org.springframework.kafka.core.DefaultKafkaConsumerFactory;

@Configuration
public class KafkaConsumerConfiguration {

	@Bean
	public ConsumerFactory<String,String> consumerFactory(){
		Map<String,Object> config=new HashMap<>();
		config.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, "localhost:9092");
		config.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class);
		config.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class);
		config.put(ConsumerConfig.GROUP_ID_CONFIG, "ggg5");
		return new DefaultKafkaConsumerFactory<String, String>(config);
	} 
	
	@Bean
	public ConcurrentKafkaListenerContainerFactory<String, String> kafkaListenerContainerFactory(){
		ConcurrentKafkaListenerContainerFactory<String, String> factory=new ConcurrentKafkaListenerContainerFactory<String, String>();
		factory.setConsumerFactory(consumerFactory());
		return factory;
	}
}


KafkaConsumerImpl.java

package com.pack.SpringBootKafkaConsumer1.service;

import org.springframework.kafka.annotation.KafkaListener;
import org.springframework.stereotype.Service;

@Service
public class KafkaConsumerImpl {
	
	@KafkaListener(topics="animaltopic", containerFactory = "kafkaListenerContainerFactory")
	public void listen(String animalname) {
		System.out.println("Received "+animalname+" from the animaltopic");
	}

}


5. SpringBootProducerAvro

pom.xml

<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.7.6</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.pack</groupId>
	<artifactId>SpringBootProducerAvro</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>SpringBootProducerAvro</name>
	<description>Demo project for Spring Boot</description>
	<properties>
		<java.version>11</java.version>
	</properties>
	 <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.kafka</groupId>
            <artifactId>spring-kafka</artifactId>
        </dependency>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <optional>true</optional>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework.kafka</groupId>
            <artifactId>spring-kafka-test</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.apache.avro</groupId>
            <artifactId>avro</artifactId>
            <version>1.10.2</version>
        </dependency>

        <dependency>
            <groupId>io.confluent</groupId>
            <artifactId>kafka-avro-serializer</artifactId>
            <version>7.1.0</version>
        </dependency>

        <dependency>
            <groupId>io.confluent</groupId>
            <artifactId>kafka-schema-registry-client</artifactId>
            <version>7.1.1</version>
        </dependency>

        <dependency>
            <groupId>org.apache.kafka</groupId>
            <artifactId>kafka-clients</artifactId>
        </dependency>
        
    </dependencies>

    <repositories>
        <repository>
            <id>confluent</id>
            <url>http://packages.confluent.io/maven/</url>
        </repository>
    </repositories>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
                    <excludes>
                        <exclude>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok</artifactId>
                        </exclude>
                    </excludes>
                </configuration>
            </plugin>
           
            <plugin>
                <groupId>org.apache.avro</groupId>
                <artifactId>avro-maven-plugin</artifactId>
                <version>1.10.1</version>
                <executions>
                    <execution>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>schema</goal>
                            <goal>protocol</goal>
                            <goal>idl-protocol</goal>
                        </goals>
                        <configuration>
                            <sourceDirectory>${project.basedir}/src/main/resources/avro</sourceDirectory>
                            <stringType>String</stringType>
                            <createSetters>false</createSetters>
                            <enableDecimalLogicalType>true</enableDecimalLogicalType>
                            <fieldVisibility>private</fieldVisibility>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <!--force discovery of generated classes -->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>build-helper-maven-plugin</artifactId>
                <version>3.0.0</version>
                <executions>
                    <execution>
                        <id>add-source</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>add-source</goal>
                        </goals>
                        <configuration>
                            <sources>
                                <source>target/generated-sources/avro</source>
                            </sources>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            
        </plugins>
    </build>


</project>


application.yml

server:
  port: 8000

spring:
  kafka:
    producer:
      value-serializer: io.confluent.kafka.serializers.KafkaAvroSerializer
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      group-id: topic-user
      bootstrap-servers: localhost:9092
    properties:
      auto:
        register:
          schemas: true
      schema:
        registry:
          url: http://127.0.0.1:8081

topic:
  name:
    producer: topic-user


avro/user.avsc

{
  "name": "UserAvro",
  "type": "record",
  "namespace": "com.pack.model",
  "fields": [
    {
      "name": "id",
      "type": "int"
    },
    {
      "name": "name",
      "type": "string"
    },
    {
      "name": "documentNumber",
      "type": "string"
    },
    {
      "name": "age",
      "type": "int"
    }
  ]
}

SpringBootProducerAvroApplication.java
package com.pack.SpringBootProducerAvro;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class SpringBootProducerAvroApplication {

	public static void main(String[] args) {
		SpringApplication.run(SpringBootProducerAvroApplication.class, args);
	}

}

User.java
package com.pack.SpringBootProducerAvro.model;

import lombok.Data;

@Data
public class User {
    private Integer id;
    private String name;
    private String documentNumber;
    private Integer age;
}


UserController.java
package com.pack.SpringBootProducerAvro.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import com.pack.SpringBootProducerAvro.model.User;
import com.pack.SpringBootProducerAvro.service.KafkaService;

@RestController
public class UserController {

    @Autowired
    KafkaService service;
    
    @PostMapping("/users")
    public void saveUser(@RequestBody User user){
        service.producer(user);
    }
}


KafkaService.java
package com.pack.SpringBootProducerAvro.service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.stereotype.Component;

import com.pack.SpringBootProducerAvro.model.User;
import com.pack.model.UserAvro;

import lombok.extern.slf4j.Slf4j;

@Component
@Slf4j
public class KafkaService {

    @Value("${topic.name.producer}")
    private String value;

    @Autowired
    KafkaTemplate<String, UserAvro> kafkaTemplate;

    public void producer(User user) {
        UserAvro userAvro = UserAvro.newBuilder()
        		.setId(user.getId())
        		.setName(user.getName())
                .setAge(user.getAge())
                .setDocumentNumber(user.getDocumentNumber()).build();
        kafkaTemplate.send(value, userAvro);
        log.info("{}",userAvro);
    }
}


6. SpringBootConsumerAvro

pom.xml

<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.7.6</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.pack</groupId>
	<artifactId>SpringBootConsumerAvro</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>SpringBootConsumerAvro</name>
	<description>Demo project for Spring Boot</description>
	<properties>
		<java.version>11</java.version>
	</properties>
	<dependencies>
        <dependency>
            <groupId>org.springframework.kafka</groupId>
            <artifactId>spring-kafka</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <optional>true</optional>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework.kafka</groupId>
            <artifactId>spring-kafka-test</artifactId>
            <scope>test</scope>
        </dependency>

       
        <dependency>
            <groupId>org.apache.avro</groupId>
            <artifactId>avro</artifactId>
            <version>1.10.1</version>
        </dependency>

        <dependency>
            <groupId>org.apache.kafka</groupId>
            <artifactId>kafka-clients</artifactId>
        </dependency>

        <dependency>
            <groupId>io.confluent</groupId>
            <artifactId>kafka-avro-serializer</artifactId>
            <version>5.3.0</version>
        </dependency>
        
    </dependencies>

    
    <repositories>
        <repository>
            <id>confluent</id>
            <url>https://packages.confluent.io/maven/</url>
        </repository>
    </repositories>
    
    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
                    <excludes>
                        <exclude>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok</artifactId>
                        </exclude>
                    </excludes>
                </configuration>
            </plugin>
          
            <plugin>
                <groupId>org.apache.avro</groupId>
                <artifactId>avro-maven-plugin</artifactId>
                <version>1.10.1</version>
                <executions>
                    <execution>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>schema</goal>
                            <goal>protocol</goal>
                            <goal>idl-protocol</goal>
                        </goals>
                        <configuration>
                            <sourceDirectory>${project.basedir}/src/main/resources/avro</sourceDirectory>
                            <stringType>String</stringType>
                            <createSetters>false</createSetters>
                            <enableDecimalLogicalType>true</enableDecimalLogicalType>
                            <fieldVisibility>private</fieldVisibility>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <!--force discovery of generated classes -->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>build-helper-maven-plugin</artifactId>
                <version>3.0.0</version>
                <executions>
                    <execution>
                        <id>add-source</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>add-source</goal>
                        </goals>
                        <configuration>
                            <sources>
                                <source>target/generated-sources/avro</source>
                            </sources>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
           
        </plugins>
    </build>
	

</project>


application.yml

server:
  port: 8003
kafka:
  topic: topic-user
spring:
  kafka:
    properties:
      bootstrap-servers: localhost:9092
      schema:
        registry:
          url: http://127.0.0.1:8081
    consumer:
      group-id: group-1
      auto-offset-reset: latest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: io.confluent.kafka.serializers.KafkaAvroDeserializer
      properties:
        specific.avro.reader: true

avro/user.avsc

{
  "name": "UserAvro",
  "type": "record",
  "namespace": "com.pack.model",
  "fields": [
    {
      "name": "id",
      "type": "int"
    },
    {
      "name": "name",
      "type": "string"
    },
    {
      "name": "documentNumber",
      "type": "string"
    },
    {
      "name": "age",
      "type": "int"
    }
  ]
}


SpringBootConsumerAvroApplication.java
package com.pack.SpringBootConsumerAvro;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class SpringBootConsumerAvroApplication {

	public static void main(String[] args) {
		SpringApplication.run(SpringBootConsumerAvroApplication.class, args);
	}

}


User.java

package com.pack.SpringBootConsumerAvro.model;

import lombok.Data;

@Data
public class User {

    private Integer id;
    private String name;
    private String documentNumber;
    private Integer age;
}

KafkaService.java

package com.pack.SpringBootConsumerAvro.service;

import org.apache.kafka.clients.consumer.ConsumerRecord;
import org.springframework.kafka.annotation.KafkaListener;
import org.springframework.stereotype.Component;

import com.pack.SpringBootConsumerAvro.model.User;
import com.pack.model.UserAvro;

import lombok.extern.slf4j.Slf4j;

@Component
@Slf4j
public class KafkaService {

    @KafkaListener(topics = "${kafka.topic}",groupId = "group-1")
    public void consumer(ConsumerRecord<String, UserAvro> userAvro){
        User user = new User();
        UserAvro value = userAvro.value();
        user.setId(value.getId());        
        user.setDocumentNumber(value.getDocumentNumber());
        user.setName(value.getName());
        user.setAge(value.getAge());
        log.info("{}",user);
    }

}
