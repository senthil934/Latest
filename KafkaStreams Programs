1. AvroJsonInvoice

pom.xml

<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.4.0</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.pack</groupId>
	<artifactId>AvroJsonInvoice</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>AvroJsonInvoice</name>
	<description>Demo project for Spring Boot</description>
	

    <properties>
        <java.version>11</java.version>
        <spring-cloud.version>Hoxton.SR9</spring-cloud.version>
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.apache.kafka</groupId>
            <artifactId>kafka-streams</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-stream</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-stream-binder-kafka-streams</artifactId>
        </dependency>
        <dependency>
            <groupId>org.apache.avro</groupId>
            <artifactId>avro</artifactId>
            <version>1.9.2</version>
        </dependency>
        <dependency>
            <groupId>io.confluent</groupId>
            <artifactId>kafka-streams-avro-serde</artifactId>
            <version>6.0.0</version>
        </dependency>
        <dependency>
            <groupId>io.confluent</groupId>
            <artifactId>kafka-streams-json-schema-serde</artifactId>
            <version>6.0.0</version>
        </dependency>

        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <optional>true</optional>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-stream</artifactId>
            <scope>test</scope>
            <classifier>test-binder</classifier>
            <type>test-jar</type>
        </dependency>
    </dependencies>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-dependencies</artifactId>
                <version>${spring-cloud.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
            <plugin>
                <groupId>org.apache.avro</groupId>
                <artifactId>avro-maven-plugin</artifactId>
                <version>1.8.2</version>
                <executions>
                    <execution>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>schema</goal>
                        </goals>
                        <configuration>
                            <sourceDirectory>src/main/avro</sourceDirectory>
                            <outputDirectory>${project.build.directory}/generated-sources</outputDirectory>
                            <imports>
                                <import>${project.basedir}/src/main/avro/LineItem.avsc</import>
                                <import>${project.basedir}/src/main/avro/DeliveryAddress.avsc</import>
                            </imports>
                            <stringType>String</stringType>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

    <repositories>
        <repository>
            <id>spring-milestones</id>
            <name>Spring Milestones</name>
            <url>https://repo.spring.io/milestone</url>
        </repository>
        <repository>
            <id>confluent</id>
            <url>https://packages.confluent.io/maven/</url>
        </repository>
    </repositories>

</project>


application.yml
spring:
  cloud:
    stream:
      bindings:
        notification-input-channel:
          destination: avro-pos-topic
        notification-output-channel:
          destination: loyalty-topic
        hadoop-input-channel:
          destination: avro-pos-topic
        hadoop-output-channel:
          destination: hadoop-sink-topic
      kafka:
        streams:
          binder:
            brokers:  localhost:9092
            configuration:
              schema.registry.url: http://localhost:8081
          bindings:
            notification-input-channel:
              consumer:
                valueSerde: io.confluent.kafka.streams.serdes.avro.SpecificAvroSerde
            notification-output-channel:
              producer:
                valueSerde: io.confluent.kafka.streams.serdes.json.KafkaJsonSchemaSerde
            hadoop-input-channel:
              consumer:
                valueSerde: io.confluent.kafka.streams.serdes.avro.SpecificAvroSerde
            hadoop-output-channel:
              producer:
                valueSerde: io.confluent.kafka.streams.serdes.json.KafkaJsonSchemaSerde


Inside src/main/avro folder
DeliveryAddress.avsc
{
  "namespace": "com.pack.model",
  "type": "record",
  "name": "DeliveryAddress",
  "fields": [
    {"name": "AddressLine","type": ["null","string"]},
    {"name": "City","type": ["null","string"]},
    {"name": "State","type": ["null","string"]},
    {"name": "PinCode","type": ["null","string"]},
    {"name": "ContactNumber","type": ["null","string"]}
  ]
}

LineItem.avsc
{
  "namespace": "com.pack.model",
  "type": "record",
  "name": "LineItem",
  "fields": [
    {"name": "ItemCode","type": ["null","string"]},
    {"name": "ItemDescription","type": ["null","string"]},
    {"name": "ItemPrice","type": ["null","double"]},
    {"name": "ItemQty","type": ["null","int"]},
    {"name": "TotalValue","type": ["null","double"]}
  ]
}

PosInvoice.avsc
{
  "namespace": "com.pack.model",
  "type": "record",
  "name": "PosInvoice",
  "fields": [
    {"name": "InvoiceNumber","type": ["null","string"]},
    {"name": "CreatedTime","type": ["null","long"]},
    {"name": "CustomerCardNo","type": ["null","string"]},
    {"name": "TotalAmount","type": ["null","double"]},
    {"name": "NumberOfItems","type": ["null","int"]},
    {"name": "PaymentMethod","type": ["null","string"]},
    {"name": "TaxableAmount","type": ["null","double"]},
    {"name": "CGST","type": ["null","double"]},
    {"name": "SGST","type": ["null","double"]},
    {"name": "CESS","type": ["null","double"]},
    {"name": "StoreID","type": ["null","string"]},
    {"name": "PosID","type": ["null","string"]},
    {"name": "CashierID","type": ["null","string"]},
    {"name": "CustomerType","type": ["null","string"]},
    {"name": "DeliveryType","type": ["null","string"]},
    {"name": "DeliveryAddress","type": ["null","DeliveryAddress"]},
    {"name": "InvoiceLineItems","type": {"type": "array", "items": "LineItem"}}
  ]
}

HadoopRecord.java
package com.pack.AvroJsonInvoice.model;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.Data;

@Data
@JsonInclude(JsonInclude.Include.NON_NULL)
public class HadoopRecord {

    @JsonProperty("InvoiceNumber")
    private String InvoiceNumber;
    @JsonProperty("CreatedTime")
    private Long CreatedTime;
    @JsonProperty("StoreID")
    private String StoreID;
    @JsonProperty("PosID")
    private String PosID;
    @JsonProperty("CustomerType")
    private String CustomerType;
    @JsonProperty("PaymentMethod")
    private String PaymentMethod;
    @JsonProperty("DeliveryType")
    private String DeliveryType;
    @JsonProperty("City")
    private String City;
    @JsonProperty("State")
    private String State;
    @JsonProperty("PinCode")
    private String PinCode;
    @JsonProperty("ItemCode")
    private String ItemCode;
    @JsonProperty("ItemDescription")
    private String ItemDescription;
    @JsonProperty("ItemPrice")
    private Double ItemPrice;
    @JsonProperty("ItemQty")
    private Integer ItemQty;
    @JsonProperty("TotalValue")
    private Double TotalValue;
}


Notification.java
package com.pack.AvroJsonInvoice.model;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.Data;

@Data
@JsonInclude(JsonInclude.Include.NON_NULL)
public class Notification {

    @JsonProperty("InvoiceNumber")
    private String InvoiceNumber;
    @JsonProperty("CustomerCardNo")
    private String CustomerCardNo;
    @JsonProperty("TotalAmount")
    private Double TotalAmount;
    @JsonProperty("EarnedLoyaltyPoints")
    private Double EarnedLoyaltyPoints;
}


PosListenerBinding.java
package com.pack.AvroJsonInvoice.binding;



import org.apache.kafka.streams.kstream.KStream;
import org.springframework.cloud.stream.annotation.Input;
import org.springframework.cloud.stream.annotation.Output;

import com.pack.AvroJsonInvoice.model.HadoopRecord;
import com.pack.AvroJsonInvoice.model.Notification;
import com.pack.model.PosInvoice;

public interface PosListenerBinding {

    @Input("notification-input-channel")
    KStream<String, PosInvoice> notificationInputStream();

    @Output("notification-output-channel")
    KStream<String, Notification> notificationOutputStream();

    @Input("hadoop-input-channel")
    KStream<String, PosInvoice> hadoopInputStream();

    @Output("hadoop-output-channel")
    KStream<String, HadoopRecord> hadoopOutputStream();

}


HadoopRecordProcessorService.java
package com.pack.AvroJsonInvoice.service;

import org.apache.kafka.streams.kstream.KStream;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cloud.stream.annotation.EnableBinding;
import org.springframework.cloud.stream.annotation.StreamListener;
import org.springframework.messaging.handler.annotation.SendTo;
import org.springframework.stereotype.Service;

import com.pack.AvroJsonInvoice.binding.PosListenerBinding;
import com.pack.AvroJsonInvoice.model.HadoopRecord;
import com.pack.model.PosInvoice;

import lombok.extern.log4j.Log4j2;

@Service
@Log4j2
@EnableBinding(PosListenerBinding.class)
public class HadoopRecordProcessorService {

    @Autowired
    RecordBuilder recordBuilder;

    @StreamListener("hadoop-input-channel")
    @SendTo("hadoop-output-channel")
    public KStream<String, HadoopRecord> process(KStream<String, PosInvoice> input) {

        KStream<String, HadoopRecord> hadoopRecordKStream = input
                .mapValues( v -> recordBuilder.getMaskedInvoice(v))
                .flatMapValues( v -> recordBuilder.getHadoopRecords(v));

        hadoopRecordKStream.foreach((k, v) -> log.info(String.format("Hadoop Record:- Key: %s, Value: %s", k, v)));

        return hadoopRecordKStream;
    }
}


NotificationProcessorService.java
package com.pack.AvroJsonInvoice.service;

import org.apache.kafka.streams.kstream.KStream;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cloud.stream.annotation.EnableBinding;
import org.springframework.cloud.stream.annotation.StreamListener;
import org.springframework.messaging.handler.annotation.SendTo;
import org.springframework.stereotype.Service;

import com.pack.AvroJsonInvoice.binding.PosListenerBinding;
import com.pack.AvroJsonInvoice.model.Notification;
import com.pack.model.PosInvoice;

import lombok.extern.log4j.Log4j2;

@Service
@Log4j2
@EnableBinding(PosListenerBinding.class)
public class NotificationProcessorService {

    @Autowired
    RecordBuilder recordBuilder;

    @StreamListener("notification-input-channel")
    @SendTo("notification-output-channel")
    public KStream<String, Notification> process(KStream<String, PosInvoice> input) {

        KStream<String, Notification> notificationKStream = input
                .filter((k, v) -> v.getCustomerType().equalsIgnoreCase("PRIME"))
                .mapValues(v -> recordBuilder.getNotification(v));

        notificationKStream.foreach((k, v) -> log.info(String.format("Notification:- Key: %s, Value: %s", k, v)));

        return notificationKStream;
    }
}


RecordBuilder.java
package com.pack.AvroJsonInvoice.service;


import java.util.ArrayList;
import java.util.List;

import org.springframework.stereotype.Service;

import com.pack.AvroJsonInvoice.model.HadoopRecord;
import com.pack.AvroJsonInvoice.model.Notification;
import com.pack.model.LineItem;
import com.pack.model.PosInvoice;

@Service
public class RecordBuilder {

    public Notification getNotification(PosInvoice invoice){
        Notification notification = new Notification();
        notification.setInvoiceNumber(invoice.getInvoiceNumber());
        notification.setCustomerCardNo(invoice.getCustomerCardNo());
        notification.setTotalAmount(invoice.getTotalAmount());
        notification.setEarnedLoyaltyPoints(invoice.getTotalAmount() * 0.02);
        return notification;
    }

    public PosInvoice getMaskedInvoice(PosInvoice invoice){
        invoice.setCustomerCardNo(null);
        if (invoice.getDeliveryType().equalsIgnoreCase("HOME-DELIVERY")) {
            invoice.getDeliveryAddress().setAddressLine(null);
            invoice.getDeliveryAddress().setContactNumber(null);
        }
        return invoice;
    }

    public List<HadoopRecord> getHadoopRecords(PosInvoice invoice){
        List<HadoopRecord> records = new ArrayList<>();

        for (LineItem i : invoice.getInvoiceLineItems()) {
            HadoopRecord record = new HadoopRecord();
            record.setInvoiceNumber(invoice.getInvoiceNumber());
            record.setCreatedTime(invoice.getCreatedTime());
            record.setStoreID(invoice.getStoreID());
            record.setPosID(invoice.getPosID());
            record.setCustomerType(invoice.getCustomerType());
            record.setPaymentMethod(invoice.getPaymentMethod());
            record.setDeliveryType(invoice.getDeliveryType());
            record.setItemCode(i.getItemCode());
            record.setItemDescription(i.getItemDescription());
            record.setItemPrice(i.getItemPrice());
            record.setItemQty(i.getItemQty());
            record.setTotalValue(i.getTotalValue());
            if (invoice.getDeliveryType().toString().equalsIgnoreCase("HOME-DELIVERY")) {
                record.setCity(invoice.getDeliveryAddress().getCity());
                record.setState(invoice.getDeliveryAddress().getState());
                record.setPinCode(invoice.getDeliveryAddress().getPinCode());
            }
            records.add(record);
        }
        return records;
    }
}



2. AvroVersion1

pom.xml
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.pack</groupId>
  <artifactId>AvroVersion1</artifactId>
  <version>0.0.1-SNAPSHOT</version>
   <properties>
        <confluent.version>5.4.3</confluent.version>
         <maven.compiler.source>11</maven.compiler.source>
     <maven.compiler.target>11</maven.compiler.target>
    </properties>


    <repositories>
        <repository>
            <id>confluent</id>
            <url>https://packages.confluent.io/maven/</url>
        </repository>
    </repositories>

    <dependencies>
        <dependency>
            <groupId>io.confluent</groupId>
            <artifactId>kafka-avro-serializer</artifactId>
            <version>${confluent.version}</version>
        </dependency>

        <dependency>
            <groupId>io.confluent</groupId>
            <artifactId>kafka-schema-registry-client</artifactId>
            <version>${confluent.version}</version>
        </dependency>

        <dependency>
            <groupId>org.apache.avro</groupId>
            <artifactId>avro</artifactId>
            <version>1.11.0</version>
        </dependency>

    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.avro</groupId>
                <artifactId>avro-maven-plugin</artifactId>
                <version>1.8.2</version>
                <executions>
                    <execution>
                       <?m2e execute onConfiguration?>
                        <id>schemas</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>schema</goal>
                            <goal>protocol</goal>
                            <goal>idl-protocol</goal>
                        </goals>
                        <configuration>
                            <sourceDirectory>${project.basedir}/src/main/resources/</sourceDirectory>
                            <outputDirectory>${project.basedir}/src/main/java/</outputDirectory>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
</project>

Inside src/main/resources/schema
ClickRecord.avsc
{ "type": "record",
  "namespace": "com.pack",
  "name": "ClickRecord",
  "fields": [
     {"name": "session_id", "type": "string"},
     {"name": "browser", "type": ["string", "null"]},
     {"name": "campaign", "type": ["string", "null"]},
     {"name": "channel", "type": "string"},
     {"name": "referrer", "type": ["string", "null"], "default": "None"},
     {"name": "ip", "type": ["string", "null"]}
   ]
}


AvroProducerV1.java
package com.pack;

import java.util.Properties;

import org.apache.kafka.clients.producer.KafkaProducer;
import org.apache.kafka.clients.producer.Producer;
import org.apache.kafka.clients.producer.ProducerRecord;

public class AvroProducerV1 {

    public static void main(String[] args) throws Exception{

        String topicName = "AvroClicks";
        String msg;

        Properties props = new Properties();
        props.put("bootstrap.servers", "localhost:9092,localhost:9093");        
        props.put("key.serializer","org.apache.kafka.common.serialization.StringSerializer");
        props.put("value.serializer", "io.confluent.kafka.serializers.KafkaAvroSerializer");
        props.put("schema.registry.url", "http://localhost:8081");

        Producer<String, ClickRecord> producer = new KafkaProducer <>(props);
        ClickRecord cr = new ClickRecord();
        try{
            cr.setSessionId("10001");
            cr.setChannel("HomePage");
            cr.setIp("192.168.0.1");

            producer.send(new ProducerRecord<String, ClickRecord>(topicName,cr.getSessionId().toString(),cr)).get();

            System.out.println("Complete");
        }
        catch(Exception ex){
            ex.printStackTrace(System.out);
        }
        finally{
            producer.close();
        }

   }
}


AvroConsumerV1.java
package com.pack;

import java.util.Arrays;
import java.util.Properties;

import org.apache.kafka.clients.consumer.ConsumerRecord;
import org.apache.kafka.clients.consumer.ConsumerRecords;
import org.apache.kafka.clients.consumer.KafkaConsumer;

public class AvroConsumerV1{    
    
    public static void main(String[] args) throws Exception{

        String topicName = "AvroClicks";
            
        String groupName = "RG1";
        Properties props = new Properties();
        props.put("bootstrap.servers", "localhost:9092,localhost:9093");
        props.put("group.id", groupName);
        props.put("key.deserializer", "org.apache.kafka.common.serialization.StringDeserializer");
        props.put("value.deserializer", "io.confluent.kafka.serializers.KafkaAvroDeserializer");
        props.put("schema.registry.url", "http://localhost:8081");
        props.put("specific.avro.reader", "true");
        
        KafkaConsumer<String, ClickRecord> consumer = new KafkaConsumer<>(props);
        consumer.subscribe(Arrays.asList(topicName));
        try{
            while (true){
                ConsumerRecords<String, ClickRecord> records = consumer.poll(100);
                for (ConsumerRecord<String, ClickRecord> record : records){
                        System.out.println("Session id="+ record.value().getSessionId()
                                         + " Channel=" + record.value().getChannel() 
                                         + " Referrer=" + record.value().getReferrer());
                    }
                }
            }catch(Exception ex){
                ex.printStackTrace();
            }
            finally{
                consumer.close();
            }
    }
    
}


3. AvroVersion2

pom.xml
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.pack</groupId>
  <artifactId>AvroVersion2</artifactId>
  <version>0.0.1-SNAPSHOT</version>
   <properties>
        <confluent.version>5.4.3</confluent.version>
         <maven.compiler.source>11</maven.compiler.source>
     <maven.compiler.target>11</maven.compiler.target>
    </properties>


    <repositories>
        <repository>
            <id>confluent</id>
            <url>https://packages.confluent.io/maven/</url>
        </repository>
    </repositories>

    <dependencies>
        <dependency>
            <groupId>io.confluent</groupId>
            <artifactId>kafka-avro-serializer</artifactId>
            <version>${confluent.version}</version>
        </dependency>

        <dependency>
            <groupId>io.confluent</groupId>
            <artifactId>kafka-schema-registry-client</artifactId>
            <version>${confluent.version}</version>
        </dependency>

        <dependency>
            <groupId>org.apache.avro</groupId>
            <artifactId>avro</artifactId>
            <version>1.11.0</version>
        </dependency>

    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.avro</groupId>
                <artifactId>avro-maven-plugin</artifactId>
                <version>1.8.2</version>
                <executions>
                    <execution>
                       <?m2e execute onConfiguration?>
                        <id>schemas</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>schema</goal>
                            <goal>protocol</goal>
                            <goal>idl-protocol</goal>
                        </goals>
                        <configuration>
                            <sourceDirectory>${project.basedir}/src/main/resources/</sourceDirectory>
                            <outputDirectory>${project.basedir}/src/main/java/</outputDirectory>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
</project>


Inside src/main/resources/schema
ClickRecord.avsc
{"type": "record",
 "namespace": "com.pack",
 "name": "ClickRecord",
 "fields": [
     {"name": "session_id", "type": "string"},
     {"name": "browser", "type": ["string", "null"]},
     {"name": "campaign", "type": ["string", "null"]},
     {"name": "channel", "type": "string"},
     {"name": "entry_url", "type": ["string", "null"], "default": "None"},
     {"name": "ip", "type": ["string", "null"]},
     {"name": "language", "type": ["string", "null"], "default": "None"},
     {"name": "os", "type": ["string", "null"],"default": "None"}     
 ]
}


AvroProducerV2.java
package com.pack;

import java.util.Properties;

import org.apache.kafka.clients.producer.KafkaProducer;
import org.apache.kafka.clients.producer.Producer;
import org.apache.kafka.clients.producer.ProducerRecord;

public class AvroProducerV2 {

    public static void main(String[] args) throws Exception{

        String topicName = "AvroClicks";
        String msg;

        Properties props = new Properties();
        props.put("bootstrap.servers", "localhost:9092,localhost:9093");
        props.put("key.serializer","org.apache.kafka.common.serialization.StringSerializer");
        props.put("value.serializer", "io.confluent.kafka.serializers.KafkaAvroSerializer");
        props.put("schema.registry.url", "http://localhost:8081");

        Producer<String, ClickRecord> producer = new KafkaProducer <>(props);
        ClickRecord cr = new ClickRecord();
        try{
            cr.setSessionId("10002");
            cr.setChannel("HomePage2");
            cr.setIp("192.168.0.2");
            cr.setLanguage("Spanish");
            cr.setOs("Mac");
            cr.setEntryUrl("http://facebook.com/myadd");

            producer.send(new ProducerRecord<String, ClickRecord>(topicName,cr.getSessionId().toString(),cr)).get();

            System.out.println("Complete");
        }
        catch(Exception ex){
            ex.printStackTrace(System.out);
        }
        finally{
            producer.close();
        }

   }
}


AvroConsumerV2.java
package com.pack;

import java.util.Arrays;
import java.util.Properties;

import org.apache.kafka.clients.consumer.ConsumerRecord;
import org.apache.kafka.clients.consumer.ConsumerRecords;
import org.apache.kafka.clients.consumer.KafkaConsumer;

public class AvroConsumerV2{    
    
    public static void main(String[] args) throws Exception{

        String topicName = "AvroClicks";
            
        String groupName = "RG1";
        Properties props = new Properties();
        props.put("bootstrap.servers", "localhost:9092,localhost:9093");
        props.put("group.id", groupName);
        props.put("key.deserializer", "org.apache.kafka.common.serialization.StringDeserializer");
        props.put("value.deserializer", "io.confluent.kafka.serializers.KafkaAvroDeserializer");
        props.put("schema.registry.url", "http://localhost:8081");
        props.put("specific.avro.reader", "true");
        
        KafkaConsumer<String, ClickRecord> consumer = new KafkaConsumer<>(props);
        consumer.subscribe(Arrays.asList(topicName));
        try{
            while (true){
                ConsumerRecords<String, ClickRecord> records = consumer.poll(100);
                for (ConsumerRecord<String, ClickRecord> record : records){
                        System.out.println("Session id="+ record.value().getSessionId()
                                         + " Channel=" + record.value().getChannel() 
                                         + " Entry URL=" + record.value().getEntryUrl()
                                         + " Language=" + record.value().getLanguage());
                    }
                }
            }catch(Exception ex){
                ex.printStackTrace();
            }
            finally{
                consumer.close();
            }
    }
    
}


4. JavaToAvro

pom.xml
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.pack</groupId>
  <artifactId>JavaToAvro</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>JavaToAvro</name>
  
  <dependencies>
     <dependency>
        <groupId>org.apache.avro</groupId>
        <artifactId>avro</artifactId>
        <version>1.11.0</version>
     </dependency>
  </dependencies>
</project>


Inside src/main/resources
employee.avsc
{
  "type" : "record",
  "name" : "Employee",
  "namespace" : "com.pack.model",
  "fields" : [ {
    "name" : "address",
    "type" : {
      "type" : "record",
      "name" : "Address",
      "fields" : [ {
        "name" : "city",
        "type" : "string"
      }, {
        "name" : "state",
        "type" : "string"
      }, {
        "name" : "street",
        "type" : "string"
      }, {
        "name" : "zipcode",
        "type" : {
          "type" : "string",
          "java-class" : "java.math.BigDecimal"
        }
      } ]
    }
  }, {
    "name" : "empId",
    "type" : "int"
  }, {
    "name" : "name",
    "type" : "string"
  }, {
    "name" : "salary",
    "type" : "double"
  } ]
}


Address.java
package com.pack.model;

import java.math.BigDecimal;

public class Address {
    private String street;
    private String city;
    private String state;
    private BigDecimal zipcode;
}


Employee.java
package com.pack.model;

public class Employee {
     private Integer empId;
     private String name;
     private Double salary;
     private Address address;
}

Main.java
package com.pack.model;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;

import org.apache.avro.Schema;
import org.apache.avro.reflect.ReflectData;

public class Main {

	public static void main(String[] args) throws IOException{
		Schema schema=ReflectData.get().getSchema(Employee.class);
	    //System.out.println(schema.toString(true));
		File f=new File("src/main/resources/employee.avsc");
		FileWriter fw=new FileWriter(f);
		fw.append(schema.toString(true));
		fw.close();
	}

}


5. JSONAvroInvoice

pom.xml
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.4.0</version>
		<relativePath /> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.pack</groupId>
	<artifactId>JSONAvroInvoice</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>JSONAvroInvoice</name>
	<description>Demo project for Spring Boot</description>
	<properties>
		<java.version>11</java.version>
		<spring-cloud.version>Hoxton.SR9</spring-cloud.version>
	</properties>

	<dependencies>
		<dependency>
			<groupId>org.apache.kafka</groupId>
			<artifactId>kafka-streams</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-stream</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-stream-binder-kafka-streams</artifactId>
		</dependency>
		<dependency>
			<groupId>org.apache.avro</groupId>
			<artifactId>avro</artifactId>
			<version>1.9.2</version>
		</dependency>
		<dependency>
			<groupId>io.confluent</groupId>
			<artifactId>kafka-streams-avro-serde</artifactId>
			<version>6.0.0</version>
		</dependency>

		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-stream</artifactId>
			<scope>test</scope>
			<classifier>test-binder</classifier>
			<type>test-jar</type>
		</dependency>
	</dependencies>

	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-dependencies</artifactId>
				<version>${spring-cloud.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
			<plugin>
				<groupId>org.apache.avro</groupId>
				<artifactId>avro-maven-plugin</artifactId>
				<version>1.8.2</version>
				<executions>
					<execution>
						<phase>generate-sources</phase>
						<goals>
							<goal>schema</goal>
						</goals>
						<configuration>
							<sourceDirectory>src/main/avro</sourceDirectory>
							<outputDirectory>${project.build.directory}/generated-sources</outputDirectory>
							<stringType>String</stringType>
						</configuration>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>

	<repositories>
		<repository>
			<id>spring-milestones</id>
			<name>Spring Milestones</name>
			<url>https://repo.spring.io/milestone</url>
		</repository>
		<repository>
			<id>confluent</id>
			<url>http://packages.confluent.io/maven/</url>
		</repository>
	</repositories>
</project>


application.yml
spring:
  cloud:
    stream:
      bindings:
        notification-input-channel:
          destination: pos-topic
        notification-output-channel:
          destination: loyalty-topic
        hadoop-input-channel:
          destination: pos-topic
        hadoop-output-channel:
          destination: hadoop-sink-topic
      kafka:
        streams:
          binder:
            brokers:  localhost:9092
            configuration:
                schema.registry.url: http://localhost:8081
          bindings:
            notification-output-channel:
              producer:
                valueSerde: io.confluent.kafka.streams.serdes.avro.SpecificAvroSerde
            hadoop-output-channel:
              producer:
                valueSerde: io.confluent.kafka.streams.serdes.avro.SpecificAvroSerde


Inside src/main/avro
HadoopRecord.avsc
{"namespace": "com.pack.JSONAvroInvoice.avro.model",
  "type": "record",
  "name": "HadoopRecord",
  "fields": [
    {"name": "InvoiceNumber", "type": ["null", "string"]},
    {"name": "CreatedTime",  "type":["null", "long"]},
    {"name": "StoreID",  "type": ["null", "string"]},
    {"name": "PosID",  "type": ["null", "string"]},
    {"name": "CustomerType",  "type": ["null", "string"]},
    {"name": "PaymentMethod",  "type": ["null", "string"]},
    {"name": "DeliveryType",  "type": ["null", "string"]},
    {"name": "City",  "type": ["null", "string"]},
    {"name": "State",  "type": ["null", "string"]},
    {"name": "PinCode",  "type": ["null", "string"]},
    {"name": "ItemCode",  "type": ["null", "string"]},
    {"name": "ItemDescription",  "type": ["null", "string"]},
    {"name": "ItemPrice",  "type": ["null", "double"]},
    {"name": "ItemQty",  "type": ["null", "int"]},
    {"name": "TotalValue",  "type": ["null", "double"]}
  ]
}

Notification.avsc
{"namespace": "com.pack.JSONAvroInvoice.avro.model",
  "type": "record",
  "name": "Notification",
  "fields": [
    {"name": "InvoiceNumber", "type": ["null", "string"]},
    {"name": "CustomerCardNo",  "type":["null", "string"]},
    {"name": "TotalAmount",  "type": ["null", "double"]},
    {"name": "EarnedLoyaltyPoints",  "type": ["null", "double"]}
  ]
}

DeliveryAddress.java
package com.pack.JSONAvroInvoice.model;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

import lombok.Data;

@Data
@JsonInclude(JsonInclude.Include.NON_NULL)
public class DeliveryAddress {

    @JsonProperty("AddressLine")
    private String addressLine;
    @JsonProperty("City")
    private String city;
    @JsonProperty("State")
    private String state;
    @JsonProperty("PinCode")
    private String pinCode;
    @JsonProperty("ContactNumber")
    private String contactNumber;
}

LineItem.java
package com.pack.JSONAvroInvoice.model;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

import lombok.Data;

@Data
@JsonInclude(JsonInclude.Include.NON_NULL)
public class LineItem {

    @JsonProperty("ItemCode")
    private String itemCode;
    @JsonProperty("ItemDescription")
    private String itemDescription;
    @JsonProperty("ItemPrice")
    private Double itemPrice;
    @JsonProperty("ItemQty")
    private Integer itemQty;
    @JsonProperty("TotalValue")
    private Double totalValue;

}

PosInvoice.java
package com.pack.JSONAvroInvoice.model;

import java.util.ArrayList;
import java.util.List;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

import lombok.Data;

@Data
@JsonInclude(JsonInclude.Include.NON_NULL)
public class PosInvoice {

    @JsonProperty("InvoiceNumber")
    private String invoiceNumber;
    @JsonProperty("CreatedTime")
    private Long createdTime;
    @JsonProperty("StoreID")
    private String storeID;
    @JsonProperty("PosID")
    private String posID;
    @JsonProperty("CashierID")
    private String cashierID;
    @JsonProperty("CustomerType")
    private String customerType;
    @JsonProperty("CustomerCardNo")
    private String customerCardNo;
    @JsonProperty("TotalAmount")
    private Double totalAmount;
    @JsonProperty("NumberOfItems")
    private Integer numberOfItems;
    @JsonProperty("PaymentMethod")
    private String paymentMethod;
    @JsonProperty("TaxableAmount")
    private Double taxableAmount;
    @JsonProperty("CGST")
    private Double cGST;
    @JsonProperty("SGST")
    private Double sGST;
    @JsonProperty("CESS")
    private Double cESS;
    @JsonProperty("DeliveryType")
    private String deliveryType;
    @JsonProperty("DeliveryAddress")
    private DeliveryAddress deliveryAddress;
    @JsonProperty("InvoiceLineItems")
    private List<LineItem> invoiceLineItems = new ArrayList<LineItem>();
}

PosListenerBinding.java
package com.pack.JSONAvroInvoice.binding;

import org.apache.kafka.streams.kstream.KStream;
import org.springframework.cloud.stream.annotation.Input;
import org.springframework.cloud.stream.annotation.Output;

import com.pack.JSONAvroInvoice.avro.model.HadoopRecord;
import com.pack.JSONAvroInvoice.avro.model.Notification;
import com.pack.JSONAvroInvoice.model.PosInvoice;

public interface PosListenerBinding {

    @Input("notification-input-channel")
    KStream<String, PosInvoice> notificationInputStream();

    @Output("notification-output-channel")
    KStream<String, Notification> notificationOutputStream();

    @Input("hadoop-input-channel")
    KStream<String, PosInvoice> hadoopInputStream();

    @Output("hadoop-output-channel")
    KStream<String, HadoopRecord> hadoopOutputStream();

}


HadoopRecordProcessorService.java
package com.pack.JSONAvroInvoice.service;

import org.apache.kafka.streams.kstream.KStream;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cloud.stream.annotation.EnableBinding;
import org.springframework.cloud.stream.annotation.StreamListener;
import org.springframework.messaging.handler.annotation.SendTo;
import org.springframework.stereotype.Service;

import com.pack.JSONAvroInvoice.avro.model.HadoopRecord;
import com.pack.JSONAvroInvoice.binding.PosListenerBinding;
import com.pack.JSONAvroInvoice.model.PosInvoice;

import lombok.extern.log4j.Log4j2;

@Service
@Log4j2
@EnableBinding(PosListenerBinding.class)
public class HadoopRecordProcessorService {

    @Autowired
    RecordBuilder recordBuilder;

    @StreamListener("hadoop-input-channel")
    @SendTo("hadoop-output-channel")
    public KStream<String, HadoopRecord> process(KStream<String, PosInvoice> input) {

        KStream<String, HadoopRecord> hadoopRecordKStream = input
                .mapValues( v -> recordBuilder.getMaskedInvoice(v))
                .flatMapValues( v -> recordBuilder.getHadoopRecords(v));

        hadoopRecordKStream.foreach((k, v) -> log.info(String.format("Hadoop Record:- Key: %s, Value: %s", k, v)));

        return hadoopRecordKStream;
    }
}

NotificationProcessorService.java
package com.pack.JSONAvroInvoice.service;

import org.apache.kafka.streams.kstream.KStream;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cloud.stream.annotation.EnableBinding;
import org.springframework.cloud.stream.annotation.StreamListener;
import org.springframework.messaging.handler.annotation.SendTo;
import org.springframework.stereotype.Service;

import com.pack.JSONAvroInvoice.avro.model.Notification;
import com.pack.JSONAvroInvoice.binding.PosListenerBinding;
import com.pack.JSONAvroInvoice.model.PosInvoice;

import lombok.extern.log4j.Log4j2;

@Service
@Log4j2
@EnableBinding(PosListenerBinding.class)
public class NotificationProcessorService {

    @Autowired
    RecordBuilder recordBuilder;

    @StreamListener("notification-input-channel")
    @SendTo("notification-output-channel")
    public KStream<String, Notification> process(KStream<String, PosInvoice> input) {

        KStream<String, Notification> notificationKStream = input
                .filter((k, v) -> v.getCustomerType().equalsIgnoreCase("PRIME"))
                .mapValues(v -> recordBuilder.getNotification(v));

        notificationKStream.foreach((k, v) -> log.info(String.format("Notification:- Key: %s, Value: %s", k, v)));

        return notificationKStream;
    }
}


RecordBuilder.java
package com.pack.JSONAvroInvoice.service;

import java.util.ArrayList;
import java.util.List;

import org.springframework.stereotype.Service;

import com.pack.JSONAvroInvoice.avro.model.HadoopRecord;
import com.pack.JSONAvroInvoice.avro.model.Notification;
import com.pack.JSONAvroInvoice.model.LineItem;
import com.pack.JSONAvroInvoice.model.PosInvoice;

@Service
public class RecordBuilder {

    public Notification getNotification(PosInvoice invoice){
        Notification notification = new Notification();
        notification.setInvoiceNumber(invoice.getInvoiceNumber());
        notification.setCustomerCardNo(invoice.getCustomerCardNo());
        notification.setTotalAmount(invoice.getTotalAmount());
        notification.setEarnedLoyaltyPoints(invoice.getTotalAmount() * 0.02);
        return notification;
    }

    public PosInvoice getMaskedInvoice(PosInvoice invoice){
        invoice.setCustomerCardNo(null);
        if (invoice.getDeliveryType().equalsIgnoreCase("HOME-DELIVERY")) {
            invoice.getDeliveryAddress().setAddressLine(null);
            invoice.getDeliveryAddress().setContactNumber(null);
        }
        return invoice;
    }

    public List<HadoopRecord> getHadoopRecords(PosInvoice invoice){
        List<HadoopRecord> records = new ArrayList<>();

        for (LineItem i : invoice.getInvoiceLineItems()) {
            HadoopRecord record = new HadoopRecord();
            record.setInvoiceNumber(invoice.getInvoiceNumber());
            record.setCreatedTime(invoice.getCreatedTime());
            record.setStoreID(invoice.getStoreID());
            record.setPosID(invoice.getPosID());
            record.setCustomerType(invoice.getCustomerType());
            record.setPaymentMethod(invoice.getPaymentMethod());
            record.setDeliveryType(invoice.getDeliveryType());
            record.setItemCode(i.getItemCode());
            record.setItemDescription(i.getItemDescription());
            record.setItemPrice(i.getItemPrice());
            record.setItemQty(i.getItemQty());
            record.setTotalValue(i.getTotalValue());
            if (invoice.getDeliveryType().toString().equalsIgnoreCase("HOME-DELIVERY")) {
                record.setCity(invoice.getDeliveryAddress().getCity());
                record.setState(invoice.getDeliveryAddress().getState());
                record.setPinCode(invoice.getDeliveryAddress().getPinCode());
            }
            records.add(record);
        }
        return records;
    }
}


6. KafkaAggregate

pom.xml
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.4.1</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.pack</groupId>
	<artifactId>KafkaAggregate</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>KafkaAggregate</name>
	<description>Demo project for Spring Boot</description>
	<properties>
		<java.version>11</java.version>
		<spring-cloud.version>Hoxton.SR9</spring-cloud.version>
	</properties>

	<dependencies>
		<dependency>
			<groupId>org.apache.kafka</groupId>
			<artifactId>kafka-streams</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-stream</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-stream-binder-kafka-streams</artifactId>
		</dependency>
		<dependency>
			<groupId>org.apache.avro</groupId>
			<artifactId>avro</artifactId>
			<version>1.9.2</version>
		</dependency>
		<dependency>
			<groupId>io.confluent</groupId>
			<artifactId>kafka-streams-avro-serde</artifactId>
			<version>6.0.0</version>
		</dependency>

		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-stream</artifactId>
			<scope>test</scope>
			<classifier>test-binder</classifier>
			<type>test-jar</type>
		</dependency>
	</dependencies>

	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-dependencies</artifactId>
				<version>${spring-cloud.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<configuration>
					<excludes>
						<exclude>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok</artifactId>
						</exclude>
					</excludes>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.avro</groupId>
				<artifactId>avro-maven-plugin</artifactId>
				<version>1.8.2</version>
				<executions>
					<execution>
						<phase>generate-sources</phase>
						<goals>
							<goal>schema</goal>
						</goals>
						<configuration>
							<sourceDirectory>src/main/avro</sourceDirectory>
							<outputDirectory>${project.build.directory}/generated-sources</outputDirectory>
							<stringType>String</stringType>
						</configuration>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>

	<repositories>
		<repository>
			<id>spring-milestones</id>
			<name>Spring Milestones</name>
			<url>https://repo.spring.io/milestone</url>
		</repository>
		<repository>
			<id>confluent</id>
			<url>https://packages.confluent.io/maven/</url>
		</repository>
	</repositories>

</project>


application.yml
spring:
  cloud:
    stream:
      bindings:
        employee-input-channel:
          destination: employees-topic
      kafka:
        streams:
          binder:
            brokers:  localhost:9092
            configuration:
              schema.registry.url: http://localhost:8081
              commit.interval.ms: 10000
              state.dir: state-store
              default:
                key:
                  serde: org.apache.kafka.common.serialization.Serdes$StringSerde
                value:
                  serde: io.confluent.kafka.streams.serdes.avro.SpecificAvroSerde



Inside src/main/avro
DepartmentAggregate.avsc
{
  "namespace": "com.pack.model",
  "type": "record",
  "name": "DepartmentAggregate",
  "fields": [
    {"name": "total_salary","type": ["null","int"]},
    {"name": "employee_count","type": ["null","int"]},
    {"name": "avg_salary","type": ["null","double"]}
  ]
}

Employee.avsc
{
  "namespace": "com.pack.model",
  "type": "record",
  "name": "Employee",
  "fields": [
    {"name": "id","type": ["null","string"]},
    {"name": "name","type": ["null","string"]},
    {"name": "department","type": ["null","string"]},
    {"name": "salary","type": ["null","int"]}
  ]
}


EmployeeListenerBinding.java
package com.pack.KafkaAggregate.bindings;


import org.apache.kafka.streams.kstream.KStream;
import org.springframework.cloud.stream.annotation.Input;

import com.pack.model.Employee;

public interface EmployeeListenerBinding {

    @Input("employee-input-channel")
    KStream<String, Employee> employeeInputStream();

}

EmployeeStreamListener.java
package com.pack.KafkaAggregate.services;


import org.apache.kafka.streams.kstream.KStream;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cloud.stream.annotation.EnableBinding;
import org.springframework.cloud.stream.annotation.StreamListener;
import org.springframework.stereotype.Service;

import com.pack.KafkaAggregate.bindings.EmployeeListenerBinding;
import com.pack.model.Employee;

import lombok.extern.log4j.Log4j2;

@Log4j2
@Service
@EnableBinding(EmployeeListenerBinding.class)
public class EmployeeStreamListener {

    @Autowired
    RecordBuilder recordBuilder;

    @StreamListener("employee-input-channel")
    public void process(KStream<String, Employee> input) {

        input.peek((k, v) -> log.info("Key: {}, Value:{}", k, v))
                .groupBy((k, v) -> v.getDepartment())
                .aggregate(
                        () -> recordBuilder.init(),
                        (k, v, aggV) -> recordBuilder.aggregate(v, aggV)
                ).toStream()
                .foreach((k, v) -> log.info("Key = " + k + " Value = " + v.toString()));
    }
}


RecordBuilder.java
package com.pack.KafkaAggregate.services;


import org.springframework.stereotype.Service;

import com.pack.model.DepartmentAggregate;
import com.pack.model.Employee;

import lombok.extern.log4j.Log4j2;

@Log4j2
@Service
public class RecordBuilder {
    public DepartmentAggregate init(){
        DepartmentAggregate departmentAggregate = new DepartmentAggregate();
        departmentAggregate.setEmployeeCount(0);
        departmentAggregate.setTotalSalary(0);
        departmentAggregate.setAvgSalary(0D);
        return departmentAggregate;
    }

    public DepartmentAggregate aggregate(Employee emp, DepartmentAggregate aggValue){
        DepartmentAggregate departmentAggregate = new DepartmentAggregate();
        departmentAggregate.setEmployeeCount(aggValue.getEmployeeCount() + 1);
        departmentAggregate.setTotalSalary(aggValue.getTotalSalary() + emp.getSalary());
        departmentAggregate.setAvgSalary((aggValue.getTotalSalary() + emp.getSalary()) / (aggValue.getEmployeeCount() + 1D));
        return departmentAggregate;
    }
}


7. KafkaAvroInvoice

pom.xml
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.7.3</version>
		<relativePath /> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.pack</groupId>
	<artifactId>KafkaAvroInvoice</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>KafkaAvroInvoice</name>
	<description>Demo project for Spring Boot</description>
	<properties>
		<java.version>11</java.version>
	</properties>
	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.kafka</groupId>
			<artifactId>spring-kafka</artifactId>
		</dependency>

		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.kafka</groupId>
			<artifactId>spring-kafka-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.avro</groupId>
			<artifactId>avro</artifactId>
			<version>1.9.2</version>
		</dependency>
		<dependency>
			<groupId>io.confluent</groupId>
			<artifactId>kafka-avro-serializer</artifactId>
			<version>5.4.3</version>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.apache.avro</groupId>
				<artifactId>avro-maven-plugin</artifactId>
				<version>1.8.2</version>
				<executions>
					<execution>
						<phase>generate-sources</phase>
						<goals>
							<goal>schema</goal>
						</goals>
						<configuration>
							<sourceDirectory>src/main/avro</sourceDirectory>
							<outputDirectory>${project.build.directory}/generated-sources
							</outputDirectory>
							<imports>
								<import>${project.basedir}/src/main/avro/LineItem.avsc</import>
								<import>${project.basedir}/src/main/avro/DeliveryAddress.avsc
								</import>
							</imports>
							<stringType>String</stringType>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<configuration>
					<excludes>
						<exclude>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok</artifactId>
						</exclude>
					</excludes>
				</configuration>
			</plugin>
		</plugins>
	</build>
	<repositories>
		<repository>
			<id>confluent</id>
			<url>https://packages.confluent.io/maven</url>
		</repository>
	</repositories>

</project>


application.yml
spring:
   kafka:
      producer:
         client-id: avro-pos-simulator1
         bootstrap-servers: localhost:9092
         key-serializer: org.apache.kafka.common.serialization.StringSerializer
         value-serializer: io.confluent.kafka.serializers.KafkaAvroSerializer
         properties:
            schema.registry.url: http://localhost:8081/

application:
   configs:
      invoice.count: 60
      topic.name: avro-pos-topic

Inside src/main/resources/data folder
address.json
[
    {
        "AddressLine": "HN. 535, 4472 Eu St.",
        "City": "Katihar",
        "State": "Bihar",
        "PinCode": "867820",
        "ContactNumber": ""
    },
    {
        "AddressLine": "7418 Dolor St.",
        "City": "Nagpur",
        "State": "Maharastra",
        "PinCode": "710782",
        "ContactNumber": ""
    },
    {
        "AddressLine": "HN. 821, 8267 Dapibus Av.",
        "City": "Kolkata",
        "State": "West Bengal",
        "PinCode": "701624",
        "ContactNumber": ""
    },
    {
        "AddressLine": "773 Eu Ave",
        "City": "Sitapur",
        "State": "Uttar Pradesh",
        "PinCode": "431667",
        "ContactNumber": "9934440762"
    },
    {
        "AddressLine": "7409 Laoreet Rd.",
        "City": "Jammu",
        "State": "Jammu and Kashmir",
        "PinCode": "697806",
        "ContactNumber": "8335722151"
    },
    {
        "AddressLine": "7114 Eu, Rd.",
        "City": "Ratlam",
        "State": "Madhya Pradesh",
        "PinCode": "925281",
        "ContactNumber": "4057182350"
    },
    {
        "AddressLine": "Flat No. #658-8929 Arcu Rd.",
        "City": "Guna",
        "State": "Madhya Pradesh",
        "PinCode": "555836",
        "ContactNumber": "5015943575"
    },
    {
        "AddressLine": "291-4367 Aliquam St.",
        "City": "Pali",
        "State": "Rajasthan",
        "PinCode": "906511",
        "ContactNumber": "7544884134"
    },
    {
        "AddressLine": "Flat No. #396-1703 Ullamcorper, Street",
        "City": "Hassan",
        "State": "Karnataka",
        "PinCode": "701126",
        "ContactNumber": "1157976639"
    },
    {
        "AddressLine": "House No 847, 2219 Donec St.",
        "City": "Adoni",
        "State": "Andhra Pradesh",
        "PinCode": "187597",
        "ContactNumber": "4515437963"
    },
    {
        "AddressLine": "Flat No. #325-2029 Ac, Ave",
        "City": "Agra",
        "State": "Uttar Pradesh",
        "PinCode": "556412",
        "ContactNumber": "2844494619"
    },
    {
        "AddressLine": "249-7358 Nec St.",
        "City": "Jaipur",
        "State": "Rajasthan",
        "PinCode": "326647",
        "ContactNumber": "4455040114"
    },
    {
        "AddressLine": "6549 Ac, Ave",
        "City": "Ramagundam",
        "State": "Andhra Pradesh",
        "PinCode": "699979",
        "ContactNumber": "2758430969"
    },
    {
        "AddressLine": "House No 727, 9696 Ullamcorper, Road",
        "City": "Dabgram",
        "State": "West Bengal",
        "PinCode": "953658",
        "ContactNumber": "4166559042"
    },
    {
        "AddressLine": "House No 703, 9601 Aliquam Av.",
        "City": "Arrah",
        "State": "Bihar",
        "PinCode": "732227",
        "ContactNumber": "6382741027"
    },
    {
        "AddressLine": "Flat No. #229-5133 Quam. Road",
        "City": "Haridwar",
        "State": "Uttarakhand",
        "PinCode": "478334",
        "ContactNumber": "8593433887"
    },
    {
        "AddressLine": "611-1753 Etiam Avenue",
        "City": "Nagaon",
        "State": "Assam",
        "PinCode": "935500",
        "ContactNumber": "3398236143"
    },
    {
        "AddressLine": "3122 Morbi Ave",
        "City": "Palakkad",
        "State": "Kerala",
        "PinCode": "800459",
        "ContactNumber": "8235927974"
    },
    {
        "AddressLine": "5930 Aliquam Street",
        "City": "Chhindwara",
        "State": "Madhya Pradesh",
        "PinCode": "724661",
        "ContactNumber": "2141075027"
    },
    {
        "AddressLine": "House No 416, 8652 Sodales Rd.",
        "City": "Mathura",
        "State": "Uttar Pradesh",
        "PinCode": "148055",
        "ContactNumber": "8645000577"
    },
    {
        "AddressLine": "8612 Non Rd.",
        "City": "Guna",
        "State": "Madhya Pradesh",
        "PinCode": "210683",
        "ContactNumber": "8336980338"
    },
    {
        "AddressLine": "295-7690 At Street",
        "City": "Shahjahanpur",
        "State": "Uttar Pradesh",
        "PinCode": "228410",
        "ContactNumber": "4624129756"
    },
    {
        "AddressLine": "House No 638, 4720 Nisi Road",
        "City": "Madurai",
        "State": "Tamil Nadu",
        "PinCode": "754286",
        "ContactNumber": "5741337087"
    },
    {
        "AddressLine": "706-3622 Pharetra Av.",
        "City": "Serampore",
        "State": "West Bengal",
        "PinCode": "266237",
        "ContactNumber": "8034395531"
    },
    {
        "AddressLine": "6363 Non Rd.",
        "City": "Darbhanga",
        "State": "Bihar",
        "PinCode": "570288",
        "ContactNumber": "5656699770"
    },
    {
        "AddressLine": "853-9772 Enim, Avenue",
        "City": "Allappuzha",
        "State": "Kerala",
        "PinCode": "140312",
        "ContactNumber": "5528409181"
    },
    {
        "AddressLine": "Flat No. #773-5039 Lacinia Road",
        "City": "Gudivada",
        "State": "Andhra Pradesh",
        "PinCode": "553874",
        "ContactNumber": "6772227684"
    },
    {
        "AddressLine": "Flat No. #753-706 Molestie Av.",
        "City": "North Barrackpur",
        "State": "West Bengal",
        "PinCode": "925233",
        "ContactNumber": "8615470547"
    },
    {
        "AddressLine": "Flat No. #794-4263 Tempor St.",
        "City": "Shivapuri",
        "State": "Madhya Pradesh",
        "PinCode": "563047",
        "ContactNumber": "6403786002"
    },
    {
        "AddressLine": "House No 786, 3820 Luctus Av.",
        "City": "Ambala Sadar",
        "State": "Haryana",
        "PinCode": "536057",
        "ContactNumber": "7336393163"
    },
    {
        "AddressLine": "1852 Est St.",
        "City": "Imphal",
        "State": "Manipur",
        "PinCode": "120023",
        "ContactNumber": "6124913142"
    },
    {
        "AddressLine": "7697 Sed, Road",
        "City": "Tiruvottiyur",
        "State": "Tamil Nadu",
        "PinCode": "819925",
        "ContactNumber": "6282658715"
    },
    {
        "AddressLine": "House No 735, 8148 Eu St.",
        "City": "Bahraich",
        "State": "Uttar Pradesh",
        "PinCode": "977360",
        "ContactNumber": "5692615243"
    },
    {
        "AddressLine": "9728 Ac Ave",
        "City": "Gonda",
        "State": "Uttar Pradesh",
        "PinCode": "468305",
        "ContactNumber": "8482561251"
    },
    {
        "AddressLine": "Flat No. #570-3269 Adipiscing, Rd.",
        "City": "Chapra",
        "State": "Bihar",
        "PinCode": "257573",
        "ContactNumber": "1799428172"
    },
    {
        "AddressLine": "Flat No. #420-9203 Pretium Street",
        "City": "Dehri",
        "State": "Bihar",
        "PinCode": "392400",
        "ContactNumber": "3841876454"
    },
    {
        "AddressLine": "Flat No. #335-7984 Senectus Rd.",
        "City": "Pali",
        "State": "Rajasthan",
        "PinCode": "900530",
        "ContactNumber": "6125618251"
    },
    {
        "AddressLine": "393-5141 Enim. Ave",
        "City": "Surendranagar",
        "State": "Gujarat",
        "PinCode": "209008",
        "ContactNumber": "8862122529"
    },
    {
        "AddressLine": "2465 Laoreet, Street",
        "City": "Dehri",
        "State": "Bihar",
        "PinCode": "637308",
        "ContactNumber": "2662305605"
    },
    {
        "AddressLine": "467-7967 Volutpat Ave",
        "City": "Jodhpur",
        "State": "Rajasthan",
        "PinCode": "983371",
        "ContactNumber": "6577421741"
    },
    {
        "AddressLine": "644-1102 Quam, Road",
        "City": "Muzaffarnagar",
        "State": "Uttar Pradesh",
        "PinCode": "513402",
        "ContactNumber": "7979432420"
    },
    {
        "AddressLine": "House No 712, 4763 Turpis Street",
        "City": "Pune",
        "State": "Maharastra",
        "PinCode": "551272",
        "ContactNumber": "3419930245"
    },
    {
        "AddressLine": "582-5177 Suscipit Rd.",
        "City": "Patna",
        "State": "Bihar",
        "PinCode": "530094",
        "ContactNumber": "1158759250"
    },
    {
        "AddressLine": "House No 424, 5509 Ut Street",
        "City": "Ganganagar",
        "State": "Rajasthan",
        "PinCode": "692405",
        "ContactNumber": "8395635840"
    },
    {
        "AddressLine": "House No 953, 785 Viverra. Street",
        "City": "Hathras",
        "State": "Uttar Pradesh",
        "PinCode": "973613",
        "ContactNumber": "3242686167"
    },
    {
        "AddressLine": "265-1062 Sapien. Road",
        "City": "Murwara",
        "State": "Madhya Pradesh",
        "PinCode": "894885",
        "ContactNumber": "2503052325"
    },
    {
        "AddressLine": "Flat No. #338-5510 Justo. Av.",
        "City": "Puri",
        "State": "Odisha",
        "PinCode": "127980",
        "ContactNumber": "9686763415"
    },
    {
        "AddressLine": "House No 992, 8003 In Rd.",
        "City": "Dehradun",
        "State": "Uttarakhand",
        "PinCode": "425528",
        "ContactNumber": "9875104847"
    },
    {
        "AddressLine": "1407 Auctor, St.",
        "City": "Ichalkaranji",
        "State": "Maharastra",
        "PinCode": "115863",
        "ContactNumber": "2598303301"
    },
    {
        "AddressLine": "715-449 Arcu. Rd.",
        "City": "Delhi",
        "State": "Delhi",
        "PinCode": "338019",
        "ContactNumber": "5994731583"
    },
    {
        "AddressLine": "House No 556, 2384 Libero. Rd.",
        "City": "Banda",
        "State": "Uttar Pradesh",
        "PinCode": "767511",
        "ContactNumber": "9801318492"
    },
    {
        "AddressLine": "Flat No. #740-6953 Scelerisque Rd.",
        "City": "Mango",
        "State": "Jharkhand",
        "PinCode": "697196",
        "ContactNumber": "7172289826"
    },
    {
        "AddressLine": "Flat No. #210-902 Neque Street",
        "City": "South Dum Dum",
        "State": "West Bengal",
        "PinCode": "504795",
        "ContactNumber": "7508353683"
    },
    {
        "AddressLine": "Flat No. #741-3157 Metus Av.",
        "City": "Delhi",
        "State": "Delhi",
        "PinCode": "495095",
        "ContactNumber": "7097939373"
    },
    {
        "AddressLine": "7711 Ac Avenue",
        "City": "Raigarh",
        "State": "Chhattisgarh",
        "PinCode": "282126",
        "ContactNumber": "1952031107"
    },
    {
        "AddressLine": "846-8342 Sollicitudin Road",
        "City": "Allappuzha",
        "State": "Kerala",
        "PinCode": "510771",
        "ContactNumber": "6773875946"
    },
    {
        "AddressLine": "Flat No. #863-3118 Odio Rd.",
        "City": "Mathura",
        "State": "Uttar Pradesh",
        "PinCode": "587393",
        "ContactNumber": "8562646144"
    },
    {
        "AddressLine": "800-9178 Aliquam Street",
        "City": "Karnal",
        "State": "Haryana",
        "PinCode": "132797",
        "ContactNumber": "6883499359"
    },
    {
        "AddressLine": "Flat No. #131-5960 Varius St.",
        "City": "Ongole",
        "State": "Andhra Pradesh",
        "PinCode": "881860",
        "ContactNumber": "6735030289"
    },
    {
        "AddressLine": "3508 Ligula. Rd.",
        "City": "Ahmadnagar",
        "State": "Maharastra",
        "PinCode": "703396",
        "ContactNumber": "9638404068"
    },
    {
        "AddressLine": "Flat No. #316-5621 Laoreet St.",
        "City": "Nellore",
        "State": "Andhra Pradesh",
        "PinCode": "333433",
        "ContactNumber": "5232382321"
    },
    {
        "AddressLine": "House No 383, 4427 Pellentesque Rd.",
        "City": "Bokaro Steel City",
        "State": "Jharkhand",
        "PinCode": "509723",
        "ContactNumber": "1442202063"
    },
    {
        "AddressLine": "6226 Mauris St.",
        "City": "Ingraj Bazar",
        "State": "West Bengal",
        "PinCode": "592487",
        "ContactNumber": "8382307048"
    },
    {
        "AddressLine": "855-4409 Duis Street",
        "City": "Junagadh",
        "State": "Gujarat",
        "PinCode": "622745",
        "ContactNumber": "6984835508"
    },
    {
        "AddressLine": "735-1235 Pretium Street",
        "City": "Unnao",
        "State": "Uttar Pradesh",
        "PinCode": "103540",
        "ContactNumber": "4331966638"
    },
    {
        "AddressLine": "7319 Nunc Ave",
        "City": "Muzaffarpur",
        "State": "Bihar",
        "PinCode": "760765",
        "ContactNumber": "7586450222"
    },
    {
        "AddressLine": "House No 989, 5810 Nulla Av.",
        "City": "Ashoknagar-Kalyangarh",
        "State": "West Bengal",
        "PinCode": "561119",
        "ContactNumber": "9838697111"
    },
    {
        "AddressLine": "233-9672 Pharetra. Rd.",
        "City": "Kanpur Cantonment",
        "State": "Uttar Pradesh",
        "PinCode": "832089",
        "ContactNumber": "8675203394"
    },
    {
        "AddressLine": "529-4520 Libero. Ave",
        "City": "Raigarh",
        "State": "Chhattisgarh",
        "PinCode": "183678",
        "ContactNumber": "3057906681"
    },
    {
        "AddressLine": "House No 936, 3362 Vehicula Ave",
        "City": "Serampore",
        "State": "West Bengal",
        "PinCode": "367103",
        "ContactNumber": "2614588263"
    },
    {
        "AddressLine": "House No 695, 9930 A, St.",
        "City": "Hassan",
        "State": "Karnataka",
        "PinCode": "277874",
        "ContactNumber": "4013626333"
    },
    {
        "AddressLine": "Flat No. #735-431 Gravida. St.",
        "City": "Chapra",
        "State": "Bihar",
        "PinCode": "386153",
        "ContactNumber": "2004897617"
    },
    {
        "AddressLine": "488-2166 Class St.",
        "City": "Bellary",
        "State": "Karnataka",
        "PinCode": "831105",
        "ContactNumber": "4355640111"
    },
    {
        "AddressLine": "Flat No. #736-9947 Et Av.",
        "City": "Sambalpur",
        "State": "Odisha",
        "PinCode": "979906",
        "ContactNumber": "9196326946"
    },
    {
        "AddressLine": "444-1842 Dui. Rd.",
        "City": "Shivapuri",
        "State": "Madhya Pradesh",
        "PinCode": "561012",
        "ContactNumber": "7243866404"
    },
    {
        "AddressLine": "2923 Sollicitudin Road",
        "City": "Secunderabad",
        "State": "Andhra Pradesh",
        "PinCode": "382673",
        "ContactNumber": "3685997991"
    },
    {
        "AddressLine": "517-8912 Nulla St.",
        "City": "Champdani",
        "State": "West Bengal",
        "PinCode": "680616",
        "ContactNumber": "8183195143"
    },
    {
        "AddressLine": "5418 Magna. Rd.",
        "City": "Chennai",
        "State": "Tamil Nadu",
        "PinCode": "386032",
        "ContactNumber": "6557358508"
    },
    {
        "AddressLine": "548-8023 Vulputate, Rd.",
        "City": "Gonda",
        "State": "Uttar Pradesh",
        "PinCode": "945821",
        "ContactNumber": "2509549312"
    },
    {
        "AddressLine": "House No 235, 5674 Vitae Street",
        "City": "Chapra",
        "State": "Bihar",
        "PinCode": "201938",
        "ContactNumber": "4051146489"
    },
    {
        "AddressLine": "House No 740, 6689 Tempor Av.",
        "City": "Bharatpur",
        "State": "Rajasthan",
        "PinCode": "932264",
        "ContactNumber": "8563079826"
    },
    {
        "AddressLine": "House No 534, 9974 Rutrum Av.",
        "City": "Bellary",
        "State": "Karnataka",
        "PinCode": "761574",
        "ContactNumber": "7652091989"
    },
    {
        "AddressLine": "Flat No. #378-6117 Nulla Rd.",
        "City": "Mandasor",
        "State": "Madhya Pradesh",
        "PinCode": "975340",
        "ContactNumber": "9006343802"
    },
    {
        "AddressLine": "7947 Mauris, Av.",
        "City": "Tambaram",
        "State": "Tamil Nadu",
        "PinCode": "339533",
        "ContactNumber": "5898142373"
    },
    {
        "AddressLine": "Flat No. #296-6151 Neque Road",
        "City": "Varanasi",
        "State": "Uttar Pradesh",
        "PinCode": "340397",
        "ContactNumber": "9083194560"
    },
    {
        "AddressLine": "Flat No. #879-8630 Sed Road",
        "City": "Vijayawada",
        "State": "Andhra Pradesh",
        "PinCode": "824631",
        "ContactNumber": "2805327045"
    },
    {
        "AddressLine": "Flat No. #398-2797 A Rd.",
        "City": "Sikar",
        "State": "Rajasthan",
        "PinCode": "660265",
        "ContactNumber": "1131794401"
    },
    {
        "AddressLine": "House No 471, 2701 Purus, Rd.",
        "City": "Faridabad",
        "State": "Haryana",
        "PinCode": "121303",
        "ContactNumber": "4452007276"
    },
    {
        "AddressLine": "House No 639, 1344 Nisl St.",
        "City": "Farrukhabad-cum-Fatehgarh",
        "State": "Uttar Pradesh",
        "PinCode": "481405",
        "ContactNumber": "5281218896"
    },
    {
        "AddressLine": "House No 400, 2541 Lacus Street",
        "City": "Alandur",
        "State": "Tamil Nadu",
        "PinCode": "919471",
        "ContactNumber": "3677519188"
    },
    {
        "AddressLine": "627-5294 Nisi St.",
        "City": "Hyderabad",
        "State": "Andhra Pradesh",
        "PinCode": "827202",
        "ContactNumber": "7553553297"
    },
    {
        "AddressLine": "691-6564 Lacinia Rd.",
        "City": "Arrah",
        "State": "Bihar",
        "PinCode": "380536",
        "ContactNumber": "1115912385"
    },
    {
        "AddressLine": "House No 240, 7563 Vel Rd.",
        "City": "Rishra",
        "State": "West Bengal",
        "PinCode": "201130",
        "ContactNumber": "2828547194"
    },
    {
        "AddressLine": "Flat No. #245-5336 Nibh. Av.",
        "City": "Jammu",
        "State": "Jammu and Kashmir",
        "PinCode": "114809",
        "ContactNumber": "9836944618"
    },
    {
        "AddressLine": "3474 Nam Rd.",
        "City": "Mangalore",
        "State": "Karnataka",
        "PinCode": "164228",
        "ContactNumber": "6528245422"
    },
    {
        "AddressLine": "Flat No. #527-9373 At Rd.",
        "City": "South Dum Dum",
        "State": "West Bengal",
        "PinCode": "138781",
        "ContactNumber": "2356382980"
    },
    {
        "AddressLine": "Flat No. #630-2414 Enim. St.",
        "City": "Satna",
        "State": "Madhya Pradesh",
        "PinCode": "991102",
        "ContactNumber": "8931080189"
    },
    {
        "AddressLine": "567-3331 In St.",
        "City": "Cuddalore",
        "State": "Tamil Nadu",
        "PinCode": "813558",
        "ContactNumber": "3549212065"
    },
    {
        "AddressLine": "9606 Integer Ave",
        "City": "Multan",
        "State": "Punjab",
        "PinCode": "491357",
        "ContactNumber": "7979421441"
    },
    {
        "AddressLine": "Flat No. #174-7165 Magna, Street",
        "City": "Eluru",
        "State": "Andhra Pradesh",
        "PinCode": "356811",
        "ContactNumber": "4117163673"
    }
]

Invoice.json
[
	{
		"InvoiceNumber": 0,
		"CreatedTime": 0,
		"StoreID": "STR1534",
		"PosID": "POS364",
		"CashierID": "OAS898",
		"CustomerType": "NONPRIME",
		"CustomerCardNo": "3006055636",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CASH",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "HOME-DELIVERY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": 0,
		"StoreID": "STR1534",
		"PosID": "POS135",
		"CashierID": "OAS285",
		"CustomerType": "PRIME",
		"CustomerCardNo": "5582740626",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CARD",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "TAKEAWAY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": 0,
		"StoreID": "STR1534",
		"PosID": "POS934",
		"CashierID": "OAS544",
		"CustomerType": "PRIME",
		"CustomerCardNo": "5525406429",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CASH",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "TAKEAWAY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": 0,
		"StoreID": "STR1534",
		"PosID": "POS944",
		"CashierID": "OAS994",
		"CustomerType": "NONPRIME",
		"CustomerCardNo": "2968880358",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CASH",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "HOME-DELIVERY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": 0,
		"StoreID": "STR1534",
		"PosID": "POS151",
		"CashierID": "OAS177",
		"CustomerType": "NONPRIME",
		"CustomerCardNo": "7061658033",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CASH",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "HOME-DELIVERY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": 0,
		"StoreID": "STR1955",
		"PosID": "POS992",
		"CashierID": "OAS521",
		"CustomerType": "NONPRIME",
		"CustomerCardNo": "1482417862",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CASH",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "TAKEAWAY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": 0,
		"StoreID": "STR1955",
		"PosID": "POS324",
		"CashierID": "OAS183",
		"CustomerType": "NONPRIME",
		"CustomerCardNo": "3916555911",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CASH",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "HOME-DELIVERY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": 0,
		"StoreID": "STR1955",
		"PosID": "POS769",
		"CashierID": "OAS996",
		"CustomerType": "PRIME",
		"CustomerCardNo": "8154556937",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CARD",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "HOME-DELIVERY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": 0,
		"StoreID": "STR1955",
		"PosID": "POS837",
		"CashierID": "OAS861",
		"CustomerType": "NONPRIME",
		"CustomerCardNo": "7136581152",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CASH",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "HOME-DELIVERY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": 0,
		"StoreID": "STR1955",
		"PosID": "POS493",
		"CashierID": "OAS769",
		"CustomerType": "PRIME",
		"CustomerCardNo": "4405006483",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CARD",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "TAKEAWAY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": 0,
		"StoreID": "STR2629",
		"PosID": "POS768",
		"CashierID": "OAS282",
		"CustomerType": "NONPRIME",
		"CustomerCardNo": "1360645962",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CARD",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "HOME-DELIVERY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": 0,
		"StoreID": "STR2629",
		"PosID": "POS285",
		"CashierID": "OAS882",
		"CustomerType": "NONPRIME",
		"CustomerCardNo": "6419885098",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CASH",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "TAKEAWAY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": 0,
		"StoreID": "STR2629",
		"PosID": "POS172",
		"CashierID": "OAS622",
		"CustomerType": "NONPRIME",
		"CustomerCardNo": "7829975914",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CASH",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "HOME-DELIVERY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": 0,
		"StoreID": "STR2629",
		"PosID": "POS647",
		"CashierID": "OAS515",
		"CustomerType": "PRIME",
		"CustomerCardNo": "1053863739",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CASH",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "TAKEAWAY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": 0,
		"StoreID": "STR2629",
		"PosID": "POS253",
		"CashierID": "OAS737",
		"CustomerType": "NONPRIME",
		"CustomerCardNo": "2461788838",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CARD",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "HOME-DELIVERY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": 0,
		"StoreID": "STR2699",
		"PosID": "POS832",
		"CashierID": "OAS496",
		"CustomerType": "NONPRIME",
		"CustomerCardNo": "4552039054",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CASH",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "HOME-DELIVERY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": 0,
		"StoreID": "STR2699",
		"PosID": "POS792",
		"CashierID": "OAS152",
		"CustomerType": "PRIME",
		"CustomerCardNo": "7475384243",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CASH",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "HOME-DELIVERY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": 0,
		"StoreID": "STR2699",
		"PosID": "POS773",
		"CashierID": "OAS568",
		"CustomerType": "NONPRIME",
		"CustomerCardNo": "9327106277",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CASH",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "TAKEAWAY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": 0,
		"StoreID": "STR2699",
		"PosID": "POS779",
		"CashierID": "OAS161",
		"CustomerType": "PRIME",
		"CustomerCardNo": "6797767929",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CASH",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "HOME-DELIVERY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": 0,
		"StoreID": "STR2699",
		"PosID": "POS566",
		"CashierID": "OAS318",
		"CustomerType": "PRIME",
		"CustomerCardNo": "7543202868",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CARD",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "HOME-DELIVERY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": 0,
		"StoreID": "STR2952",
		"PosID": "POS152",
		"CashierID": "OAS329",
		"CustomerType": "PRIME",
		"CustomerCardNo": "3027514652",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CASH",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "TAKEAWAY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": 0,
		"StoreID": "STR2952",
		"PosID": "POS351",
		"CashierID": "OAS841",
		"CustomerType": "NONPRIME",
		"CustomerCardNo": "2024774071",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CASH",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "HOME-DELIVERY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": 0,
		"StoreID": "STR2952",
		"PosID": "POS477",
		"CashierID": "OAS259",
		"CustomerType": "NONPRIME",
		"CustomerCardNo": "3425633108",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CASH",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "TAKEAWAY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": 0,
		"StoreID": "STR2952",
		"PosID": "POS471",
		"CashierID": "OAS936",
		"CustomerType": "NONPRIME",
		"CustomerCardNo": "9741556539",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CASH",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "TAKEAWAY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": 0,
		"StoreID": "STR2952",
		"PosID": "POS663",
		"CashierID": "OAS444",
		"CustomerType": "NONPRIME",
		"CustomerCardNo": "7928716562",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CASH",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "HOME-DELIVERY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": 0,
		"StoreID": "STR3781",
		"PosID": "POS843",
		"CashierID": "OAS685",
		"CustomerType": "NONPRIME",
		"CustomerCardNo": "1191112820",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CARD",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "HOME-DELIVERY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": 0,
		"StoreID": "STR3781",
		"PosID": "POS444",
		"CashierID": "OAS935",
		"CustomerType": "NONPRIME",
		"CustomerCardNo": "9223558893",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CASH",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "TAKEAWAY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": 0,
		"StoreID": "STR3781",
		"PosID": "POS129",
		"CashierID": "OAS311",
		"CustomerType": "PRIME",
		"CustomerCardNo": "4692642935",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CASH",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "HOME-DELIVERY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": 0,
		"StoreID": "STR3781",
		"PosID": "POS494",
		"CashierID": "OAS377",
		"CustomerType": "PRIME",
		"CustomerCardNo": "7892154732",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CARD",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "HOME-DELIVERY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": 0,
		"StoreID": "STR3781",
		"PosID": "POS978",
		"CashierID": "OAS981",
		"CustomerType": "NONPRIME",
		"CustomerCardNo": "6244229107",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CARD",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "TAKEAWAY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": 0,
		"StoreID": "STR4899",
		"PosID": "POS584",
		"CashierID": "OAS452",
		"CustomerType": "NONPRIME",
		"CustomerCardNo": "2502121621",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CASH",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "HOME-DELIVERY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": 0,
		"StoreID": "STR4899",
		"PosID": "POS447",
		"CashierID": "OAS729",
		"CustomerType": "NONPRIME",
		"CustomerCardNo": "5576072500",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CARD",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "TAKEAWAY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": 0,
		"StoreID": "STR4899",
		"PosID": "POS441",
		"CashierID": "OAS487",
		"CustomerType": "NONPRIME",
		"CustomerCardNo": "4227803954",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CASH",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "TAKEAWAY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": 0,
		"StoreID": "STR4899",
		"PosID": "POS799",
		"CashierID": "OAS145",
		"CustomerType": "PRIME",
		"CustomerCardNo": "2325763742",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CASH",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "HOME-DELIVERY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": 0,
		"StoreID": "STR4899",
		"PosID": "POS954",
		"CashierID": "OAS151",
		"CustomerType": "NONPRIME",
		"CustomerCardNo": "3716602332",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CASH",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "HOME-DELIVERY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": 0,
		"StoreID": "STR5494",
		"PosID": "POS384",
		"CashierID": "OAS398",
		"CustomerType": "NONPRIME",
		"CustomerCardNo": "6048272250",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CARD",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "HOME-DELIVERY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": 0,
		"StoreID": "STR5494",
		"PosID": "POS121",
		"CashierID": "OAS237",
		"CustomerType": "PRIME",
		"CustomerCardNo": "9509332022",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CARD",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "TAKEAWAY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": 0,
		"StoreID": "STR5494",
		"PosID": "POS353",
		"CashierID": "OAS969",
		"CustomerType": "NONPRIME",
		"CustomerCardNo": "8189067868",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CASH",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "TAKEAWAY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": 0,
		"StoreID": "STR5494",
		"PosID": "POS759",
		"CashierID": "OAS796",
		"CustomerType": "NONPRIME",
		"CustomerCardNo": "4937932830",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CARD",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "HOME-DELIVERY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": 0,
		"StoreID": "STR5494",
		"PosID": "POS722",
		"CashierID": "OAS576",
		"CustomerType": "PRIME",
		"CustomerCardNo": "9724245321",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CASH",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "HOME-DELIVERY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": 0,
		"StoreID": "STR5646",
		"PosID": "POS968",
		"CashierID": "OAS689",
		"CustomerType": "PRIME",
		"CustomerCardNo": "2220404140",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CASH",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "HOME-DELIVERY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": 0,
		"StoreID": "STR5646",
		"PosID": "POS639",
		"CashierID": "OAS167",
		"CustomerType": "PRIME",
		"CustomerCardNo": "9711257112",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CARD",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "HOME-DELIVERY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": 0,
		"StoreID": "STR5646",
		"PosID": "POS624",
		"CashierID": "OAS196",
		"CustomerType": "PRIME",
		"CustomerCardNo": "8109010950",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CASH",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "TAKEAWAY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": 0,
		"StoreID": "STR5646",
		"PosID": "POS212",
		"CashierID": "OAS284",
		"CustomerType": "NONPRIME",
		"CustomerCardNo": "4226427254",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CARD",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "HOME-DELIVERY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": 0,
		"StoreID": "STR5646",
		"PosID": "POS543",
		"CashierID": "OAS921",
		"CustomerType": "NONPRIME",
		"CustomerCardNo": "5947487902",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CARD",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "HOME-DELIVERY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": 0,
		"StoreID": "STR5864",
		"PosID": "POS132",
		"CashierID": "OAS386",
		"CustomerType": "NONPRIME",
		"CustomerCardNo": "6909538460",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CASH",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "HOME-DELIVERY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": 0,
		"StoreID": "STR5864",
		"PosID": "POS945",
		"CashierID": "OAS649",
		"CustomerType": "PRIME",
		"CustomerCardNo": "5305473526",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CARD",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "HOME-DELIVERY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": 0,
		"StoreID": "STR5864",
		"PosID": "POS465",
		"CashierID": "OAS582",
		"CustomerType": "NONPRIME",
		"CustomerCardNo": "1211843745",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CARD",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "TAKEAWAY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": 0,
		"StoreID": "STR5864",
		"PosID": "POS872",
		"CashierID": "OAS287",
		"CustomerType": "PRIME",
		"CustomerCardNo": "7589671731",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CASH",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "HOME-DELIVERY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": 0,
		"StoreID": "STR5864",
		"PosID": "POS878",
		"CashierID": "OAS219",
		"CustomerType": "NONPRIME",
		"CustomerCardNo": "9728415172",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CARD",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "TAKEAWAY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": 0,
		"StoreID": "STR6162",
		"PosID": "POS835",
		"CashierID": "OAS583",
		"CustomerType": "NONPRIME",
		"CustomerCardNo": "5611417583",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CARD",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "TAKEAWAY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": 0,
		"StoreID": "STR6162",
		"PosID": "POS279",
		"CashierID": "OAS964",
		"CustomerType": "PRIME",
		"CustomerCardNo": "2262471989",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CASH",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "HOME-DELIVERY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": 0,
		"StoreID": "STR6162",
		"PosID": "POS987",
		"CashierID": "OAS795",
		"CustomerType": "NONPRIME",
		"CustomerCardNo": "8071065242",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CASH",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "TAKEAWAY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": 0,
		"StoreID": "STR6162",
		"PosID": "POS868",
		"CashierID": "OAS172",
		"CustomerType": "NONPRIME",
		"CustomerCardNo": "9282685191",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CARD",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "HOME-DELIVERY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": 0,
		"StoreID": "STR6162",
		"PosID": "POS431",
		"CashierID": "OAS139",
		"CustomerType": "NONPRIME",
		"CustomerCardNo": "8651346374",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CARD",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "HOME-DELIVERY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": 0,
		"StoreID": "STR6347",
		"PosID": "POS622",
		"CashierID": "OAS793",
		"CustomerType": "PRIME",
		"CustomerCardNo": "5697125813",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CARD",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "HOME-DELIVERY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": 0,
		"StoreID": "STR6347",
		"PosID": "POS927",
		"CashierID": "OAS186",
		"CustomerType": "NONPRIME",
		"CustomerCardNo": "3996109634",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CARD",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "HOME-DELIVERY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": 0,
		"StoreID": "STR6347",
		"PosID": "POS994",
		"CashierID": "OAS274",
		"CustomerType": "PRIME",
		"CustomerCardNo": "6296964163",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CASH",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "TAKEAWAY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": 0,
		"StoreID": "STR6347",
		"PosID": "POS333",
		"CashierID": "OAS697",
		"CustomerType": "NONPRIME",
		"CustomerCardNo": "9740604930",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CARD",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "HOME-DELIVERY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": 0,
		"StoreID": "STR6347",
		"PosID": "POS856",
		"CashierID": "OAS128",
		"CustomerType": "NONPRIME",
		"CustomerCardNo": "5724653917",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CASH",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "TAKEAWAY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": 0,
		"StoreID": "STR6382",
		"PosID": "POS661",
		"CashierID": "OAS597",
		"CustomerType": "PRIME",
		"CustomerCardNo": "7115250228",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CASH",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "TAKEAWAY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": 0,
		"StoreID": "STR6382",
		"PosID": "POS145",
		"CashierID": "OAS872",
		"CustomerType": "PRIME",
		"CustomerCardNo": "6733153948",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CARD",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "HOME-DELIVERY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": 0,
		"StoreID": "STR6382",
		"PosID": "POS265",
		"CashierID": "OAS328",
		"CustomerType": "PRIME",
		"CustomerCardNo": "7908234230",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CASH",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "HOME-DELIVERY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": 0,
		"StoreID": "STR6382",
		"PosID": "POS968",
		"CashierID": "OAS687",
		"CustomerType": "PRIME",
		"CustomerCardNo": "4148565252",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CASH",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "HOME-DELIVERY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": 0,
		"StoreID": "STR6382",
		"PosID": "POS851",
		"CashierID": "OAS351",
		"CustomerType": "NONPRIME",
		"CustomerCardNo": "8110266676",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CARD",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "TAKEAWAY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": 0,
		"StoreID": "STR7188",
		"PosID": "POS682",
		"CashierID": "OAS394",
		"CustomerType": "NONPRIME",
		"CustomerCardNo": "1489226224",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CASH",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "TAKEAWAY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": 0,
		"StoreID": "STR7188",
		"PosID": "POS198",
		"CashierID": "OAS199",
		"CustomerType": "PRIME",
		"CustomerCardNo": "5733357005",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CARD",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "HOME-DELIVERY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": 0,
		"StoreID": "STR7188",
		"PosID": "POS956",
		"CashierID": "OAS134",
		"CustomerType": "PRIME",
		"CustomerCardNo": "4629185211",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CARD",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "TAKEAWAY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": 0,
		"StoreID": "STR7188",
		"PosID": "POS664",
		"CashierID": "OAS971",
		"CustomerType": "PRIME",
		"CustomerCardNo": "9316477281",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CARD",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "HOME-DELIVERY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": 0,
		"StoreID": "STR7188",
		"PosID": "POS825",
		"CashierID": "OAS329",
		"CustomerType": "PRIME",
		"CustomerCardNo": "7051101351",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CASH",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "HOME-DELIVERY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": 0,
		"StoreID": "STR7255",
		"PosID": "POS626",
		"CashierID": "OAS437",
		"CustomerType": "PRIME",
		"CustomerCardNo": "2602353115",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CARD",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "TAKEAWAY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": 0,
		"StoreID": "STR7255",
		"PosID": "POS115",
		"CashierID": "OAS634",
		"CustomerType": "PRIME",
		"CustomerCardNo": "1682244797",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CASH",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "HOME-DELIVERY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": 0,
		"StoreID": "STR7255",
		"PosID": "POS866",
		"CashierID": "OAS244",
		"CustomerType": "PRIME",
		"CustomerCardNo": "5432615113",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CASH",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "TAKEAWAY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": 0,
		"StoreID": "STR7255",
		"PosID": "POS692",
		"CashierID": "OAS812",
		"CustomerType": "NONPRIME",
		"CustomerCardNo": "8891304816",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CASH",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "TAKEAWAY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": 0,
		"StoreID": "STR7255",
		"PosID": "POS738",
		"CashierID": "OAS349",
		"CustomerType": "NONPRIME",
		"CustomerCardNo": "8582181693",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CASH",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "TAKEAWAY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": 0,
		"StoreID": "STR7262",
		"PosID": "POS581",
		"CashierID": "OAS742",
		"CustomerType": "NONPRIME",
		"CustomerCardNo": "6218924818",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CARD",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "TAKEAWAY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": 0,
		"StoreID": "STR7262",
		"PosID": "POS576",
		"CashierID": "OAS819",
		"CustomerType": "NONPRIME",
		"CustomerCardNo": "2016894106",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CARD",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "TAKEAWAY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": 0,
		"StoreID": "STR7262",
		"PosID": "POS664",
		"CashierID": "OAS536",
		"CustomerType": "NONPRIME",
		"CustomerCardNo": "2954913332",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CARD",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "HOME-DELIVERY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": 0,
		"StoreID": "STR7262",
		"PosID": "POS733",
		"CashierID": "OAS959",
		"CustomerType": "PRIME",
		"CustomerCardNo": "1518460232",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CASH",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "TAKEAWAY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": 0,
		"StoreID": "STR7262",
		"PosID": "POS182",
		"CashierID": "OAS538",
		"CustomerType": "PRIME",
		"CustomerCardNo": "5378825053",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CASH",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "HOME-DELIVERY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": 1570745999,
		"StoreID": "STR7443",
		"PosID": "POS411",
		"CashierID": "OAS936",
		"CustomerType": "NONPRIME",
		"CustomerCardNo": "4369698403",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CARD",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "HOME-DELIVERY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": 0,
		"StoreID": "STR7443",
		"PosID": "POS365",
		"CashierID": "OAS845",
		"CustomerType": "PRIME",
		"CustomerCardNo": "8790333340",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CASH",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "HOME-DELIVERY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": 0,
		"StoreID": "STR7443",
		"PosID": "POS394",
		"CashierID": "OAS813",
		"CustomerType": "NONPRIME",
		"CustomerCardNo": "7587821520",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CASH",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "TAKEAWAY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": 0,
		"StoreID": "STR7443",
		"PosID": "POS333",
		"CashierID": "OAS883",
		"CustomerType": "NONPRIME",
		"CustomerCardNo": "5483488802",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CASH",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "HOME-DELIVERY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": 0,
		"StoreID": "STR7443",
		"PosID": "POS388",
		"CashierID": "OAS436",
		"CustomerType": "PRIME",
		"CustomerCardNo": "8714158103",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CASH",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "HOME-DELIVERY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": 0,
		"StoreID": "STR7449",
		"PosID": "POS351",
		"CashierID": "OAS487",
		"CustomerType": "NONPRIME",
		"CustomerCardNo": "9639928743",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CASH",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "TAKEAWAY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": 0,
		"StoreID": "STR7449",
		"PosID": "POS923",
		"CashierID": "OAS748",
		"CustomerType": "NONPRIME",
		"CustomerCardNo": "1422009832",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CARD",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "HOME-DELIVERY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": 0,
		"StoreID": "STR7449",
		"PosID": "POS423",
		"CashierID": "OAS733",
		"CustomerType": "PRIME",
		"CustomerCardNo": "7691699125",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CASH",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "HOME-DELIVERY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": 0,
		"StoreID": "STR7449",
		"PosID": "POS215",
		"CashierID": "OAS663",
		"CustomerType": "PRIME",
		"CustomerCardNo": "3453134392",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CARD",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "HOME-DELIVERY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": 0,
		"StoreID": "STR7449",
		"PosID": "POS728",
		"CashierID": "OAS323",
		"CustomerType": "PRIME",
		"CustomerCardNo": "5301477438",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CASH",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "TAKEAWAY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": 0,
		"StoreID": "STR8311",
		"PosID": "POS975",
		"CashierID": "OAS881",
		"CustomerType": "NONPRIME",
		"CustomerCardNo": "4680751410",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CARD",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "TAKEAWAY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": 0,
		"StoreID": "STR8311",
		"PosID": "POS377",
		"CashierID": "OAS478",
		"CustomerType": "NONPRIME",
		"CustomerCardNo": "8670468851",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CASH",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "TAKEAWAY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": 0,
		"StoreID": "STR8311",
		"PosID": "POS728",
		"CashierID": "OAS852",
		"CustomerType": "PRIME",
		"CustomerCardNo": "8490473378",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CASH",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "HOME-DELIVERY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": 0,
		"StoreID": "STR8311",
		"PosID": "POS935",
		"CashierID": "OAS755",
		"CustomerType": "NONPRIME",
		"CustomerCardNo": "5196911608",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CARD",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "TAKEAWAY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": 0,
		"StoreID": "STR8311",
		"PosID": "POS224",
		"CashierID": "OAS399",
		"CustomerType": "NONPRIME",
		"CustomerCardNo": "2989852024",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CASH",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "TAKEAWAY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": 0,
		"StoreID": "STR8513",
		"PosID": "POS881",
		"CashierID": "OAS354",
		"CustomerType": "NONPRIME",
		"CustomerCardNo": "2599848717",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CARD",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "TAKEAWAY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": 0,
		"StoreID": "STR8513",
		"PosID": "POS155",
		"CashierID": "OAS558",
		"CustomerType": "NONPRIME",
		"CustomerCardNo": "2389018842",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CASH",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "HOME-DELIVERY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": 0,
		"StoreID": "STR8513",
		"PosID": "POS582",
		"CashierID": "OAS212",
		"CustomerType": "PRIME",
		"CustomerCardNo": "6705218300",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CASH",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "TAKEAWAY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": 0,
		"StoreID": "STR8513",
		"PosID": "POS163",
		"CashierID": "OAS961",
		"CustomerType": "PRIME",
		"CustomerCardNo": "2762345282",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CARD",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "HOME-DELIVERY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": 0,
		"StoreID": "STR8513",
		"PosID": "POS311",
		"CashierID": "OAS845",
		"CustomerType": "NONPRIME",
		"CustomerCardNo": "8111613552",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CASH",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "TAKEAWAY"
	}
]

products.json
[
  {
    "ItemCode": 203,
    "ItemDescription": "Bunk bed",
    "ItemPrice": 1686,
    "ItemQty": 0
  },
  {
    "ItemCode": 208,
    "ItemDescription": "Canopy bed",
    "ItemPrice": 508,
    "ItemQty": 0
  },
  {
    "ItemCode": 213,
    "ItemDescription": "Infant bed",
    "ItemPrice": 1755,
    "ItemQty": 0
  },
  {
    "ItemCode": 218,
    "ItemDescription": "Sofa bed",
    "ItemPrice": 895,
    "ItemQty": 0
  },
  {
    "ItemCode": 223,
    "ItemDescription": "Hammock",
    "ItemPrice": 1210,
    "ItemQty": 0
  },
  {
    "ItemCode": 228,
    "ItemDescription": "Divan",
    "ItemPrice": 1083,
    "ItemQty": 0
  },
  {
    "ItemCode": 233,
    "ItemDescription": "Coffee table",
    "ItemPrice": 1055,
    "ItemQty": 0
  },
  {
    "ItemCode": 238,
    "ItemDescription": "Dining table",
    "ItemPrice": 1582,
    "ItemQty": 0
  },
  {
    "ItemCode": 243,
    "ItemDescription": "Folding table",
    "ItemPrice": 738,
    "ItemQty": 0
  },
  {
    "ItemCode": 248,
    "ItemDescription": "TV tray table",
    "ItemPrice": 1947,
    "ItemQty": 0
  },
  {
    "ItemCode": 253,
    "ItemDescription": "Bathroom cabinet",
    "ItemPrice": 1513,
    "ItemQty": 0
  },
  {
    "ItemCode": 258,
    "ItemDescription": "Closet",
    "ItemPrice": 1687,
    "ItemQty": 0
  },
  {
    "ItemCode": 263,
    "ItemDescription": "Kitchen cabinet",
    "ItemPrice": 1050,
    "ItemQty": 0
  },
  {
    "ItemCode": 268,
    "ItemDescription": "Floating shelf",
    "ItemPrice": 1894,
    "ItemQty": 0
  },
  {
    "ItemCode": 273,
    "ItemDescription": "Bedroom set",
    "ItemPrice": 842,
    "ItemQty": 0
  },
  {
    "ItemCode": 278,
    "ItemDescription": "Dining set",
    "ItemPrice": 1940,
    "ItemQty": 0
  },
  {
    "ItemCode": 283,
    "ItemDescription": "Portable Lamps",
    "ItemPrice": 2236,
    "ItemQty": 0
  },
  {
    "ItemCode": 288,
    "ItemDescription": "Hutch",
    "ItemPrice": 1812,
    "ItemQty": 0
  },
  {
    "ItemCode": 293,
    "ItemDescription": "Bar stool",
    "ItemPrice": 1148,
    "ItemQty": 0
  },
  {
    "ItemCode": 298,
    "ItemDescription": "Bardic chair",
    "ItemPrice": 1649,
    "ItemQty": 0
  },
  {
    "ItemCode": 303,
    "ItemDescription": "Bench",
    "ItemPrice": 2251,
    "ItemQty": 0
  },
  {
    "ItemCode": 308,
    "ItemDescription": "Butterfly chair",
    "ItemPrice": 857,
    "ItemQty": 0
  },
  {
    "ItemCode": 313,
    "ItemDescription": "Brewster Chair",
    "ItemPrice": 2195,
    "ItemQty": 0
  },
  {
    "ItemCode": 318,
    "ItemDescription": "Bofinger chair",
    "ItemPrice": 1119,
    "ItemQty": 0
  },
  {
    "ItemCode": 323,
    "ItemDescription": "Chiavari chair",
    "ItemPrice": 653,
    "ItemQty": 0
  },
  {
    "ItemCode": 328,
    "ItemDescription": "Dining chair",
    "ItemPrice": 1223,
    "ItemQty": 0
  },
  {
    "ItemCode": 333,
    "ItemDescription": "Gaming chair",
    "ItemPrice": 1902,
    "ItemQty": 0
  },
  {
    "ItemCode": 338,
    "ItemDescription": "Kneeling chairs",
    "ItemPrice": 442,
    "ItemQty": 0
  },
  {
    "ItemCode": 343,
    "ItemDescription": "Massage chair",
    "ItemPrice": 1354,
    "ItemQty": 0
  },
  {
    "ItemCode": 348,
    "ItemDescription": "Navy chair",
    "ItemPrice": 1998,
    "ItemQty": 0
  },
  {
    "ItemCode": 353,
    "ItemDescription": "Recliner",
    "ItemPrice": 1585,
    "ItemQty": 0
  },
  {
    "ItemCode": 358,
    "ItemDescription": "Restraint chair",
    "ItemPrice": 1943,
    "ItemQty": 0
  },
  {
    "ItemCode": 363,
    "ItemDescription": "Rocking chair",
    "ItemPrice": 2021,
    "ItemQty": 0
  },
  {
    "ItemCode": 368,
    "ItemDescription": "Stool",
    "ItemPrice": 888,
    "ItemQty": 0
  },
  {
    "ItemCode": 373,
    "ItemDescription": "Latex Mattress",
    "ItemPrice": 1313,
    "ItemQty": 0
  },
  {
    "ItemCode": 378,
    "ItemDescription": "Air Bed",
    "ItemPrice": 2263,
    "ItemQty": 0
  },
  {
    "ItemCode": 383,
    "ItemDescription": "Innerspring Mattress",
    "ItemPrice": 655,
    "ItemQty": 0
  },
  {
    "ItemCode": 388,
    "ItemDescription": "Memory Foam",
    "ItemPrice": 1884,
    "ItemQty": 0
  },
  {
    "ItemCode": 393,
    "ItemDescription": "Hybrid Mattress",
    "ItemPrice": 2217,
    "ItemQty": 0
  },
  {
    "ItemCode": 398,
    "ItemDescription": "Latex Mattress",
    "ItemPrice": 773,
    "ItemQty": 0
  },
  {
    "ItemCode": 403,
    "ItemDescription": "Adjustable Air Mattress",
    "ItemPrice": 1417,
    "ItemQty": 0
  },
  {
    "ItemCode": 408,
    "ItemDescription": "Confidante",
    "ItemPrice": 1242,
    "ItemQty": 0
  },
  {
    "ItemCode": 413,
    "ItemDescription": "Slipcover",
    "ItemPrice": 1896,
    "ItemQty": 0
  },
  {
    "ItemCode": 418,
    "ItemDescription": "Wing chair",
    "ItemPrice": 1431,
    "ItemQty": 0
  },
  {
    "ItemCode": 423,
    "ItemDescription": "Quilt",
    "ItemPrice": 1485,
    "ItemQty": 0
  },
  {
    "ItemCode": 428,
    "ItemDescription": "Cocktail glass",
    "ItemPrice": 1422,
    "ItemQty": 0
  },
  {
    "ItemCode": 433,
    "ItemDescription": "Depression glass",
    "ItemPrice": 1950,
    "ItemQty": 0
  },
  {
    "ItemCode": 438,
    "ItemDescription": "Lead glass",
    "ItemPrice": 2069,
    "ItemQty": 0
  },
  {
    "ItemCode": 443,
    "ItemDescription": "Margarita glass",
    "ItemPrice": 2475,
    "ItemQty": 0
  },
  {
    "ItemCode": 448,
    "ItemDescription": "Martini glass",
    "ItemPrice": 2263,
    "ItemQty": 0
  },
  {
    "ItemCode": 453,
    "ItemDescription": "Shot glass",
    "ItemPrice": 674,
    "ItemQty": 0
  },
  {
    "ItemCode": 458,
    "ItemDescription": "Wine glass",
    "ItemPrice": 1644,
    "ItemQty": 0
  },
  {
    "ItemCode": 463,
    "ItemDescription": "Cookie jars",
    "ItemPrice": 793,
    "ItemQty": 0
  },
  {
    "ItemCode": 468,
    "ItemDescription": "Lunch box",
    "ItemPrice": 1467,
    "ItemQty": 0
  },
  {
    "ItemCode": 473,
    "ItemDescription": "Mason jars",
    "ItemPrice": 1358,
    "ItemQty": 0
  },
  {
    "ItemCode": 478,
    "ItemDescription": "Teapot",
    "ItemPrice": 885,
    "ItemQty": 0
  },
  {
    "ItemCode": 483,
    "ItemDescription": "Teacups and saucers",
    "ItemPrice": 1781,
    "ItemQty": 1
  },
  {
    "ItemCode": 488,
    "ItemDescription": "Bread knife",
    "ItemPrice": 1077,
    "ItemQty": 0
  },
  {
    "ItemCode": 493,
    "ItemDescription": "Boning knife",
    "ItemPrice": 513,
    "ItemQty": 0
  },
  {
    "ItemCode": 498,
    "ItemDescription": "Carving knifes",
    "ItemPrice": 1424,
    "ItemQty": 3
  },
  {
    "ItemCode": 503,
    "ItemDescription": "Chef's knife",
    "ItemPrice": 1973,
    "ItemQty": 0
  },
  {
    "ItemCode": 508,
    "ItemDescription": "Kitchen knife",
    "ItemPrice": 2483,
    "ItemQty": 0
  },
  {
    "ItemCode": 513,
    "ItemDescription": "Flip clock",
    "ItemPrice": 1259,
    "ItemQty": 0
  },
  {
    "ItemCode": 518,
    "ItemDescription": "Hourglass",
    "ItemPrice": 1598,
    "ItemQty": 3
  },
  {
    "ItemCode": 523,
    "ItemDescription": "Oil-lamp clock",
    "ItemPrice": 1371,
    "ItemQty": 0
  },
  {
    "ItemCode": 528,
    "ItemDescription": "Projection clock",
    "ItemPrice": 2365,
    "ItemQty": 0
  },
  {
    "ItemCode": 533,
    "ItemDescription": "Rolling ball clock",
    "ItemPrice": 1651,
    "ItemQty": 0
  },
  {
    "ItemCode": 538,
    "ItemDescription": "Grandmother clock",
    "ItemPrice": 1301,
    "ItemQty": 1
  },
  {
    "ItemCode": 543,
    "ItemDescription": "Lighthouse clock",
    "ItemPrice": 636,
    "ItemQty": 0
  },
  {
    "ItemCode": 548,
    "ItemDescription": "Cartel clock",
    "ItemPrice": 1500,
    "ItemQty": 0
  },
  {
    "ItemCode": 553,
    "ItemDescription": "Banjo clock",
    "ItemPrice": 1651,
    "ItemQty": 0
  },
  {
    "ItemCode": 558,
    "ItemDescription": "Balloon clock",
    "ItemPrice": 1633,
    "ItemQty": 0
  },
  {
    "ItemCode": 563,
    "ItemDescription": "Chiming clock",
    "ItemPrice": 2168,
    "ItemQty": 0
  },
  {
    "ItemCode": 568,
    "ItemDescription": "Pinch Pleated Curtains",
    "ItemPrice": 1718,
    "ItemQty": 0
  },
  {
    "ItemCode": 573,
    "ItemDescription": "Eyelet Curtains",
    "ItemPrice": 642,
    "ItemQty": 0
  },
  {
    "ItemCode": 578,
    "ItemDescription": "Goblet Pleat Curtains",
    "ItemPrice": 1765,
    "ItemQty": 2
  },
  {
    "ItemCode": 583,
    "ItemDescription": "Tab Top Curtains",
    "ItemPrice": 1329,
    "ItemQty": 0
  },
  {
    "ItemCode": 588,
    "ItemDescription": "Sheer Curtains",
    "ItemPrice": 801,
    "ItemQty": 0
  },
  {
    "ItemCode": 593,
    "ItemDescription": "Hanging curtains",
    "ItemPrice": 1896,
    "ItemQty": 0
  },
  {
    "ItemCode": 598,
    "ItemDescription": "Grommet Curtains",
    "ItemPrice": 914,
    "ItemQty": 0
  },
  {
    "ItemCode": 603,
    "ItemDescription": "Sheer Curtains",
    "ItemPrice": 1282,
    "ItemQty": 0
  },
  {
    "ItemCode": 608,
    "ItemDescription": "Pleated Drapes",
    "ItemPrice": 1684,
    "ItemQty": 0
  },
  {
    "ItemCode": 613,
    "ItemDescription": "Goblet Pleat Drapes",
    "ItemPrice": 1583,
    "ItemQty": 0
  },
  {
    "ItemCode": 618,
    "ItemDescription": "Pencil Pleat Drapes",
    "ItemPrice": 1140,
    "ItemQty": 0
  },
  {
    "ItemCode": 623,
    "ItemDescription": " Box Pleat Drapes",
    "ItemPrice": 1683,
    "ItemQty": 0
  },
  {
    "ItemCode": 628,
    "ItemDescription": "Window Scarf",
    "ItemPrice": 1774,
    "ItemQty": 3
  },
  {
    "ItemCode": 633,
    "ItemDescription": "Cafe Curtains",
    "ItemPrice": 796,
    "ItemQty": 0
  },
  {
    "ItemCode": 638,
    "ItemDescription": "Baster",
    "ItemPrice": 1214,
    "ItemQty": 0
  },
  {
    "ItemCode": 643,
    "ItemDescription": "Blow torch",
    "ItemPrice": 1955,
    "ItemQty": 0
  },
  {
    "ItemCode": 648,
    "ItemDescription": "Bottle opener",
    "ItemPrice": 321,
    "ItemQty": 0
  },
  {
    "ItemCode": 653,
    "ItemDescription": "Browning tray",
    "ItemPrice": 375,
    "ItemQty": 0
  },
  {
    "ItemCode": 658,
    "ItemDescription": "Chinois",
    "ItemPrice": 567,
    "ItemQty": 0
  },
  {
    "ItemCode": 663,
    "ItemDescription": "Corkscrew",
    "ItemPrice": 983,
    "ItemQty": 0
  },
  {
    "ItemCode": 668,
    "ItemDescription": "Crab cracker",
    "ItemPrice": 785,
    "ItemQty": 0
  },
  {
    "ItemCode": 673,
    "ItemDescription": "Dough scraper",
    "ItemPrice": 980,
    "ItemQty": 0
  },
  {
    "ItemCode": 678,
    "ItemDescription": "Fillet knife",
    "ItemPrice": 350,
    "ItemQty": 0
  },
  {
    "ItemCode": 683,
    "ItemDescription": "Grater",
    "ItemPrice": 370,
    "ItemQty": 0
  },
  {
    "ItemCode": 688,
    "ItemDescription": "Ladle",
    "ItemPrice": 570,
    "ItemQty": 0
  },
  {
    "ItemCode": 693,
    "ItemDescription": "Mandoline",
    "ItemPrice": 250,
    "ItemQty": 0
  },
  {
    "ItemCode": 698,
    "ItemDescription": "Meat grinder",
    "ItemPrice": 1250,
    "ItemQty": 0
  }
]


Inside src/main/avro folder
DeliveryAddress.avsc
{
  "namespace": "com.pack.model",
  "type": "record",
  "name": "DeliveryAddress",
  "fields": [
    {"name": "AddressLine","type": ["null","string"]},
    {"name": "City","type": ["null","string"]},
    {"name": "State","type": ["null","string"]},
    {"name": "PinCode","type": ["null","string"]},
    {"name": "ContactNumber","type": ["null","string"]}
  ]
}

LineItem.avsc
{
  "namespace": "com.pack.model",
  "type": "record",
  "name": "LineItem",
  "fields": [
    {"name": "ItemCode","type": ["null","string"]},
    {"name": "ItemDescription","type": ["null","string"]},
    {"name": "ItemPrice","type": ["null","double"]},
    {"name": "ItemQty","type": ["null","int"]},
    {"name": "TotalValue","type": ["null","double"]}
  ]
}

PosInvoice.avsc
{
  "namespace": "com.pack.model",
  "type": "record",
  "name": "PosInvoice",
  "fields": [
    {"name": "InvoiceNumber","type": ["null","string"]},
    {"name": "CreatedTime","type": ["null","long"]},
    {"name": "CustomerCardNo","type": ["null","string"]},
    {"name": "TotalAmount","type": ["null","double"]},
    {"name": "NumberOfItems","type": ["null","int"]},
    {"name": "PaymentMethod","type": ["null","string"]},
    {"name": "TaxableAmount","type": ["null","double"]},
    {"name": "CGST","type": ["null","double"]},
    {"name": "SGST","type": ["null","double"]},
    {"name": "CESS","type": ["null","double"]},
    {"name": "StoreID","type": ["null","string"]},
    {"name": "PosID","type": ["null","string"]},
    {"name": "CashierID","type": ["null","string"]},
    {"name": "CustomerType","type": ["null","string"]},
    {"name": "DeliveryType","type": ["null","string"]},
    {"name": "DeliveryAddress","type": ["null","DeliveryAddress"]},
    {"name": "InvoiceLineItems","type": {"type": "array", "items": "LineItem"}}
  ]
}

KafkaAvroInvoiceApplication.java
package com.pack.KafkaAvroInvoice;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.ApplicationArguments;
import org.springframework.boot.ApplicationRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

import com.pack.KafkaAvroInvoice.dataGenerator.InvoiceGenerator;
import com.pack.KafkaAvroInvoice.service.KafkaProducerService;


@SpringBootApplication
public class KafkaAvroInvoiceApplication implements ApplicationRunner {

	public static void main(String[] args) {
		SpringApplication.run(KafkaAvroInvoiceApplication.class, args);
	} 
	
	@Autowired
	KafkaProducerService producerService;
	
	@Autowired
	InvoiceGenerator invoiceGenerator;
	
	@Value("${application.configs.invoice.count}")
	private int INVOICE_COUNT;

	@Override
	public void run(ApplicationArguments args) throws Exception {
		for(int i=0;i<INVOICE_COUNT;i++) {
			producerService.sendMessage(invoiceGenerator.getNextInvoice());
			Thread.sleep(1000);
		}
	}
}

AddressGenerator.java
package com.pack.KafkaAvroInvoice.dataGenerator;

import java.io.File;
import java.util.Random;

import org.springframework.stereotype.Service;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.pack.model.DeliveryAddress;



@Service
public class AddressGenerator {
    
    private final Random random;

    private final DeliveryAddress[] addresses;

    private int getIndex() {
        return random.nextInt(100);
    }

    public AddressGenerator() {
        final String DATAFILE = "src/main/resources/data/address.json";
        final ObjectMapper mapper;
        random = new Random();
        mapper = new ObjectMapper();
        try {
            addresses = mapper.readValue(new File(DATAFILE), DeliveryAddress[].class);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    DeliveryAddress getNextAddress() {
        return addresses[getIndex()];
    }
}


InvoiceGenerator.java
package com.pack.KafkaAvroInvoice.dataGenerator;

import java.io.File;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.pack.model.DeliveryAddress;
import com.pack.model.LineItem;
import com.pack.model.PosInvoice;

import lombok.extern.log4j.Log4j2;

@Service
@Log4j2
public class InvoiceGenerator {
   
    private final Random invoiceIndex;
    private final Random invoiceNumber;
    private final Random numberOfItems;
    private final PosInvoice[] invoices;

    @Autowired
    AddressGenerator addressGenerator;
    @Autowired
    ProductGenerator productGenerator;

    public InvoiceGenerator() {
        String DATAFILE = "src/main/resources/data/Invoice.json";
        ObjectMapper mapper;
        invoiceIndex = new Random();
        invoiceNumber = new Random();
        numberOfItems = new Random();
        mapper = new ObjectMapper();
        try {
            invoices = mapper.readValue(new File(DATAFILE), PosInvoice[].class);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    private int getIndex() {
        return invoiceIndex.nextInt(100);
    }

    private int getNewInvoiceNumber() {
        return invoiceNumber.nextInt(99999999) + 99999;
    }

    private int getNoOfItems() {
        return numberOfItems.nextInt(4) + 1;
    }

    public PosInvoice getNextInvoice() {
        PosInvoice invoice = invoices[getIndex()];
        invoice.setInvoiceNumber(Integer.toString(getNewInvoiceNumber()));
        invoice.setCreatedTime(System.currentTimeMillis());
        if ("HOME-DELIVERY".equalsIgnoreCase(invoice.getDeliveryType())) {
            DeliveryAddress deliveryAddress = addressGenerator.getNextAddress();
            invoice.setDeliveryAddress(deliveryAddress);
        }
        int itemCount = getNoOfItems();
        Double totalAmount = 0.0;
        List<LineItem> items = new ArrayList<>();
        for (int i = 0; i < itemCount; i++) {
            LineItem item = productGenerator.getNextProduct();
            totalAmount = totalAmount + item.getTotalValue();
            items.add(item);
        }
        invoice.setNumberOfItems(itemCount);
        invoice.setInvoiceLineItems(items);
        invoice.setTotalAmount(totalAmount);
        invoice.setTaxableAmount(totalAmount);
        invoice.setCGST(totalAmount * 0.025);
        invoice.setSGST(totalAmount * 0.025);
        invoice.setCESS(totalAmount * 0.00125);
        log.debug(invoice);
        return invoice;
    }
}


ProductGenerator.java
package com.pack.KafkaAvroInvoice.dataGenerator;

import java.io.File;
import java.util.Random;

import org.springframework.stereotype.Service;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.pack.model.LineItem;



@Service
public class ProductGenerator {
    
    private final Random random;
    private final Random qty;
    private final LineItem[] products;

    public ProductGenerator() {
        String DATAFILE = "src/main/resources/data/products.json";
        ObjectMapper mapper = new ObjectMapper();
        random = new Random();
        qty = new Random();
        try {
            products = mapper.readValue(new File(DATAFILE), LineItem[].class);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    private int getIndex() {
        return random.nextInt(100);
    }

    private int getQuantity() {
        return qty.nextInt(2) + 1;
    }

    public LineItem getNextProduct() {
        LineItem lineItem = products[getIndex()];
        lineItem.setItemQty(getQuantity());
        lineItem.setTotalValue(lineItem.getItemPrice() * lineItem.getItemQty());
        return lineItem;
    }
}


KafkaProducerService.java
package com.pack.KafkaAvroInvoice.service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.stereotype.Service;

import com.pack.model.PosInvoice;

import lombok.extern.log4j.Log4j2;

@Service
@Log4j2
public class KafkaProducerService {
    
    @Value("${application.configs.topic.name}")
    private String topicName;

    @Autowired
    KafkaTemplate kafkaTemplate;

    public void sendMessage(PosInvoice invoice) {
      log.info(String.format("Producing Invoice No: %s", invoice.getInvoiceNumber()));
      kafkaTemplate.send(topicName,invoice.getStoreID(),invoice);
    }
}


8. Kafka-ComplexAggregation

pom.xml
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.4.2</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.pack</groupId>
	<artifactId>Kafka-ComplexAggregation</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>Kafka-ComplexAggregation</name>
	<description>Demo project for Spring Boot</description>
	<properties>
		<java.version>11</java.version>
		<spring-cloud.version>Hoxton.SR9</spring-cloud.version>
	</properties>
	<dependencies>
		<dependency>
			<groupId>org.apache.kafka</groupId>
			<artifactId>kafka-streams</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-stream</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-stream-binder-kafka-streams</artifactId>
		</dependency>

		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<optional>true</optional>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-stream</artifactId>
			<scope>test</scope>
			<classifier>test-binder</classifier>
			<type>test-jar</type>
		</dependency>
	</dependencies>

	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-dependencies</artifactId>
				<version>${spring-cloud.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<configuration>
					<excludes>
						<exclude>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok</artifactId>
						</exclude>
					</excludes>
				</configuration>
			</plugin>
		</plugins>
	</build>
	<repositories>
		<repository>
			<id>spring-milestones</id>
			<name>Spring Milestones</name>
			<url>https://repo.spring.io/milestone</url>
		</repository>
	</repositories>

</project>


application.yml
spring:
  cloud:
    stream:
      bindings:
        inventories-channel:
          destination: active-inventories
        clicks-channel:
          destination: ad-clicks
      kafka:
        streams:
          binder:
            brokers:  localhost:9092
            configuration:
              commit.interval.ms: 10000
              state.dir: state-store
              default:
                key:
                  serde: org.apache.kafka.common.serialization.Serdes$StringSerde
                value:
                  serde: org.apache.kafka.common.serialization.Serdes$StringSerde


AdClick.java

package com.pack.KafkaComplexAggregation.model;

import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.Data;

@Data
public class AdClick {

    @JsonProperty("InventoryID")
    private String inventoryID;

}

AdInventories.java

package com.pack.KafkaComplexAggregation.model;

import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.Data;

@Data
public class AdInventories {

    @JsonProperty("InventoryID")
    private String inventoryID;
    @JsonProperty("NewsType")
    private String newsType;

}


ClicksByNewsType.java

package com.pack.KafkaComplexAggregation.model;

import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.Data;

@Data
public class ClicksByNewsType {

    @JsonProperty("NewsType")
    private String newsType;
    @JsonProperty("Clicks")
    private Long clicks;
}

Top3NewsTypes.java
package com.pack.KafkaComplexAggregation.model;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;
import java.util.TreeSet;

@JsonInclude(JsonInclude.Include.NON_NULL)
@JsonPropertyOrder({
        "top3Sorted"
})
public class Top3NewsTypes {

    private ObjectMapper mapper = new ObjectMapper();

    private final TreeSet<ClicksByNewsType> top3Sorted = new TreeSet<>((o1, o2) -> {
        final int result = o2.getClicks().compareTo(o1.getClicks());
        if (result != 0)
            return result;
        else
            return o1.getNewsType().compareTo(o2.getNewsType());
    });

    public void add(ClicksByNewsType newValue) {
        top3Sorted.add(newValue);
        if (top3Sorted.size() > 3) {
            top3Sorted.remove(top3Sorted.last());
        }
    }

    public void remove(ClicksByNewsType oldValue){
        top3Sorted.remove(oldValue);
    }

    @JsonProperty("top3Sorted")
    public String getTop3Sorted() throws JsonProcessingException {
        return mapper.writeValueAsString(top3Sorted);
    }

    @JsonProperty("top3Sorted")
    public void setTop3Sorted(String top3String) throws IOException {
        ClicksByNewsType[] top3 = mapper.readValue(top3String, ClicksByNewsType[].class);
        for (ClicksByNewsType i:top3){
            add(i);
        }
    }
}


ClicksListenerBinding.java
package com.pack.KafkaComplexAggregation.binding;


import org.apache.kafka.streams.kstream.GlobalKTable;
import org.apache.kafka.streams.kstream.KStream;
import org.springframework.cloud.stream.annotation.Input;

import com.pack.KafkaComplexAggregation.model.AdClick;
import com.pack.KafkaComplexAggregation.model.AdInventories;

public interface ClicksListenerBinding {

    @Input("inventories-channel")
    GlobalKTable<String, AdInventories> inventoryInputStream();

    @Input("clicks-channel")
    KStream<String, AdClick> clickInputStream();

}


ClickListenerService.java
package com.pack.KafkaComplexAggregation.service;

import org.apache.kafka.common.serialization.Serdes;
import org.apache.kafka.common.utils.Bytes;
import org.apache.kafka.streams.KeyValue;
import org.apache.kafka.streams.kstream.GlobalKTable;
import org.apache.kafka.streams.kstream.Grouped;
import org.apache.kafka.streams.kstream.KStream;
import org.apache.kafka.streams.kstream.KTable;
import org.apache.kafka.streams.kstream.Materialized;
import org.apache.kafka.streams.state.KeyValueStore;
import org.springframework.cloud.stream.annotation.EnableBinding;
import org.springframework.cloud.stream.annotation.Input;
import org.springframework.cloud.stream.annotation.StreamListener;
import org.springframework.kafka.support.serializer.JsonSerde;
import org.springframework.stereotype.Service;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.pack.KafkaComplexAggregation.binding.ClicksListenerBinding;
import com.pack.KafkaComplexAggregation.model.AdClick;
import com.pack.KafkaComplexAggregation.model.AdInventories;
import com.pack.KafkaComplexAggregation.model.ClicksByNewsType;
import com.pack.KafkaComplexAggregation.model.Top3NewsTypes;

import lombok.extern.log4j.Log4j2;

@Log4j2
@Service
@EnableBinding(ClicksListenerBinding.class)
public class ClickListenerService {

    @StreamListener
    public void process(@Input("inventories-channel") GlobalKTable<String, AdInventories> inventory,
                        @Input("clicks-channel") KStream<String, AdClick> click) {

        click.foreach((k, v) -> log.info("Click Key: {}, Value: {}", k, v));

        KTable<String, Long> clicksByNewsTypeKTable = click.join(inventory,
                (clickKey, clickValue) -> clickKey,
                (clickValue, inventoryValue) -> inventoryValue)
                .groupBy((joinedKey, joinedValue) -> joinedValue.getNewsType(),
                        Grouped.with(Serdes.String(),
                                new JsonSerde<>(AdInventories.class)))
                .count();

        clicksByNewsTypeKTable.groupBy(
                (k, v) -> {
                    ClicksByNewsType value = new ClicksByNewsType();
                    value.setNewsType(k);
                    value.setClicks(v);
                    return KeyValue.pair("top3NewsTypes", value);
                },
                Grouped.with(Serdes.String(), new JsonSerde<>(ClicksByNewsType.class))
        ).aggregate(
                () -> new Top3NewsTypes(),
                (k, v, aggV) -> {
                    aggV.add(v);
                    return aggV;
                },
                (k, v, aggV) -> {
                    aggV.remove(v);
                    return aggV;
                },
                Materialized.<String, Top3NewsTypes, KeyValueStore<Bytes, byte[]>>
                        as("top3-clicks")
                        .withKeySerde(Serdes.String())
                        .withValueSerde(new JsonSerde<>(Top3NewsTypes.class)))
                .toStream().foreach(
                (k, v) -> {
                    try {
                        log.info("k=" + k + " v= " + v.getTop3Sorted());
                    } catch (JsonProcessingException e) {
                        e.printStackTrace();
                    }
                });

    }
}


9. Kafka-ExactlyOnce

pom.xml
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.4.1</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.pack</groupId>
	<artifactId>Kafka-ExactlyOnce</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>Kafka-ExactlyOnce</name>
	<description>Demo project for Spring Boot</description>
	<properties>
		<java.version>11</java.version>
		<spring-cloud.version>Hoxton.SR9</spring-cloud.version>
	</properties>

	<dependencies>
		<dependency>
			<groupId>org.apache.kafka</groupId>
			<artifactId>kafka-streams</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-stream</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-stream-binder-kafka-streams</artifactId>
		</dependency>
		<dependency>
			<groupId>org.apache.avro</groupId>
			<artifactId>avro</artifactId>
			<version>1.9.2</version>
		</dependency>
		<dependency>
			<groupId>io.confluent</groupId>
			<artifactId>kafka-streams-avro-serde</artifactId>
			<version>6.0.0</version>
		</dependency>

		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-stream</artifactId>
			<scope>test</scope>
			<classifier>test-binder</classifier>
			<type>test-jar</type>
		</dependency>
	</dependencies>

	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-dependencies</artifactId>
				<version>${spring-cloud.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<configuration>
					<excludes>
						<exclude>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok</artifactId>
						</exclude>
					</excludes>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.avro</groupId>
				<artifactId>avro-maven-plugin</artifactId>
				<version>1.8.2</version>
				<executions>
					<execution>
						<phase>generate-sources</phase>
						<goals>
							<goal>schema</goal>
						</goals>
						<configuration>
							<sourceDirectory>src/main/avro</sourceDirectory>
							<outputDirectory>${project.build.directory}/generated-sources</outputDirectory>
							<imports>
								<import>${project.basedir}/src/main/avro/LineItem.avsc</import>
								<import>${project.basedir}/src/main/avro/DeliveryAddress.avsc</import>
							</imports>
							<stringType>String</stringType>
						</configuration>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>

	<repositories>
		<repository>
			<id>spring-milestones</id>
			<name>Spring Milestones</name>
			<url>https://repo.spring.io/milestone</url>
		</repository>
		<repository>
			<id>confluent</id>
			<url>https://packages.confluent.io/maven/</url>
		</repository>
	</repositories>


</project>


application.yml
spring:
  cloud:
    stream:
      bindings:
        pos-input-channel:
          destination: avro-pos-topic
      kafka:
        streams:
          binder:
            brokers:  localhost:9092
            configuration:
              schema.registry.url: http://localhost:8081
              processing.guarantee: exactly_once
              default:
                key:
                  serde: org.apache.kafka.common.serialization.Serdes$StringSerde
                value:
                  serde: io.confluent.kafka.streams.serdes.avro.SpecificAvroSerde


Inside src/main/avro folder
DeliveryAddress.avsc
{
  "namespace": "com.pack.model",
  "type": "record",
  "name": "DeliveryAddress",
  "fields": [
    {"name": "AddressLine","type": ["null","string"]},
    {"name": "City","type": ["null","string"]},
    {"name": "State","type": ["null","string"]},
    {"name": "PinCode","type": ["null","string"]},
    {"name": "ContactNumber","type": ["null","string"]}
  ]
}

HadoopRecord.avsc
{"namespace": "com.pack.model",
  "type": "record",
  "name": "HadoopRecord",
  "fields": [
    {"name": "InvoiceNumber", "type": ["null", "string"]},
    {"name": "CreatedTime",  "type":["null", "long"]},
    {"name": "StoreID",  "type": ["null", "string"]},
    {"name": "PosID",  "type": ["null", "string"]},
    {"name": "CustomerType",  "type": ["null", "string"]},
    {"name": "PaymentMethod",  "type": ["null", "string"]},
    {"name": "DeliveryType",  "type": ["null", "string"]},
    {"name": "City",  "type": ["null", "string"]},
    {"name": "State",  "type": ["null", "string"]},
    {"name": "PinCode",  "type": ["null", "string"]},
    {"name": "ItemCode",  "type": ["null", "string"]},
    {"name": "ItemDescription",  "type": ["null", "string"]},
    {"name": "ItemPrice",  "type": ["null", "double"]},
    {"name": "ItemQty",  "type": ["null", "int"]},
    {"name": "TotalValue",  "type": ["null", "double"]}
  ]
}

LineItem.avsc
{
  "namespace": "com.pack.model",
  "type": "record",
  "name": "LineItem",
  "fields": [
    {"name": "ItemCode","type": ["null","string"]},
    {"name": "ItemDescription","type": ["null","string"]},
    {"name": "ItemPrice","type": ["null","double"]},
    {"name": "ItemQty","type": ["null","int"]},
    {"name": "TotalValue","type": ["null","double"]}
  ]
}

Notification.avsc
{"namespace": "com.pack.model",
  "type": "record",
  "name": "Notification",
  "fields": [
    {"name": "InvoiceNumber", "type": ["null", "string"]},
    {"name": "CustomerCardNo",  "type":["null", "string"]},
    {"name": "TotalAmount",  "type": ["null", "double"]},
    {"name": "EarnedLoyaltyPoints",  "type": ["null", "double"]}
  ]
}

PosInvoice.avsc
{
  "namespace": "com.pack.model",
  "type": "record",
  "name": "PosInvoice",
  "fields": [
    {"name": "InvoiceNumber","type": ["null","string"]},
    {"name": "CreatedTime","type": ["null","long"]},
    {"name": "CustomerCardNo","type": ["null","string"]},
    {"name": "TotalAmount","type": ["null","double"]},
    {"name": "NumberOfItems","type": ["null","int"]},
    {"name": "PaymentMethod","type": ["null","string"]},
    {"name": "TaxableAmount","type": ["null","double"]},
    {"name": "CGST","type": ["null","double"]},
    {"name": "SGST","type": ["null","double"]},
    {"name": "CESS","type": ["null","double"]},
    {"name": "StoreID","type": ["null","string"]},
    {"name": "PosID","type": ["null","string"]},
    {"name": "CashierID","type": ["null","string"]},
    {"name": "CustomerType","type": ["null","string"]},
    {"name": "DeliveryType","type": ["null","string"]},
    {"name": "DeliveryAddress","type": ["null","DeliveryAddress"]},
    {"name": "InvoiceLineItems","type": {"type": "array", "items": "LineItem"}}
  ]
}

PosListenerBinding.java
package com.pack.KafkaExactlyOnce.bindings;



import org.apache.kafka.streams.kstream.KStream;
import org.springframework.cloud.stream.annotation.Input;

import com.pack.model.PosInvoice;

public interface PosListenerBinding {

    @Input("pos-input-channel")
    KStream<String, PosInvoice> posInputStream();

}

PosListenerService.java
package com.pack.KafkaExactlyOnce.services;


import org.apache.kafka.streams.kstream.KStream;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cloud.stream.annotation.EnableBinding;
import org.springframework.cloud.stream.annotation.StreamListener;
import org.springframework.stereotype.Service;

import com.pack.KafkaExactlyOnce.bindings.PosListenerBinding;
import com.pack.model.HadoopRecord;
import com.pack.model.Notification;
import com.pack.model.PosInvoice;

import lombok.extern.log4j.Log4j2;

@Service
@Log4j2
@EnableBinding(PosListenerBinding.class)
public class PosListenerService {

    @Autowired
    RecordBuilder recordBuilder;

    @StreamListener("pos-input-channel")
    public void process(KStream<String, PosInvoice> input) {

        KStream<String, HadoopRecord> hadoopRecordKStream = input
                .mapValues( v -> recordBuilder.getMaskedInvoice(v))
                .flatMapValues( v -> recordBuilder.getHadoopRecords(v));

        KStream<String, Notification> notificationKStream = input
                .filter((k, v) -> v.getCustomerType().equalsIgnoreCase("PRIME"))
                .mapValues(v -> recordBuilder.getNotification(v));

        hadoopRecordKStream.foreach((k, v) -> log.info(String.format("Hadoop Record:- Key: %s, Value: %s", k, v)));
        notificationKStream.foreach((k, v) -> log.info(String.format("Notification:- Key: %s, Value: %s", k, v)));

        hadoopRecordKStream.to("hadoop-sink-topic");
        notificationKStream.to("loyalty-topic");

    }

}


RecordBuilder.java
package com.pack.KafkaExactlyOnce.services;


import java.util.ArrayList;
import java.util.List;

import org.springframework.stereotype.Service;

import com.pack.model.HadoopRecord;
import com.pack.model.LineItem;
import com.pack.model.Notification;
import com.pack.model.PosInvoice;

@Service
public class RecordBuilder {

    public Notification getNotification(PosInvoice invoice){
        Notification notification = new Notification();
        notification.setInvoiceNumber(invoice.getInvoiceNumber());
        notification.setCustomerCardNo(invoice.getCustomerCardNo());
        notification.setTotalAmount(invoice.getTotalAmount());
        notification.setEarnedLoyaltyPoints(invoice.getTotalAmount() * 0.02);
        return notification;
    }

    public PosInvoice getMaskedInvoice(PosInvoice invoice){
        invoice.setCustomerCardNo(null);
        if (invoice.getDeliveryType().equalsIgnoreCase("HOME-DELIVERY")) {
            invoice.getDeliveryAddress().setAddressLine(null);
            invoice.getDeliveryAddress().setContactNumber(null);
        }
        return invoice;
    }

    public List<HadoopRecord> getHadoopRecords(PosInvoice invoice){
        List<HadoopRecord> records = new ArrayList<>();

        for (LineItem i : invoice.getInvoiceLineItems()) {
            HadoopRecord record = new HadoopRecord();
            record.setInvoiceNumber(invoice.getInvoiceNumber());
            record.setCreatedTime(invoice.getCreatedTime());
            record.setStoreID(invoice.getStoreID());
            record.setPosID(invoice.getPosID());
            record.setCustomerType(invoice.getCustomerType());
            record.setPaymentMethod(invoice.getPaymentMethod());
            record.setDeliveryType(invoice.getDeliveryType());
            record.setItemCode(i.getItemCode());
            record.setItemDescription(i.getItemDescription());
            record.setItemPrice(i.getItemPrice());
            record.setItemQty(i.getItemQty());
            record.setTotalValue(i.getTotalValue());
            if (invoice.getDeliveryType().toString().equalsIgnoreCase("HOME-DELIVERY")) {
                record.setCity(invoice.getDeliveryAddress().getCity());
                record.setState(invoice.getDeliveryAddress().getState());
                record.setPinCode(invoice.getDeliveryAddress().getPinCode());
            }
            records.add(record);
        }
        return records;
    }
}


10. Kafka-GlobalKTableJoin

pom.xml
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.4.2</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.pack</groupId>
	<artifactId>Kafka-GlobalKTableJoin</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>Kafka-GlobalKTableJoin</name>
	<description>Demo project for Spring Boot</description>
	<properties>
		<java.version>11</java.version>
		<spring-cloud.version>Hoxton.SR9</spring-cloud.version>
	</properties>
	<dependencies>
		<dependency>
			<groupId>org.apache.kafka</groupId>
			<artifactId>kafka-streams</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-stream</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-stream-binder-kafka-streams</artifactId>
		</dependency>

		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-stream</artifactId>
			<scope>test</scope>
			<classifier>test-binder</classifier>
			<type>test-jar</type>
		</dependency>
	</dependencies>
	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-dependencies</artifactId>
				<version>${spring-cloud.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<configuration>
					<excludes>
						<exclude>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok</artifactId>
						</exclude>
					</excludes>
				</configuration>
			</plugin>
		</plugins>
	</build>
	<repositories>
		<repository>
			<id>spring-milestones</id>
			<name>Spring Milestones</name>
			<url>https://repo.spring.io/milestone</url>
		</repository>
	</repositories>

</project>


application.yml
spring:
  cloud:
    stream:
      bindings:
        inventories-channel:
          destination: active-inventories
        clicks-channel:
          destination: ad-clicks
      kafka:
        streams:
          binder:
            brokers:  localhost:9092
            configuration:
              commit.interval.ms: 10000
              state.dir: state-store
              default:
                key:
                  serde: org.apache.kafka.common.serialization.Serdes$StringSerde
                value:
                  serde: org.apache.kafka.common.serialization.Serdes$StringSerde


ClicksListenerBinding.java
package com.pack.KafkaGlobalKTableJoin.binding;


import org.apache.kafka.streams.kstream.GlobalKTable;
import org.apache.kafka.streams.kstream.KStream;
import org.springframework.cloud.stream.annotation.Input;

import com.pack.KafkaGlobalKTableJoin.model.AdClick;
import com.pack.KafkaGlobalKTableJoin.model.AdInventories;

public interface ClicksListenerBinding {

    @Input("inventories-channel")
    GlobalKTable<String, AdInventories> inventoryInputStream();

    @Input("clicks-channel")
    KStream<String, AdClick> clickInputStream();

}

AdClick.java

package com.pack.KafkaGlobalKTableJoin.model;

import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.Data;

@Data
public class AdClick {

    @JsonProperty("InventoryID")
    private String inventoryID;

}

AdInventories.java

package com.pack.KafkaGlobalKTableJoin.model;

import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.Data;

@Data
public class AdInventories {

    @JsonProperty("InventoryID")
    private String inventoryID;
    @JsonProperty("NewsType")
    private String newsType;

}


ClickListenerService.java
package com.pack.KafkaGlobalKTableJoin.service;


import org.apache.kafka.common.serialization.Serdes;
import org.apache.kafka.streams.kstream.GlobalKTable;
import org.apache.kafka.streams.kstream.Grouped;
import org.apache.kafka.streams.kstream.KStream;
import org.springframework.cloud.stream.annotation.EnableBinding;
import org.springframework.cloud.stream.annotation.Input;
import org.springframework.cloud.stream.annotation.StreamListener;
import org.springframework.kafka.support.serializer.JsonSerde;
import org.springframework.stereotype.Service;

import com.pack.KafkaGlobalKTableJoin.binding.ClicksListenerBinding;
import com.pack.KafkaGlobalKTableJoin.model.AdClick;
import com.pack.KafkaGlobalKTableJoin.model.AdInventories;

import lombok.extern.log4j.Log4j2;

@Log4j2
@Service
@EnableBinding(ClicksListenerBinding.class)
public class ClickListenerService {

    @StreamListener
    public void process(@Input("inventories-channel") GlobalKTable<String, AdInventories> inventory,
                        @Input("clicks-channel") KStream<String, AdClick> click) {

        click.foreach((k, v) -> log.info("Click Key: {}, Value: {}",k, v));

        click.join(inventory,
                (clickKey, clickValue) -> clickKey,
                (clickValue, inventoryValue) -> inventoryValue)
                .groupBy((joinedKey, joinedValue) -> joinedValue.getNewsType(),
                        Grouped.with(Serdes.String(),
                                new JsonSerde<>(AdInventories.class)))
                .count()
                .toStream()
                .foreach((k, v) -> log.info("Click Key: {}, Value: {}",k, v));
    }
}


11. KafkaInvoiceGenerator

pom.xml
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.7.3</version>
		<relativePath /> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.pack</groupId>
	<artifactId>KafkaInvoiceGenerator</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>KafkaInvoiceGenerator</name>
	<description>Demo project for Spring Boot</description>
	<properties>
		<java.version>11</java.version>
	</properties>
	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.kafka</groupId>
			<artifactId>spring-kafka</artifactId>
		</dependency>
		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-databind</artifactId>
			<version>2.13.4</version>
		</dependency>
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.kafka</groupId>
			<artifactId>spring-kafka-test</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<configuration>
					<excludes>
						<exclude>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok</artifactId>
						</exclude>
					</excludes>
				</configuration>
			</plugin>
		</plugins>
	</build>

</project>


application.yml
spring:
   kafka:
      producer:
         client-id: json-pos-simulator
         bootstrap-servers: localhost:9092
         key-serializer: org.apache.kafka.common.serialization.StringSerializer
         value-serializer: org.springframework.kafka.support.serializer.JsonSerializer 
         properties:
           spring.json.add.type.headers: false 

#The above configuration is for JsonSerializer, by default, the JsonSerializer includes the type information to the message header. We do not want the serializer to include the type info and cause a problem at the time of deserialization 

application:
   configs:
      invoice.count: 60
      topic.name: pos-topic
-----------------------------------------

Inside src/main/resources/data folder
address.json

[
    {
        "AddressLine": "HN. 535, 4472 Eu St.",
        "City": "Katihar",
        "State": "Bihar",
        "PinCode": "867820",
        "ContactNumber": ""
    },
    {
        "AddressLine": "7418 Dolor St.",
        "City": "Nagpur",
        "State": "Maharastra",
        "PinCode": "710782",
        "ContactNumber": ""
    },
    {
        "AddressLine": "HN. 821, 8267 Dapibus Av.",
        "City": "Kolkata",
        "State": "West Bengal",
        "PinCode": "701624",
        "ContactNumber": ""
    },
    {
        "AddressLine": "773 Eu Ave",
        "City": "Sitapur",
        "State": "Uttar Pradesh",
        "PinCode": "431667",
        "ContactNumber": "9934440762"
    },
    {
        "AddressLine": "7409 Laoreet Rd.",
        "City": "Jammu",
        "State": "Jammu and Kashmir",
        "PinCode": "697806",
        "ContactNumber": "8335722151"
    },
    {
        "AddressLine": "7114 Eu, Rd.",
        "City": "Ratlam",
        "State": "Madhya Pradesh",
        "PinCode": "925281",
        "ContactNumber": "4057182350"
    },
    {
        "AddressLine": "Flat No. #658-8929 Arcu Rd.",
        "City": "Guna",
        "State": "Madhya Pradesh",
        "PinCode": "555836",
        "ContactNumber": "5015943575"
    },
    {
        "AddressLine": "291-4367 Aliquam St.",
        "City": "Pali",
        "State": "Rajasthan",
        "PinCode": "906511",
        "ContactNumber": "7544884134"
    },
    {
        "AddressLine": "Flat No. #396-1703 Ullamcorper, Street",
        "City": "Hassan",
        "State": "Karnataka",
        "PinCode": "701126",
        "ContactNumber": "1157976639"
    },
    {
        "AddressLine": "House No 847, 2219 Donec St.",
        "City": "Adoni",
        "State": "Andhra Pradesh",
        "PinCode": "187597",
        "ContactNumber": "4515437963"
    },
    {
        "AddressLine": "Flat No. #325-2029 Ac, Ave",
        "City": "Agra",
        "State": "Uttar Pradesh",
        "PinCode": "556412",
        "ContactNumber": "2844494619"
    },
    {
        "AddressLine": "249-7358 Nec St.",
        "City": "Jaipur",
        "State": "Rajasthan",
        "PinCode": "326647",
        "ContactNumber": "4455040114"
    },
    {
        "AddressLine": "6549 Ac, Ave",
        "City": "Ramagundam",
        "State": "Andhra Pradesh",
        "PinCode": "699979",
        "ContactNumber": "2758430969"
    },
    {
        "AddressLine": "House No 727, 9696 Ullamcorper, Road",
        "City": "Dabgram",
        "State": "West Bengal",
        "PinCode": "953658",
        "ContactNumber": "4166559042"
    },
    {
        "AddressLine": "House No 703, 9601 Aliquam Av.",
        "City": "Arrah",
        "State": "Bihar",
        "PinCode": "732227",
        "ContactNumber": "6382741027"
    },
    {
        "AddressLine": "Flat No. #229-5133 Quam. Road",
        "City": "Haridwar",
        "State": "Uttarakhand",
        "PinCode": "478334",
        "ContactNumber": "8593433887"
    },
    {
        "AddressLine": "611-1753 Etiam Avenue",
        "City": "Nagaon",
        "State": "Assam",
        "PinCode": "935500",
        "ContactNumber": "3398236143"
    },
    {
        "AddressLine": "3122 Morbi Ave",
        "City": "Palakkad",
        "State": "Kerala",
        "PinCode": "800459",
        "ContactNumber": "8235927974"
    },
    {
        "AddressLine": "5930 Aliquam Street",
        "City": "Chhindwara",
        "State": "Madhya Pradesh",
        "PinCode": "724661",
        "ContactNumber": "2141075027"
    },
    {
        "AddressLine": "House No 416, 8652 Sodales Rd.",
        "City": "Mathura",
        "State": "Uttar Pradesh",
        "PinCode": "148055",
        "ContactNumber": "8645000577"
    },
    {
        "AddressLine": "8612 Non Rd.",
        "City": "Guna",
        "State": "Madhya Pradesh",
        "PinCode": "210683",
        "ContactNumber": "8336980338"
    },
    {
        "AddressLine": "295-7690 At Street",
        "City": "Shahjahanpur",
        "State": "Uttar Pradesh",
        "PinCode": "228410",
        "ContactNumber": "4624129756"
    },
    {
        "AddressLine": "House No 638, 4720 Nisi Road",
        "City": "Madurai",
        "State": "Tamil Nadu",
        "PinCode": "754286",
        "ContactNumber": "5741337087"
    },
    {
        "AddressLine": "706-3622 Pharetra Av.",
        "City": "Serampore",
        "State": "West Bengal",
        "PinCode": "266237",
        "ContactNumber": "8034395531"
    },
    {
        "AddressLine": "6363 Non Rd.",
        "City": "Darbhanga",
        "State": "Bihar",
        "PinCode": "570288",
        "ContactNumber": "5656699770"
    },
    {
        "AddressLine": "853-9772 Enim, Avenue",
        "City": "Allappuzha",
        "State": "Kerala",
        "PinCode": "140312",
        "ContactNumber": "5528409181"
    },
    {
        "AddressLine": "Flat No. #773-5039 Lacinia Road",
        "City": "Gudivada",
        "State": "Andhra Pradesh",
        "PinCode": "553874",
        "ContactNumber": "6772227684"
    },
    {
        "AddressLine": "Flat No. #753-706 Molestie Av.",
        "City": "North Barrackpur",
        "State": "West Bengal",
        "PinCode": "925233",
        "ContactNumber": "8615470547"
    },
    {
        "AddressLine": "Flat No. #794-4263 Tempor St.",
        "City": "Shivapuri",
        "State": "Madhya Pradesh",
        "PinCode": "563047",
        "ContactNumber": "6403786002"
    },
    {
        "AddressLine": "House No 786, 3820 Luctus Av.",
        "City": "Ambala Sadar",
        "State": "Haryana",
        "PinCode": "536057",
        "ContactNumber": "7336393163"
    },
    {
        "AddressLine": "1852 Est St.",
        "City": "Imphal",
        "State": "Manipur",
        "PinCode": "120023",
        "ContactNumber": "6124913142"
    },
    {
        "AddressLine": "7697 Sed, Road",
        "City": "Tiruvottiyur",
        "State": "Tamil Nadu",
        "PinCode": "819925",
        "ContactNumber": "6282658715"
    },
    {
        "AddressLine": "House No 735, 8148 Eu St.",
        "City": "Bahraich",
        "State": "Uttar Pradesh",
        "PinCode": "977360",
        "ContactNumber": "5692615243"
    },
    {
        "AddressLine": "9728 Ac Ave",
        "City": "Gonda",
        "State": "Uttar Pradesh",
        "PinCode": "468305",
        "ContactNumber": "8482561251"
    },
    {
        "AddressLine": "Flat No. #570-3269 Adipiscing, Rd.",
        "City": "Chapra",
        "State": "Bihar",
        "PinCode": "257573",
        "ContactNumber": "1799428172"
    },
    {
        "AddressLine": "Flat No. #420-9203 Pretium Street",
        "City": "Dehri",
        "State": "Bihar",
        "PinCode": "392400",
        "ContactNumber": "3841876454"
    },
    {
        "AddressLine": "Flat No. #335-7984 Senectus Rd.",
        "City": "Pali",
        "State": "Rajasthan",
        "PinCode": "900530",
        "ContactNumber": "6125618251"
    },
    {
        "AddressLine": "393-5141 Enim. Ave",
        "City": "Surendranagar",
        "State": "Gujarat",
        "PinCode": "209008",
        "ContactNumber": "8862122529"
    },
    {
        "AddressLine": "2465 Laoreet, Street",
        "City": "Dehri",
        "State": "Bihar",
        "PinCode": "637308",
        "ContactNumber": "2662305605"
    },
    {
        "AddressLine": "467-7967 Volutpat Ave",
        "City": "Jodhpur",
        "State": "Rajasthan",
        "PinCode": "983371",
        "ContactNumber": "6577421741"
    },
    {
        "AddressLine": "644-1102 Quam, Road",
        "City": "Muzaffarnagar",
        "State": "Uttar Pradesh",
        "PinCode": "513402",
        "ContactNumber": "7979432420"
    },
    {
        "AddressLine": "House No 712, 4763 Turpis Street",
        "City": "Pune",
        "State": "Maharastra",
        "PinCode": "551272",
        "ContactNumber": "3419930245"
    },
    {
        "AddressLine": "582-5177 Suscipit Rd.",
        "City": "Patna",
        "State": "Bihar",
        "PinCode": "530094",
        "ContactNumber": "1158759250"
    },
    {
        "AddressLine": "House No 424, 5509 Ut Street",
        "City": "Ganganagar",
        "State": "Rajasthan",
        "PinCode": "692405",
        "ContactNumber": "8395635840"
    },
    {
        "AddressLine": "House No 953, 785 Viverra. Street",
        "City": "Hathras",
        "State": "Uttar Pradesh",
        "PinCode": "973613",
        "ContactNumber": "3242686167"
    },
    {
        "AddressLine": "265-1062 Sapien. Road",
        "City": "Murwara",
        "State": "Madhya Pradesh",
        "PinCode": "894885",
        "ContactNumber": "2503052325"
    },
    {
        "AddressLine": "Flat No. #338-5510 Justo. Av.",
        "City": "Puri",
        "State": "Odisha",
        "PinCode": "127980",
        "ContactNumber": "9686763415"
    },
    {
        "AddressLine": "House No 992, 8003 In Rd.",
        "City": "Dehradun",
        "State": "Uttarakhand",
        "PinCode": "425528",
        "ContactNumber": "9875104847"
    },
    {
        "AddressLine": "1407 Auctor, St.",
        "City": "Ichalkaranji",
        "State": "Maharastra",
        "PinCode": "115863",
        "ContactNumber": "2598303301"
    },
    {
        "AddressLine": "715-449 Arcu. Rd.",
        "City": "Delhi",
        "State": "Delhi",
        "PinCode": "338019",
        "ContactNumber": "5994731583"
    },
    {
        "AddressLine": "House No 556, 2384 Libero. Rd.",
        "City": "Banda",
        "State": "Uttar Pradesh",
        "PinCode": "767511",
        "ContactNumber": "9801318492"
    },
    {
        "AddressLine": "Flat No. #740-6953 Scelerisque Rd.",
        "City": "Mango",
        "State": "Jharkhand",
        "PinCode": "697196",
        "ContactNumber": "7172289826"
    },
    {
        "AddressLine": "Flat No. #210-902 Neque Street",
        "City": "South Dum Dum",
        "State": "West Bengal",
        "PinCode": "504795",
        "ContactNumber": "7508353683"
    },
    {
        "AddressLine": "Flat No. #741-3157 Metus Av.",
        "City": "Delhi",
        "State": "Delhi",
        "PinCode": "495095",
        "ContactNumber": "7097939373"
    },
    {
        "AddressLine": "7711 Ac Avenue",
        "City": "Raigarh",
        "State": "Chhattisgarh",
        "PinCode": "282126",
        "ContactNumber": "1952031107"
    },
    {
        "AddressLine": "846-8342 Sollicitudin Road",
        "City": "Allappuzha",
        "State": "Kerala",
        "PinCode": "510771",
        "ContactNumber": "6773875946"
    },
    {
        "AddressLine": "Flat No. #863-3118 Odio Rd.",
        "City": "Mathura",
        "State": "Uttar Pradesh",
        "PinCode": "587393",
        "ContactNumber": "8562646144"
    },
    {
        "AddressLine": "800-9178 Aliquam Street",
        "City": "Karnal",
        "State": "Haryana",
        "PinCode": "132797",
        "ContactNumber": "6883499359"
    },
    {
        "AddressLine": "Flat No. #131-5960 Varius St.",
        "City": "Ongole",
        "State": "Andhra Pradesh",
        "PinCode": "881860",
        "ContactNumber": "6735030289"
    },
    {
        "AddressLine": "3508 Ligula. Rd.",
        "City": "Ahmadnagar",
        "State": "Maharastra",
        "PinCode": "703396",
        "ContactNumber": "9638404068"
    },
    {
        "AddressLine": "Flat No. #316-5621 Laoreet St.",
        "City": "Nellore",
        "State": "Andhra Pradesh",
        "PinCode": "333433",
        "ContactNumber": "5232382321"
    },
    {
        "AddressLine": "House No 383, 4427 Pellentesque Rd.",
        "City": "Bokaro Steel City",
        "State": "Jharkhand",
        "PinCode": "509723",
        "ContactNumber": "1442202063"
    },
    {
        "AddressLine": "6226 Mauris St.",
        "City": "Ingraj Bazar",
        "State": "West Bengal",
        "PinCode": "592487",
        "ContactNumber": "8382307048"
    },
    {
        "AddressLine": "855-4409 Duis Street",
        "City": "Junagadh",
        "State": "Gujarat",
        "PinCode": "622745",
        "ContactNumber": "6984835508"
    },
    {
        "AddressLine": "735-1235 Pretium Street",
        "City": "Unnao",
        "State": "Uttar Pradesh",
        "PinCode": "103540",
        "ContactNumber": "4331966638"
    },
    {
        "AddressLine": "7319 Nunc Ave",
        "City": "Muzaffarpur",
        "State": "Bihar",
        "PinCode": "760765",
        "ContactNumber": "7586450222"
    },
    {
        "AddressLine": "House No 989, 5810 Nulla Av.",
        "City": "Ashoknagar-Kalyangarh",
        "State": "West Bengal",
        "PinCode": "561119",
        "ContactNumber": "9838697111"
    },
    {
        "AddressLine": "233-9672 Pharetra. Rd.",
        "City": "Kanpur Cantonment",
        "State": "Uttar Pradesh",
        "PinCode": "832089",
        "ContactNumber": "8675203394"
    },
    {
        "AddressLine": "529-4520 Libero. Ave",
        "City": "Raigarh",
        "State": "Chhattisgarh",
        "PinCode": "183678",
        "ContactNumber": "3057906681"
    },
    {
        "AddressLine": "House No 936, 3362 Vehicula Ave",
        "City": "Serampore",
        "State": "West Bengal",
        "PinCode": "367103",
        "ContactNumber": "2614588263"
    },
    {
        "AddressLine": "House No 695, 9930 A, St.",
        "City": "Hassan",
        "State": "Karnataka",
        "PinCode": "277874",
        "ContactNumber": "4013626333"
    },
    {
        "AddressLine": "Flat No. #735-431 Gravida. St.",
        "City": "Chapra",
        "State": "Bihar",
        "PinCode": "386153",
        "ContactNumber": "2004897617"
    },
    {
        "AddressLine": "488-2166 Class St.",
        "City": "Bellary",
        "State": "Karnataka",
        "PinCode": "831105",
        "ContactNumber": "4355640111"
    },
    {
        "AddressLine": "Flat No. #736-9947 Et Av.",
        "City": "Sambalpur",
        "State": "Odisha",
        "PinCode": "979906",
        "ContactNumber": "9196326946"
    },
    {
        "AddressLine": "444-1842 Dui. Rd.",
        "City": "Shivapuri",
        "State": "Madhya Pradesh",
        "PinCode": "561012",
        "ContactNumber": "7243866404"
    },
    {
        "AddressLine": "2923 Sollicitudin Road",
        "City": "Secunderabad",
        "State": "Andhra Pradesh",
        "PinCode": "382673",
        "ContactNumber": "3685997991"
    },
    {
        "AddressLine": "517-8912 Nulla St.",
        "City": "Champdani",
        "State": "West Bengal",
        "PinCode": "680616",
        "ContactNumber": "8183195143"
    },
    {
        "AddressLine": "5418 Magna. Rd.",
        "City": "Chennai",
        "State": "Tamil Nadu",
        "PinCode": "386032",
        "ContactNumber": "6557358508"
    },
    {
        "AddressLine": "548-8023 Vulputate, Rd.",
        "City": "Gonda",
        "State": "Uttar Pradesh",
        "PinCode": "945821",
        "ContactNumber": "2509549312"
    },
    {
        "AddressLine": "House No 235, 5674 Vitae Street",
        "City": "Chapra",
        "State": "Bihar",
        "PinCode": "201938",
        "ContactNumber": "4051146489"
    },
    {
        "AddressLine": "House No 740, 6689 Tempor Av.",
        "City": "Bharatpur",
        "State": "Rajasthan",
        "PinCode": "932264",
        "ContactNumber": "8563079826"
    },
    {
        "AddressLine": "House No 534, 9974 Rutrum Av.",
        "City": "Bellary",
        "State": "Karnataka",
        "PinCode": "761574",
        "ContactNumber": "7652091989"
    },
    {
        "AddressLine": "Flat No. #378-6117 Nulla Rd.",
        "City": "Mandasor",
        "State": "Madhya Pradesh",
        "PinCode": "975340",
        "ContactNumber": "9006343802"
    },
    {
        "AddressLine": "7947 Mauris, Av.",
        "City": "Tambaram",
        "State": "Tamil Nadu",
        "PinCode": "339533",
        "ContactNumber": "5898142373"
    },
    {
        "AddressLine": "Flat No. #296-6151 Neque Road",
        "City": "Varanasi",
        "State": "Uttar Pradesh",
        "PinCode": "340397",
        "ContactNumber": "9083194560"
    },
    {
        "AddressLine": "Flat No. #879-8630 Sed Road",
        "City": "Vijayawada",
        "State": "Andhra Pradesh",
        "PinCode": "824631",
        "ContactNumber": "2805327045"
    },
    {
        "AddressLine": "Flat No. #398-2797 A Rd.",
        "City": "Sikar",
        "State": "Rajasthan",
        "PinCode": "660265",
        "ContactNumber": "1131794401"
    },
    {
        "AddressLine": "House No 471, 2701 Purus, Rd.",
        "City": "Faridabad",
        "State": "Haryana",
        "PinCode": "121303",
        "ContactNumber": "4452007276"
    },
    {
        "AddressLine": "House No 639, 1344 Nisl St.",
        "City": "Farrukhabad-cum-Fatehgarh",
        "State": "Uttar Pradesh",
        "PinCode": "481405",
        "ContactNumber": "5281218896"
    },
    {
        "AddressLine": "House No 400, 2541 Lacus Street",
        "City": "Alandur",
        "State": "Tamil Nadu",
        "PinCode": "919471",
        "ContactNumber": "3677519188"
    },
    {
        "AddressLine": "627-5294 Nisi St.",
        "City": "Hyderabad",
        "State": "Andhra Pradesh",
        "PinCode": "827202",
        "ContactNumber": "7553553297"
    },
    {
        "AddressLine": "691-6564 Lacinia Rd.",
        "City": "Arrah",
        "State": "Bihar",
        "PinCode": "380536",
        "ContactNumber": "1115912385"
    },
    {
        "AddressLine": "House No 240, 7563 Vel Rd.",
        "City": "Rishra",
        "State": "West Bengal",
        "PinCode": "201130",
        "ContactNumber": "2828547194"
    },
    {
        "AddressLine": "Flat No. #245-5336 Nibh. Av.",
        "City": "Jammu",
        "State": "Jammu and Kashmir",
        "PinCode": "114809",
        "ContactNumber": "9836944618"
    },
    {
        "AddressLine": "3474 Nam Rd.",
        "City": "Mangalore",
        "State": "Karnataka",
        "PinCode": "164228",
        "ContactNumber": "6528245422"
    },
    {
        "AddressLine": "Flat No. #527-9373 At Rd.",
        "City": "South Dum Dum",
        "State": "West Bengal",
        "PinCode": "138781",
        "ContactNumber": "2356382980"
    },
    {
        "AddressLine": "Flat No. #630-2414 Enim. St.",
        "City": "Satna",
        "State": "Madhya Pradesh",
        "PinCode": "991102",
        "ContactNumber": "8931080189"
    },
    {
        "AddressLine": "567-3331 In St.",
        "City": "Cuddalore",
        "State": "Tamil Nadu",
        "PinCode": "813558",
        "ContactNumber": "3549212065"
    },
    {
        "AddressLine": "9606 Integer Ave",
        "City": "Multan",
        "State": "Punjab",
        "PinCode": "491357",
        "ContactNumber": "7979421441"
    },
    {
        "AddressLine": "Flat No. #174-7165 Magna, Street",
        "City": "Eluru",
        "State": "Andhra Pradesh",
        "PinCode": "356811",
        "ContactNumber": "4117163673"
    }
]

Invoice.json
[
	{
		"InvoiceNumber": 0,
		"CreatedTime": "0",
		"StoreID": "STR1534",
		"PosID": "POS364",
		"CashierID": "OAS898",
		"CustomerType": "NONPRIME",
		"CustomerCardNo": "3006055636",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CASH",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "HOME-DELIVERY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": "0",
		"StoreID": "STR1534",
		"PosID": "POS135",
		"CashierID": "OAS285",
		"CustomerType": "PRIME",
		"CustomerCardNo": "5582740626",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CARD",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "TAKEAWAY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": "0",
		"StoreID": "STR1534",
		"PosID": "POS934",
		"CashierID": "OAS544",
		"CustomerType": "PRIME",
		"CustomerCardNo": "5525406429",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CASH",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "TAKEAWAY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": "0",
		"StoreID": "STR1534",
		"PosID": "POS944",
		"CashierID": "OAS994",
		"CustomerType": "NONPRIME",
		"CustomerCardNo": "2968880358",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CASH",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "HOME-DELIVERY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": "0",
		"StoreID": "STR1534",
		"PosID": "POS151",
		"CashierID": "OAS177",
		"CustomerType": "NONPRIME",
		"CustomerCardNo": "7061658033",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CASH",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "HOME-DELIVERY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": "0",
		"StoreID": "STR1955",
		"PosID": "POS992",
		"CashierID": "OAS521",
		"CustomerType": "NONPRIME",
		"CustomerCardNo": "1482417862",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CASH",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "TAKEAWAY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": "0",
		"StoreID": "STR1955",
		"PosID": "POS324",
		"CashierID": "OAS183",
		"CustomerType": "NONPRIME",
		"CustomerCardNo": "3916555911",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CASH",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "HOME-DELIVERY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": "0",
		"StoreID": "STR1955",
		"PosID": "POS769",
		"CashierID": "OAS996",
		"CustomerType": "PRIME",
		"CustomerCardNo": "8154556937",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CARD",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "HOME-DELIVERY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": "0",
		"StoreID": "STR1955",
		"PosID": "POS837",
		"CashierID": "OAS861",
		"CustomerType": "NONPRIME",
		"CustomerCardNo": "7136581152",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CASH",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "HOME-DELIVERY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": "0",
		"StoreID": "STR1955",
		"PosID": "POS493",
		"CashierID": "OAS769",
		"CustomerType": "PRIME",
		"CustomerCardNo": "4405006483",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CARD",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "TAKEAWAY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": "0",
		"StoreID": "STR2629",
		"PosID": "POS768",
		"CashierID": "OAS282",
		"CustomerType": "NONPRIME",
		"CustomerCardNo": "1360645962",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CARD",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "HOME-DELIVERY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": "0",
		"StoreID": "STR2629",
		"PosID": "POS285",
		"CashierID": "OAS882",
		"CustomerType": "NONPRIME",
		"CustomerCardNo": "6419885098",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CASH",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "TAKEAWAY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": "0",
		"StoreID": "STR2629",
		"PosID": "POS172",
		"CashierID": "OAS622",
		"CustomerType": "NONPRIME",
		"CustomerCardNo": "7829975914",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CASH",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "HOME-DELIVERY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": "0",
		"StoreID": "STR2629",
		"PosID": "POS647",
		"CashierID": "OAS515",
		"CustomerType": "PRIME",
		"CustomerCardNo": "1053863739",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CASH",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "TAKEAWAY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": "0",
		"StoreID": "STR2629",
		"PosID": "POS253",
		"CashierID": "OAS737",
		"CustomerType": "NONPRIME",
		"CustomerCardNo": "2461788838",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CARD",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "HOME-DELIVERY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": "0",
		"StoreID": "STR2699",
		"PosID": "POS832",
		"CashierID": "OAS496",
		"CustomerType": "NONPRIME",
		"CustomerCardNo": "4552039054",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CASH",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "HOME-DELIVERY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": "0",
		"StoreID": "STR2699",
		"PosID": "POS792",
		"CashierID": "OAS152",
		"CustomerType": "PRIME",
		"CustomerCardNo": "7475384243",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CASH",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "HOME-DELIVERY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": "0",
		"StoreID": "STR2699",
		"PosID": "POS773",
		"CashierID": "OAS568",
		"CustomerType": "NONPRIME",
		"CustomerCardNo": "9327106277",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CASH",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "TAKEAWAY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": "0",
		"StoreID": "STR2699",
		"PosID": "POS779",
		"CashierID": "OAS161",
		"CustomerType": "PRIME",
		"CustomerCardNo": "6797767929",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CASH",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "HOME-DELIVERY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": "0",
		"StoreID": "STR2699",
		"PosID": "POS566",
		"CashierID": "OAS318",
		"CustomerType": "PRIME",
		"CustomerCardNo": "7543202868",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CARD",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "HOME-DELIVERY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": "0",
		"StoreID": "STR2952",
		"PosID": "POS152",
		"CashierID": "OAS329",
		"CustomerType": "PRIME",
		"CustomerCardNo": "3027514652",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CASH",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "TAKEAWAY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": "0",
		"StoreID": "STR2952",
		"PosID": "POS351",
		"CashierID": "OAS841",
		"CustomerType": "NONPRIME",
		"CustomerCardNo": "2024774071",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CASH",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "HOME-DELIVERY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": "0",
		"StoreID": "STR2952",
		"PosID": "POS477",
		"CashierID": "OAS259",
		"CustomerType": "NONPRIME",
		"CustomerCardNo": "3425633108",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CASH",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "TAKEAWAY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": "0",
		"StoreID": "STR2952",
		"PosID": "POS471",
		"CashierID": "OAS936",
		"CustomerType": "NONPRIME",
		"CustomerCardNo": "9741556539",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CASH",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "TAKEAWAY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": "0",
		"StoreID": "STR2952",
		"PosID": "POS663",
		"CashierID": "OAS444",
		"CustomerType": "NONPRIME",
		"CustomerCardNo": "7928716562",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CASH",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "HOME-DELIVERY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": "0",
		"StoreID": "STR3781",
		"PosID": "POS843",
		"CashierID": "OAS685",
		"CustomerType": "NONPRIME",
		"CustomerCardNo": "1191112820",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CARD",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "HOME-DELIVERY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": "0",
		"StoreID": "STR3781",
		"PosID": "POS444",
		"CashierID": "OAS935",
		"CustomerType": "NONPRIME",
		"CustomerCardNo": "9223558893",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CASH",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "TAKEAWAY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": "0",
		"StoreID": "STR3781",
		"PosID": "POS129",
		"CashierID": "OAS311",
		"CustomerType": "PRIME",
		"CustomerCardNo": "4692642935",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CASH",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "HOME-DELIVERY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": "0",
		"StoreID": "STR3781",
		"PosID": "POS494",
		"CashierID": "OAS377",
		"CustomerType": "PRIME",
		"CustomerCardNo": "7892154732",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CARD",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "HOME-DELIVERY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": "0",
		"StoreID": "STR3781",
		"PosID": "POS978",
		"CashierID": "OAS981",
		"CustomerType": "NONPRIME",
		"CustomerCardNo": "6244229107",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CARD",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "TAKEAWAY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": "0",
		"StoreID": "STR4899",
		"PosID": "POS584",
		"CashierID": "OAS452",
		"CustomerType": "NONPRIME",
		"CustomerCardNo": "2502121621",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CASH",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "HOME-DELIVERY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": "0",
		"StoreID": "STR4899",
		"PosID": "POS447",
		"CashierID": "OAS729",
		"CustomerType": "NONPRIME",
		"CustomerCardNo": "5576072500",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CARD",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "TAKEAWAY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": "0",
		"StoreID": "STR4899",
		"PosID": "POS441",
		"CashierID": "OAS487",
		"CustomerType": "NONPRIME",
		"CustomerCardNo": "4227803954",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CASH",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "TAKEAWAY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": "0",
		"StoreID": "STR4899",
		"PosID": "POS799",
		"CashierID": "OAS145",
		"CustomerType": "PRIME",
		"CustomerCardNo": "2325763742",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CASH",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "HOME-DELIVERY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": "0",
		"StoreID": "STR4899",
		"PosID": "POS954",
		"CashierID": "OAS151",
		"CustomerType": "NONPRIME",
		"CustomerCardNo": "3716602332",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CASH",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "HOME-DELIVERY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": "0",
		"StoreID": "STR5494",
		"PosID": "POS384",
		"CashierID": "OAS398",
		"CustomerType": "NONPRIME",
		"CustomerCardNo": "6048272250",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CARD",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "HOME-DELIVERY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": "0",
		"StoreID": "STR5494",
		"PosID": "POS121",
		"CashierID": "OAS237",
		"CustomerType": "PRIME",
		"CustomerCardNo": "9509332022",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CARD",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "TAKEAWAY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": "0",
		"StoreID": "STR5494",
		"PosID": "POS353",
		"CashierID": "OAS969",
		"CustomerType": "NONPRIME",
		"CustomerCardNo": "8189067868",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CASH",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "TAKEAWAY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": "0",
		"StoreID": "STR5494",
		"PosID": "POS759",
		"CashierID": "OAS796",
		"CustomerType": "NONPRIME",
		"CustomerCardNo": "4937932830",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CARD",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "HOME-DELIVERY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": "0",
		"StoreID": "STR5494",
		"PosID": "POS722",
		"CashierID": "OAS576",
		"CustomerType": "PRIME",
		"CustomerCardNo": "9724245321",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CASH",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "HOME-DELIVERY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": "0",
		"StoreID": "STR5646",
		"PosID": "POS968",
		"CashierID": "OAS689",
		"CustomerType": "PRIME",
		"CustomerCardNo": "2220404140",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CASH",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "HOME-DELIVERY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": "0",
		"StoreID": "STR5646",
		"PosID": "POS639",
		"CashierID": "OAS167",
		"CustomerType": "PRIME",
		"CustomerCardNo": "9711257112",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CARD",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "HOME-DELIVERY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": "0",
		"StoreID": "STR5646",
		"PosID": "POS624",
		"CashierID": "OAS196",
		"CustomerType": "PRIME",
		"CustomerCardNo": "8109010950",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CASH",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "TAKEAWAY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": "0",
		"StoreID": "STR5646",
		"PosID": "POS212",
		"CashierID": "OAS284",
		"CustomerType": "NONPRIME",
		"CustomerCardNo": "4226427254",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CARD",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "HOME-DELIVERY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": "0",
		"StoreID": "STR5646",
		"PosID": "POS543",
		"CashierID": "OAS921",
		"CustomerType": "NONPRIME",
		"CustomerCardNo": "5947487902",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CARD",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "HOME-DELIVERY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": "0",
		"StoreID": "STR5864",
		"PosID": "POS132",
		"CashierID": "OAS386",
		"CustomerType": "NONPRIME",
		"CustomerCardNo": "6909538460",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CASH",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "HOME-DELIVERY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": "0",
		"StoreID": "STR5864",
		"PosID": "POS945",
		"CashierID": "OAS649",
		"CustomerType": "PRIME",
		"CustomerCardNo": "5305473526",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CARD",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "HOME-DELIVERY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": "0",
		"StoreID": "STR5864",
		"PosID": "POS465",
		"CashierID": "OAS582",
		"CustomerType": "NONPRIME",
		"CustomerCardNo": "1211843745",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CARD",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "TAKEAWAY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": "0",
		"StoreID": "STR5864",
		"PosID": "POS872",
		"CashierID": "OAS287",
		"CustomerType": "PRIME",
		"CustomerCardNo": "7589671731",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CASH",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "HOME-DELIVERY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": "0",
		"StoreID": "STR5864",
		"PosID": "POS878",
		"CashierID": "OAS219",
		"CustomerType": "NONPRIME",
		"CustomerCardNo": "9728415172",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CARD",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "TAKEAWAY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": "0",
		"StoreID": "STR6162",
		"PosID": "POS835",
		"CashierID": "OAS583",
		"CustomerType": "NONPRIME",
		"CustomerCardNo": "5611417583",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CARD",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "TAKEAWAY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": "0",
		"StoreID": "STR6162",
		"PosID": "POS279",
		"CashierID": "OAS964",
		"CustomerType": "PRIME",
		"CustomerCardNo": "2262471989",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CASH",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "HOME-DELIVERY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": "0",
		"StoreID": "STR6162",
		"PosID": "POS987",
		"CashierID": "OAS795",
		"CustomerType": "NONPRIME",
		"CustomerCardNo": "8071065242",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CASH",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "TAKEAWAY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": "0",
		"StoreID": "STR6162",
		"PosID": "POS868",
		"CashierID": "OAS172",
		"CustomerType": "NONPRIME",
		"CustomerCardNo": "9282685191",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CARD",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "HOME-DELIVERY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": "0",
		"StoreID": "STR6162",
		"PosID": "POS431",
		"CashierID": "OAS139",
		"CustomerType": "NONPRIME",
		"CustomerCardNo": "8651346374",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CARD",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "HOME-DELIVERY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": "0",
		"StoreID": "STR6347",
		"PosID": "POS622",
		"CashierID": "OAS793",
		"CustomerType": "PRIME",
		"CustomerCardNo": "5697125813",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CARD",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "HOME-DELIVERY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": "0",
		"StoreID": "STR6347",
		"PosID": "POS927",
		"CashierID": "OAS186",
		"CustomerType": "NONPRIME",
		"CustomerCardNo": "3996109634",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CARD",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "HOME-DELIVERY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": "0",
		"StoreID": "STR6347",
		"PosID": "POS994",
		"CashierID": "OAS274",
		"CustomerType": "PRIME",
		"CustomerCardNo": "6296964163",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CASH",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "TAKEAWAY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": "0",
		"StoreID": "STR6347",
		"PosID": "POS333",
		"CashierID": "OAS697",
		"CustomerType": "NONPRIME",
		"CustomerCardNo": "9740604930",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CARD",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "HOME-DELIVERY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": "0",
		"StoreID": "STR6347",
		"PosID": "POS856",
		"CashierID": "OAS128",
		"CustomerType": "NONPRIME",
		"CustomerCardNo": "5724653917",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CASH",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "TAKEAWAY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": "0",
		"StoreID": "STR6382",
		"PosID": "POS661",
		"CashierID": "OAS597",
		"CustomerType": "PRIME",
		"CustomerCardNo": "7115250228",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CASH",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "TAKEAWAY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": "0",
		"StoreID": "STR6382",
		"PosID": "POS145",
		"CashierID": "OAS872",
		"CustomerType": "PRIME",
		"CustomerCardNo": "6733153948",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CARD",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "HOME-DELIVERY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": "0",
		"StoreID": "STR6382",
		"PosID": "POS265",
		"CashierID": "OAS328",
		"CustomerType": "PRIME",
		"CustomerCardNo": "7908234230",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CASH",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "HOME-DELIVERY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": "0",
		"StoreID": "STR6382",
		"PosID": "POS968",
		"CashierID": "OAS687",
		"CustomerType": "PRIME",
		"CustomerCardNo": "4148565252",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CASH",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "HOME-DELIVERY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": "0",
		"StoreID": "STR6382",
		"PosID": "POS851",
		"CashierID": "OAS351",
		"CustomerType": "NONPRIME",
		"CustomerCardNo": "8110266676",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CARD",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "TAKEAWAY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": "0",
		"StoreID": "STR7188",
		"PosID": "POS682",
		"CashierID": "OAS394",
		"CustomerType": "NONPRIME",
		"CustomerCardNo": "1489226224",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CASH",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "TAKEAWAY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": "0",
		"StoreID": "STR7188",
		"PosID": "POS198",
		"CashierID": "OAS199",
		"CustomerType": "PRIME",
		"CustomerCardNo": "5733357005",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CARD",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "HOME-DELIVERY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": "0",
		"StoreID": "STR7188",
		"PosID": "POS956",
		"CashierID": "OAS134",
		"CustomerType": "PRIME",
		"CustomerCardNo": "4629185211",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CARD",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "TAKEAWAY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": "0",
		"StoreID": "STR7188",
		"PosID": "POS664",
		"CashierID": "OAS971",
		"CustomerType": "PRIME",
		"CustomerCardNo": "9316477281",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CARD",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "HOME-DELIVERY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": "0",
		"StoreID": "STR7188",
		"PosID": "POS825",
		"CashierID": "OAS329",
		"CustomerType": "PRIME",
		"CustomerCardNo": "7051101351",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CASH",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "HOME-DELIVERY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": "0",
		"StoreID": "STR7255",
		"PosID": "POS626",
		"CashierID": "OAS437",
		"CustomerType": "PRIME",
		"CustomerCardNo": "2602353115",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CARD",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "TAKEAWAY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": "0",
		"StoreID": "STR7255",
		"PosID": "POS115",
		"CashierID": "OAS634",
		"CustomerType": "PRIME",
		"CustomerCardNo": "1682244797",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CASH",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "HOME-DELIVERY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": "0",
		"StoreID": "STR7255",
		"PosID": "POS866",
		"CashierID": "OAS244",
		"CustomerType": "PRIME",
		"CustomerCardNo": "5432615113",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CASH",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "TAKEAWAY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": "0",
		"StoreID": "STR7255",
		"PosID": "POS692",
		"CashierID": "OAS812",
		"CustomerType": "NONPRIME",
		"CustomerCardNo": "8891304816",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CASH",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "TAKEAWAY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": "0",
		"StoreID": "STR7255",
		"PosID": "POS738",
		"CashierID": "OAS349",
		"CustomerType": "NONPRIME",
		"CustomerCardNo": "8582181693",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CASH",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "TAKEAWAY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": "0",
		"StoreID": "STR7262",
		"PosID": "POS581",
		"CashierID": "OAS742",
		"CustomerType": "NONPRIME",
		"CustomerCardNo": "6218924818",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CARD",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "TAKEAWAY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": "0",
		"StoreID": "STR7262",
		"PosID": "POS576",
		"CashierID": "OAS819",
		"CustomerType": "NONPRIME",
		"CustomerCardNo": "2016894106",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CARD",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "TAKEAWAY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": "0",
		"StoreID": "STR7262",
		"PosID": "POS664",
		"CashierID": "OAS536",
		"CustomerType": "NONPRIME",
		"CustomerCardNo": "2954913332",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CARD",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "HOME-DELIVERY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": "0",
		"StoreID": "STR7262",
		"PosID": "POS733",
		"CashierID": "OAS959",
		"CustomerType": "PRIME",
		"CustomerCardNo": "1518460232",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CASH",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "TAKEAWAY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": "0",
		"StoreID": "STR7262",
		"PosID": "POS182",
		"CashierID": "OAS538",
		"CustomerType": "PRIME",
		"CustomerCardNo": "5378825053",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CASH",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "HOME-DELIVERY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": "1570745999",
		"StoreID": "STR7443",
		"PosID": "POS411",
		"CashierID": "OAS936",
		"CustomerType": "NONPRIME",
		"CustomerCardNo": "4369698403",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CARD",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "HOME-DELIVERY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": "0",
		"StoreID": "STR7443",
		"PosID": "POS365",
		"CashierID": "OAS845",
		"CustomerType": "PRIME",
		"CustomerCardNo": "8790333340",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CASH",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "HOME-DELIVERY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": "0",
		"StoreID": "STR7443",
		"PosID": "POS394",
		"CashierID": "OAS813",
		"CustomerType": "NONPRIME",
		"CustomerCardNo": "7587821520",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CASH",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "TAKEAWAY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": "0",
		"StoreID": "STR7443",
		"PosID": "POS333",
		"CashierID": "OAS883",
		"CustomerType": "NONPRIME",
		"CustomerCardNo": "5483488802",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CASH",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "HOME-DELIVERY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": "0",
		"StoreID": "STR7443",
		"PosID": "POS388",
		"CashierID": "OAS436",
		"CustomerType": "PRIME",
		"CustomerCardNo": "8714158103",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CASH",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "HOME-DELIVERY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": "0",
		"StoreID": "STR7449",
		"PosID": "POS351",
		"CashierID": "OAS487",
		"CustomerType": "NONPRIME",
		"CustomerCardNo": "9639928743",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CASH",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "TAKEAWAY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": "0",
		"StoreID": "STR7449",
		"PosID": "POS923",
		"CashierID": "OAS748",
		"CustomerType": "NONPRIME",
		"CustomerCardNo": "1422009832",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CARD",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "HOME-DELIVERY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": "0",
		"StoreID": "STR7449",
		"PosID": "POS423",
		"CashierID": "OAS733",
		"CustomerType": "PRIME",
		"CustomerCardNo": "7691699125",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CASH",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "HOME-DELIVERY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": "0",
		"StoreID": "STR7449",
		"PosID": "POS215",
		"CashierID": "OAS663",
		"CustomerType": "PRIME",
		"CustomerCardNo": "3453134392",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CARD",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "HOME-DELIVERY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": "0",
		"StoreID": "STR7449",
		"PosID": "POS728",
		"CashierID": "OAS323",
		"CustomerType": "PRIME",
		"CustomerCardNo": "5301477438",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CASH",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "TAKEAWAY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": "0",
		"StoreID": "STR8311",
		"PosID": "POS975",
		"CashierID": "OAS881",
		"CustomerType": "NONPRIME",
		"CustomerCardNo": "4680751410",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CARD",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "TAKEAWAY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": "0",
		"StoreID": "STR8311",
		"PosID": "POS377",
		"CashierID": "OAS478",
		"CustomerType": "NONPRIME",
		"CustomerCardNo": "8670468851",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CASH",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "TAKEAWAY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": "0",
		"StoreID": "STR8311",
		"PosID": "POS728",
		"CashierID": "OAS852",
		"CustomerType": "PRIME",
		"CustomerCardNo": "8490473378",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CASH",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "HOME-DELIVERY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": "0",
		"StoreID": "STR8311",
		"PosID": "POS935",
		"CashierID": "OAS755",
		"CustomerType": "NONPRIME",
		"CustomerCardNo": "5196911608",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CARD",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "TAKEAWAY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": "0",
		"StoreID": "STR8311",
		"PosID": "POS224",
		"CashierID": "OAS399",
		"CustomerType": "NONPRIME",
		"CustomerCardNo": "2989852024",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CASH",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "TAKEAWAY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": "0",
		"StoreID": "STR8513",
		"PosID": "POS881",
		"CashierID": "OAS354",
		"CustomerType": "NONPRIME",
		"CustomerCardNo": "2599848717",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CARD",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "TAKEAWAY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": "0",
		"StoreID": "STR8513",
		"PosID": "POS155",
		"CashierID": "OAS558",
		"CustomerType": "NONPRIME",
		"CustomerCardNo": "2389018842",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CASH",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "HOME-DELIVERY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": "0",
		"StoreID": "STR8513",
		"PosID": "POS582",
		"CashierID": "OAS212",
		"CustomerType": "PRIME",
		"CustomerCardNo": "6705218300",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CASH",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "TAKEAWAY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": "0",
		"StoreID": "STR8513",
		"PosID": "POS163",
		"CashierID": "OAS961",
		"CustomerType": "PRIME",
		"CustomerCardNo": "2762345282",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CARD",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "HOME-DELIVERY"
	},
	{
		"InvoiceNumber": 0,
		"CreatedTime": "0",
		"StoreID": "STR8513",
		"PosID": "POS311",
		"CashierID": "OAS845",
		"CustomerType": "NONPRIME",
		"CustomerCardNo": "8111613552",
		"TotalAmount": 0,
		"NumberOfItems": 0,
		"PaymentMethod": "CASH",
		"TaxableAmount": 0,
		"CGST": 0,
		"SGST": 0,
		"CESS": 0,
		"DeliveryType": "TAKEAWAY"
	}
]

products.json
[
  {
    "ItemCode": 203,
    "ItemDescription": "Bunk bed",
    "ItemPrice": "1686",
    "ItemQty": 0
  },
  {
    "ItemCode": 208,
    "ItemDescription": "Canopy bed",
    "ItemPrice": "508",
    "ItemQty": 0
  },
  {
    "ItemCode": 213,
    "ItemDescription": "Infant bed",
    "ItemPrice": "1755",
    "ItemQty": 0
  },
  {
    "ItemCode": 218,
    "ItemDescription": "Sofa bed",
    "ItemPrice": "895",
    "ItemQty": 0
  },
  {
    "ItemCode": 223,
    "ItemDescription": "Hammock",
    "ItemPrice": "1210",
    "ItemQty": 0
  },
  {
    "ItemCode": 228,
    "ItemDescription": "Divan",
    "ItemPrice": "1083",
    "ItemQty": 0
  },
  {
    "ItemCode": 233,
    "ItemDescription": "Coffee table",
    "ItemPrice": "1055",
    "ItemQty": 0
  },
  {
    "ItemCode": 238,
    "ItemDescription": "Dining table",
    "ItemPrice": "1582",
    "ItemQty": 0
  },
  {
    "ItemCode": 243,
    "ItemDescription": "Folding table",
    "ItemPrice": "738",
    "ItemQty": 0
  },
  {
    "ItemCode": 248,
    "ItemDescription": "TV tray table",
    "ItemPrice": "1947",
    "ItemQty": 0
  },
  {
    "ItemCode": 253,
    "ItemDescription": "Bathroom cabinet",
    "ItemPrice": "1513",
    "ItemQty": 0
  },
  {
    "ItemCode": 258,
    "ItemDescription": "Closet",
    "ItemPrice": "1687",
    "ItemQty": 0
  },
  {
    "ItemCode": 263,
    "ItemDescription": "Kitchen cabinet",
    "ItemPrice": "1050",
    "ItemQty": 0
  },
  {
    "ItemCode": 268,
    "ItemDescription": "Floating shelf",
    "ItemPrice": "1894",
    "ItemQty": 0
  },
  {
    "ItemCode": 273,
    "ItemDescription": "Bedroom set",
    "ItemPrice": "842",
    "ItemQty": 0
  },
  {
    "ItemCode": 278,
    "ItemDescription": "Dining set",
    "ItemPrice": "1940",
    "ItemQty": 0
  },
  {
    "ItemCode": 283,
    "ItemDescription": "Portable Lamps",
    "ItemPrice": "2236",
    "ItemQty": 0
  },
  {
    "ItemCode": 288,
    "ItemDescription": "Hutch",
    "ItemPrice": "1812",
    "ItemQty": 0
  },
  {
    "ItemCode": 293,
    "ItemDescription": "Bar stool",
    "ItemPrice": "1148",
    "ItemQty": 0
  },
  {
    "ItemCode": 298,
    "ItemDescription": "Bardic chair",
    "ItemPrice": "1649",
    "ItemQty": 0
  },
  {
    "ItemCode": 303,
    "ItemDescription": "Bench",
    "ItemPrice": "2251",
    "ItemQty": 0
  },
  {
    "ItemCode": 308,
    "ItemDescription": "Butterfly chair",
    "ItemPrice": "857",
    "ItemQty": 0
  },
  {
    "ItemCode": 313,
    "ItemDescription": "Brewster Chair",
    "ItemPrice": "2195",
    "ItemQty": 0
  },
  {
    "ItemCode": 318,
    "ItemDescription": "Bofinger chair",
    "ItemPrice": "1119",
    "ItemQty": 0
  },
  {
    "ItemCode": 323,
    "ItemDescription": "Chiavari chair",
    "ItemPrice": "653",
    "ItemQty": 0
  },
  {
    "ItemCode": 328,
    "ItemDescription": "Dining chair",
    "ItemPrice": "1223",
    "ItemQty": 0
  },
  {
    "ItemCode": 333,
    "ItemDescription": "Gaming chair",
    "ItemPrice": "1902",
    "ItemQty": 0
  },
  {
    "ItemCode": 338,
    "ItemDescription": "Kneeling chairs",
    "ItemPrice": "442",
    "ItemQty": 0
  },
  {
    "ItemCode": 343,
    "ItemDescription": "Massage chair",
    "ItemPrice": "1354",
    "ItemQty": 0
  },
  {
    "ItemCode": 348,
    "ItemDescription": "Navy chair",
    "ItemPrice": "1998",
    "ItemQty": 0
  },
  {
    "ItemCode": 353,
    "ItemDescription": "Recliner",
    "ItemPrice": "1585",
    "ItemQty": 0
  },
  {
    "ItemCode": 358,
    "ItemDescription": "Restraint chair",
    "ItemPrice": "1943",
    "ItemQty": 0
  },
  {
    "ItemCode": 363,
    "ItemDescription": "Rocking chair",
    "ItemPrice": "2021",
    "ItemQty": 0
  },
  {
    "ItemCode": 368,
    "ItemDescription": "Stool",
    "ItemPrice": "888",
    "ItemQty": 0
  },
  {
    "ItemCode": 373,
    "ItemDescription": "Latex Mattress",
    "ItemPrice": "1313",
    "ItemQty": 0
  },
  {
    "ItemCode": 378,
    "ItemDescription": "Air Bed",
    "ItemPrice": "2263",
    "ItemQty": 0
  },
  {
    "ItemCode": 383,
    "ItemDescription": "Innerspring Mattress",
    "ItemPrice": "655",
    "ItemQty": 0
  },
  {
    "ItemCode": 388,
    "ItemDescription": "Memory Foam",
    "ItemPrice": "1884",
    "ItemQty": 0
  },
  {
    "ItemCode": 393,
    "ItemDescription": "Hybrid Mattress",
    "ItemPrice": "2217",
    "ItemQty": 0
  },
  {
    "ItemCode": 398,
    "ItemDescription": "Latex Mattress",
    "ItemPrice": "773",
    "ItemQty": 0
  },
  {
    "ItemCode": 403,
    "ItemDescription": "Adjustable Air Mattress",
    "ItemPrice": "1417",
    "ItemQty": 0
  },
  {
    "ItemCode": 408,
    "ItemDescription": "Confidante",
    "ItemPrice": "1242",
    "ItemQty": 0
  },
  {
    "ItemCode": 413,
    "ItemDescription": "Slipcover",
    "ItemPrice": "1896",
    "ItemQty": 0
  },
  {
    "ItemCode": 418,
    "ItemDescription": "Wing chair",
    "ItemPrice": "1431",
    "ItemQty": 0
  },
  {
    "ItemCode": 423,
    "ItemDescription": "Quilt",
    "ItemPrice": "1485",
    "ItemQty": 0
  },
  {
    "ItemCode": 428,
    "ItemDescription": "Cocktail glass",
    "ItemPrice": "1422",
    "ItemQty": 0
  },
  {
    "ItemCode": 433,
    "ItemDescription": "Depression glass",
    "ItemPrice": "1950",
    "ItemQty": 0
  },
  {
    "ItemCode": 438,
    "ItemDescription": "Lead glass",
    "ItemPrice": "2069",
    "ItemQty": 0
  },
  {
    "ItemCode": 443,
    "ItemDescription": "Margarita glass",
    "ItemPrice": "2475",
    "ItemQty": 0
  },
  {
    "ItemCode": 448,
    "ItemDescription": "Martini glass",
    "ItemPrice": "2263",
    "ItemQty": 0
  },
  {
    "ItemCode": 453,
    "ItemDescription": "Shot glass",
    "ItemPrice": "674",
    "ItemQty": 0
  },
  {
    "ItemCode": 458,
    "ItemDescription": "Wine glass",
    "ItemPrice": "1644",
    "ItemQty": 0
  },
  {
    "ItemCode": 463,
    "ItemDescription": "Cookie jars",
    "ItemPrice": "793",
    "ItemQty": 0
  },
  {
    "ItemCode": 468,
    "ItemDescription": "Lunch box",
    "ItemPrice": "1467",
    "ItemQty": 0
  },
  {
    "ItemCode": 473,
    "ItemDescription": "Mason jars",
    "ItemPrice": "1358",
    "ItemQty": 0
  },
  {
    "ItemCode": 478,
    "ItemDescription": "Teapot",
    "ItemPrice": "885",
    "ItemQty": 0
  },
  {
    "ItemCode": 483,
    "ItemDescription": "Teacups and saucers",
    "ItemPrice": "1781",
    "ItemQty": 1
  },
  {
    "ItemCode": 488,
    "ItemDescription": "Bread knife",
    "ItemPrice": "1077",
    "ItemQty": 0
  },
  {
    "ItemCode": 493,
    "ItemDescription": "Boning knife",
    "ItemPrice": "513",
    "ItemQty": 0
  },
  {
    "ItemCode": 498,
    "ItemDescription": "Carving knifes",
    "ItemPrice": "1424",
    "ItemQty": 3
  },
  {
    "ItemCode": 503,
    "ItemDescription": "Chef's knife",
    "ItemPrice": "1973",
    "ItemQty": 0
  },
  {
    "ItemCode": 508,
    "ItemDescription": "Kitchen knife",
    "ItemPrice": "2483",
    "ItemQty": 0
  },
  {
    "ItemCode": 513,
    "ItemDescription": "Flip clock",
    "ItemPrice": "1259",
    "ItemQty": 0
  },
  {
    "ItemCode": 518,
    "ItemDescription": "Hourglass",
    "ItemPrice": "1598",
    "ItemQty": 3
  },
  {
    "ItemCode": 523,
    "ItemDescription": "Oil-lamp clock",
    "ItemPrice": "1371",
    "ItemQty": 0
  },
  {
    "ItemCode": 528,
    "ItemDescription": "Projection clock",
    "ItemPrice": "2365",
    "ItemQty": 0
  },
  {
    "ItemCode": 533,
    "ItemDescription": "Rolling ball clock",
    "ItemPrice": "1651",
    "ItemQty": 0
  },
  {
    "ItemCode": 538,
    "ItemDescription": "Grandmother clock",
    "ItemPrice": "1301",
    "ItemQty": 1
  },
  {
    "ItemCode": 543,
    "ItemDescription": "Lighthouse clock",
    "ItemPrice": "636",
    "ItemQty": 0
  },
  {
    "ItemCode": 548,
    "ItemDescription": "Cartel clock",
    "ItemPrice": "1500",
    "ItemQty": 0
  },
  {
    "ItemCode": 553,
    "ItemDescription": "Banjo clock",
    "ItemPrice": "1651",
    "ItemQty": 0
  },
  {
    "ItemCode": 558,
    "ItemDescription": "Balloon clock",
    "ItemPrice": "1633",
    "ItemQty": 0
  },
  {
    "ItemCode": 563,
    "ItemDescription": "Chiming clock",
    "ItemPrice": "2168",
    "ItemQty": 0
  },
  {
    "ItemCode": 568,
    "ItemDescription": "Pinch Pleated Curtains",
    "ItemPrice": "1718",
    "ItemQty": 0
  },
  {
    "ItemCode": 573,
    "ItemDescription": "Eyelet Curtains",
    "ItemPrice": "642",
    "ItemQty": 0
  },
  {
    "ItemCode": 578,
    "ItemDescription": "Goblet Pleat Curtains",
    "ItemPrice": "1765",
    "ItemQty": 2
  },
  {
    "ItemCode": 583,
    "ItemDescription": "Tab Top Curtains",
    "ItemPrice": "1329",
    "ItemQty": 0
  },
  {
    "ItemCode": 588,
    "ItemDescription": "Sheer Curtains",
    "ItemPrice": "801",
    "ItemQty": 0
  },
  {
    "ItemCode": 593,
    "ItemDescription": "Hanging curtains",
    "ItemPrice": "1896",
    "ItemQty": 0
  },
  {
    "ItemCode": 598,
    "ItemDescription": "Grommet Curtains",
    "ItemPrice": "914",
    "ItemQty": 0
  },
  {
    "ItemCode": 603,
    "ItemDescription": "Sheer Curtains",
    "ItemPrice": "1282",
    "ItemQty": 0
  },
  {
    "ItemCode": 608,
    "ItemDescription": "Pleated Drapes",
    "ItemPrice": "1684",
    "ItemQty": 0
  },
  {
    "ItemCode": 613,
    "ItemDescription": "Goblet Pleat Drapes",
    "ItemPrice": "1583",
    "ItemQty": 0
  },
  {
    "ItemCode": 618,
    "ItemDescription": "Pencil Pleat Drapes",
    "ItemPrice": "1140",
    "ItemQty": 0
  },
  {
    "ItemCode": 623,
    "ItemDescription": " Box Pleat Drapes",
    "ItemPrice": "1683",
    "ItemQty": 0
  },
  {
    "ItemCode": 628,
    "ItemDescription": "Window Scarf",
    "ItemPrice": "1774",
    "ItemQty": 3
  },
  {
    "ItemCode": 633,
    "ItemDescription": "Cafe Curtains",
    "ItemPrice": "796",
    "ItemQty": 0
  },
  {
    "ItemCode": 638,
    "ItemDescription": "Baster",
    "ItemPrice": "1214",
    "ItemQty": 0
  },
  {
    "ItemCode": 643,
    "ItemDescription": "Blow torch",
    "ItemPrice": "1955",
    "ItemQty": 0
  },
  {
    "ItemCode": 648,
    "ItemDescription": "Bottle opener",
    "ItemPrice": "321",
    "ItemQty": 0
  },
  {
    "ItemCode": 653,
    "ItemDescription": "Browning tray",
    "ItemPrice": "375",
    "ItemQty": 0
  },
  {
    "ItemCode": 658,
    "ItemDescription": "Chinois",
    "ItemPrice": "567",
    "ItemQty": 0
  },
  {
    "ItemCode": 663,
    "ItemDescription": "Corkscrew",
    "ItemPrice": "983",
    "ItemQty": 0
  },
  {
    "ItemCode": 668,
    "ItemDescription": "Crab cracker",
    "ItemPrice": "785",
    "ItemQty": 0
  },
  {
    "ItemCode": 673,
    "ItemDescription": "Dough scraper",
    "ItemPrice": "980",
    "ItemQty": 0
  },
  {
    "ItemCode": 678,
    "ItemDescription": "Fillet knife",
    "ItemPrice": "350",
    "ItemQty": 0
  },
  {
    "ItemCode": 683,
    "ItemDescription": "Grater",
    "ItemPrice": "370",
    "ItemQty": 0
  },
  {
    "ItemCode": 688,
    "ItemDescription": "Ladle",
    "ItemPrice": "570",
    "ItemQty": 0
  },
  {
    "ItemCode": 693,
    "ItemDescription": "Mandoline",
    "ItemPrice": "250",
    "ItemQty": 0
  },
  {
    "ItemCode": 698,
    "ItemDescription": "Meat grinder",
    "ItemPrice": "1250",
    "ItemQty": 0
  }
]

KafkaInvoiceGeneratorApplication.java
package com.pack.KafkaInvoiceGenerator;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.ApplicationArguments;
import org.springframework.boot.ApplicationRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

import com.pack.KafkaInvoiceGenerator.dataGenerator.InvoiceGenerator;
import com.pack.KafkaInvoiceGenerator.service.KafkaProducerService;

@SpringBootApplication
public class KafkaInvoiceGeneratorApplication implements ApplicationRunner {

	public static void main(String[] args) {
		SpringApplication.run(KafkaInvoiceGeneratorApplication.class, args);
	}
	
	@Autowired
	KafkaProducerService producerService;
	
	@Autowired
	InvoiceGenerator invoiceGenerator;
	
	@Value("${application.configs.invoice.count}")
	private int INVOICE_COUNT;

	@Override
	public void run(ApplicationArguments args) throws Exception {
		for(int i=0;i<INVOICE_COUNT;i++) {
			producerService.sendMessage(invoiceGenerator.getNextInvoice());
			Thread.sleep(1000);
		}
	}

}


DeliveryAddress.java
package com.pack.KafkaInvoiceGenerator.model;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

import lombok.Data;

@Data
@JsonInclude(JsonInclude.Include.NON_NULL)
public class DeliveryAddress {

    @JsonProperty("AddressLine")
    private String addressLine;
    @JsonProperty("City")
    private String city;
    @JsonProperty("State")
    private String state;
    @JsonProperty("PinCode")
    private String pinCode;
    @JsonProperty("ContactNumber")
    private String contactNumber;
}

LineItem.java
package com.pack.KafkaInvoiceGenerator.model;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

import lombok.Data;

@Data
@JsonInclude(JsonInclude.Include.NON_NULL)
public class LineItem {

    @JsonProperty("ItemCode")
    private String itemCode;
    @JsonProperty("ItemDescription")
    private String itemDescription;
    @JsonProperty("ItemPrice")
    private Double itemPrice;
    @JsonProperty("ItemQty")
    private Integer itemQty;
    @JsonProperty("TotalValue")
    private Double totalValue;

}


PosInvoice.java
package com.pack.KafkaInvoiceGenerator.model;

import java.util.ArrayList;
import java.util.List;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

import lombok.Data;

@Data
@JsonInclude(JsonInclude.Include.NON_NULL)
public class PosInvoice {

    @JsonProperty("InvoiceNumber")
    private String invoiceNumber;
    @JsonProperty("CreatedTime")
    private Long createdTime;
    @JsonProperty("StoreID")
    private String storeID;
    @JsonProperty("PosID")
    private String posID;
    @JsonProperty("CashierID")
    private String cashierID;
    @JsonProperty("CustomerType")
    private String customerType;
    @JsonProperty("CustomerCardNo")
    private String customerCardNo;
    @JsonProperty("TotalAmount")
    private Double totalAmount;
    @JsonProperty("NumberOfItems")
    private Integer numberOfItems;
    @JsonProperty("PaymentMethod")
    private String paymentMethod;
    @JsonProperty("TaxableAmount")
    private Double taxableAmount;
    @JsonProperty("CGST")
    private Double cGST;
    @JsonProperty("SGST")
    private Double sGST;
    @JsonProperty("CESS")
    private Double cESS;
    @JsonProperty("DeliveryType")
    private String deliveryType;
    @JsonProperty("DeliveryAddress")
    private DeliveryAddress deliveryAddress;
    @JsonProperty("InvoiceLineItems")
    private List<LineItem> invoiceLineItems = new ArrayList<LineItem>();
}

AddressGenerator.java
package com.pack.KafkaInvoiceGenerator.dataGenerator;

import java.io.File;
import java.util.Random;

import org.springframework.stereotype.Service;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.pack.KafkaInvoiceGenerator.model.DeliveryAddress;

@Service
public class AddressGenerator {
    
    private final Random random;

    private final DeliveryAddress[] addresses;

    private int getIndex() {
        return random.nextInt(100);
    }

    public AddressGenerator() {
        final String DATAFILE = "src/main/resources/data/address.json";
        final ObjectMapper mapper;
        random = new Random();
        mapper = new ObjectMapper();
        try {
            addresses = mapper.readValue(new File(DATAFILE), DeliveryAddress[].class);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    DeliveryAddress getNextAddress() {
        return addresses[getIndex()];
    }
}

InvoiceGenerator.java
package com.pack.KafkaInvoiceGenerator.dataGenerator;

import java.io.File;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.pack.KafkaInvoiceGenerator.model.DeliveryAddress;
import com.pack.KafkaInvoiceGenerator.model.LineItem;
import com.pack.KafkaInvoiceGenerator.model.PosInvoice;

import lombok.extern.log4j.Log4j2;

@Service
@Log4j2
public class InvoiceGenerator {
   
    private final Random invoiceIndex;
    private final Random invoiceNumber;
    private final Random numberOfItems;
    private final PosInvoice[] invoices;

    @Autowired
    AddressGenerator addressGenerator;
    @Autowired
    ProductGenerator productGenerator;

    public InvoiceGenerator() {
        String DATAFILE = "src/main/resources/data/Invoice.json";
        ObjectMapper mapper;
        invoiceIndex = new Random();
        invoiceNumber = new Random();
        numberOfItems = new Random();
        mapper = new ObjectMapper();
        try {
            invoices = mapper.readValue(new File(DATAFILE), PosInvoice[].class);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    private int getIndex() {
        return invoiceIndex.nextInt(100);
    }

    private int getNewInvoiceNumber() {
        return invoiceNumber.nextInt(99999999) + 99999;
    }

    private int getNoOfItems() {
        return numberOfItems.nextInt(4) + 1;
    }

    public PosInvoice getNextInvoice() {
        PosInvoice invoice = invoices[getIndex()];
        invoice.setInvoiceNumber(Integer.toString(getNewInvoiceNumber()));
        invoice.setCreatedTime(System.currentTimeMillis());
        if ("HOME-DELIVERY".equalsIgnoreCase(invoice.getDeliveryType())) {
            DeliveryAddress deliveryAddress = addressGenerator.getNextAddress();
            invoice.setDeliveryAddress(deliveryAddress);
        }
        int itemCount = getNoOfItems();
        Double totalAmount = 0.0;
        List<LineItem> items = new ArrayList<>();
        for (int i = 0; i < itemCount; i++) {
            LineItem item = productGenerator.getNextProduct();
            totalAmount = totalAmount + item.getTotalValue();
            items.add(item);
        }
        invoice.setNumberOfItems(itemCount);
        invoice.setInvoiceLineItems(items);
        invoice.setTotalAmount(totalAmount);
        invoice.setTaxableAmount(totalAmount);
        invoice.setCGST(totalAmount * 0.025);
        invoice.setSGST(totalAmount * 0.025);
        invoice.setCESS(totalAmount * 0.00125);
        log.debug(invoice);
        return invoice;
    }
}


ProductGenerator.java
package com.pack.KafkaInvoiceGenerator.dataGenerator;

import java.io.File;
import java.util.Random;

import org.springframework.stereotype.Service;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.pack.KafkaInvoiceGenerator.model.LineItem;

@Service
public class ProductGenerator {
    
    private final Random random;
    private final Random qty;
    private final LineItem[] products;

    public ProductGenerator() {
        String DATAFILE = "src/main/resources/data/products.json";
        ObjectMapper mapper = new ObjectMapper();
        random = new Random();
        qty = new Random();
        try {
            products = mapper.readValue(new File(DATAFILE), LineItem[].class);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    private int getIndex() {
        return random.nextInt(100);
    }

    private int getQuantity() {
        return qty.nextInt(2) + 1;
    }

    public LineItem getNextProduct() {
        LineItem lineItem = products[getIndex()];
        lineItem.setItemQty(getQuantity());
        lineItem.setTotalValue(lineItem.getItemPrice() * lineItem.getItemQty());
        return lineItem;
    }
}

KafkaProducerService.java
package com.pack.KafkaInvoiceGenerator.service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.stereotype.Service;

import com.pack.KafkaInvoiceGenerator.model.PosInvoice;

import lombok.extern.log4j.Log4j2;

@Service
@Log4j2
public class KafkaProducerService {
    
    @Value("${application.configs.topic.name}")
    private String topicName;

    @Autowired
    KafkaTemplate kafkaTemplate;

    public void sendMessage(PosInvoice invoice) {
      log.info(String.format("Producing Invoice No: %s", invoice.getInvoiceNumber()));
      kafkaTemplate.send(topicName,invoice.getStoreID(),invoice);
    }
} 



12. Kafka-KStream-KStreamJoin

pom.xml
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.4.2</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.pack</groupId>
	<artifactId>Kafka-KStream-KStreamJoin</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>Kafka-KStream-KStreamJoin</name>
	<description>Demo project for Spring Boot</description>
	<properties>
		<java.version>11</java.version>
		<spring-cloud.version>Hoxton.SR9</spring-cloud.version>
	</properties>
	<dependencies>
		<dependency>
			<groupId>org.apache.kafka</groupId>
			<artifactId>kafka-streams</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-stream</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-stream-binder-kafka-streams</artifactId>
		</dependency>

		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-stream</artifactId>
			<scope>test</scope>
			<classifier>test-binder</classifier>
			<type>test-jar</type>
		</dependency>
	</dependencies>
	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-dependencies</artifactId>
				<version>${spring-cloud.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<configuration>
					<excludes>
						<exclude>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok</artifactId>
						</exclude>
					</excludes>
				</configuration>
			</plugin>
		</plugins>
	</build>
	<repositories>
		<repository>
			<id>spring-milestones</id>
			<name>Spring Milestones</name>
			<url>https://repo.spring.io/milestone</url>
		</repository>
	</repositories>
	

</project>


application.yml
spring:
  cloud:
    stream:
      bindings:
        payment-request-channel:
          destination: payment_request
        payment-confirmation-channel:
          destination: payment_confirmation
      kafka:
        streams:
          binder:
            brokers:  localhost:9092
            configuration:
              commit.interval.ms: 10000
              state.dir: state-store
              default:
                key:
                  serde: org.apache.kafka.common.serialization.Serdes$StringSerde
                value:
                  serde: org.apache.kafka.common.serialization.Serdes$StringSerde
          bindings:
            payment-request-channel:
              consumer:
                timestampExtractorBeanName: requestTimeExtractor
            payment-confirmation-channel:
              consumer:
                timestampExtractorBeanName: confirmationTimeExtractor


OTPListenerBinding.java
package com.pack.KafkaKStreamKStreamJoin.binding;


import org.apache.kafka.streams.kstream.KStream;
import org.springframework.cloud.stream.annotation.Input;

import com.pack.KafkaKStreamKStreamJoin.model.PaymentConfirmation;
import com.pack.KafkaKStreamKStreamJoin.model.PaymentRequest;

public interface OTPListenerBinding {

    @Input("payment-request-channel")
    KStream<String, PaymentRequest> requestInputStream();

    @Input("payment-confirmation-channel")
    KStream<String, PaymentConfirmation> confirmationInputStream();

}


PaymentConfirmationTimeExtractor.java
package com.pack.KafkaKStreamKStreamJoin.config;


import org.apache.kafka.clients.consumer.ConsumerRecord;
import org.apache.kafka.streams.processor.TimestampExtractor;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import com.pack.KafkaKStreamKStreamJoin.model.PaymentConfirmation;

import lombok.extern.log4j.Log4j2;

@Configuration
@Log4j2
public class PaymentConfirmationTimeExtractor implements TimestampExtractor{

    @Override
    public long extract(ConsumerRecord<Object, Object> consumerRecord, long prevTime) {
        PaymentConfirmation confirmation = (PaymentConfirmation) consumerRecord.value();
        return ((confirmation.getCreatedTime() > 0) ? confirmation.getCreatedTime() : prevTime);
    }

    @Bean
    public TimestampExtractor confirmationTimeExtractor() {
        return new PaymentConfirmationTimeExtractor();
    }
}

PaymentRequestTimeExtractor.java
package com.pack.KafkaKStreamKStreamJoin.config;


import org.apache.kafka.clients.consumer.ConsumerRecord;
import org.apache.kafka.streams.processor.TimestampExtractor;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import com.pack.KafkaKStreamKStreamJoin.model.PaymentRequest;

import lombok.extern.log4j.Log4j2;

@Configuration
@Log4j2
public class PaymentRequestTimeExtractor implements TimestampExtractor{

    @Override
    public long extract(ConsumerRecord<Object, Object> consumerRecord, long prevTime) {
        PaymentRequest request = (PaymentRequest) consumerRecord.value();
        return ((request.getCreatedTime() > 0) ? request.getCreatedTime() : prevTime);
    }

    @Bean
    public TimestampExtractor requestTimeExtractor() {
        return new PaymentRequestTimeExtractor();
    }
}


PaymentConfirmation.java
package com.pack.KafkaKStreamKStreamJoin.model;

import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.Data;

@Data
public class PaymentConfirmation {
    @JsonProperty("TransactionID")
    private String transactionID;
    @JsonProperty("CreatedTime")
    private Long createdTime;
    @JsonProperty("OTP")
    private String OTP;
}


PaymentRequest.java
package com.pack.KafkaKStreamKStreamJoin.model;

import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.Data;

@Data
public class PaymentRequest {

    @JsonProperty("TransactionID")
    private String transactionID;
    @JsonProperty("CreatedTime")
    private Long createdTime;
    @JsonProperty("SourceAccountID")
    private String sourceAccountID;
    @JsonProperty("TargetAccountID")
    private String targetAccountID;
    @JsonProperty("Amount")
    private Double amount;
    @JsonProperty("OTP")
    private String OTP;
}


TransactionStatus.java
package com.pack.KafkaKStreamKStreamJoin.model;

import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.Data;

@Data
public class TransactionStatus {
    @JsonProperty("TransactionID")
    private String transactionID;
    @JsonProperty("Status")
    private String status;
}


OTPValidationService.java
package com.pack.KafkaKStreamKStreamJoin.service;


import java.time.Duration;
import java.time.Instant;
import java.time.ZoneOffset;

import org.apache.kafka.common.serialization.Serdes;
import org.apache.kafka.streams.kstream.JoinWindows;
import org.apache.kafka.streams.kstream.KStream;
import org.apache.kafka.streams.kstream.StreamJoined;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cloud.stream.annotation.EnableBinding;
import org.springframework.cloud.stream.annotation.Input;
import org.springframework.cloud.stream.annotation.StreamListener;
import org.springframework.kafka.support.serializer.JsonSerde;
import org.springframework.stereotype.Service;

import com.pack.KafkaKStreamKStreamJoin.binding.OTPListenerBinding;
import com.pack.KafkaKStreamKStreamJoin.model.PaymentConfirmation;
import com.pack.KafkaKStreamKStreamJoin.model.PaymentRequest;

import lombok.extern.log4j.Log4j2;


@Log4j2
@Service
@EnableBinding(OTPListenerBinding.class)
public class OTPValidationService {

    @Autowired
    private RecordBuilder recordBuilder;

    @StreamListener
    public void process(@Input("payment-request-channel") KStream<String, PaymentRequest> request,
                        @Input("payment-confirmation-channel") KStream<String, PaymentConfirmation> confirmation) {

        request.foreach((k, v) -> log.info("Request Key = " + k + " Created Time = "
                + Instant.ofEpochMilli(v.getCreatedTime()).atOffset(ZoneOffset.UTC)));

        confirmation.foreach((k, v) -> log.info("Confirmation Key = " + k + " Created Time = "
                + Instant.ofEpochMilli(v.getCreatedTime()).atOffset(ZoneOffset.UTC)));


        request.join(confirmation,
                (r, c) -> recordBuilder.getTransactionStatus(r, c),
                JoinWindows.of(Duration.ofMinutes(5)),
                StreamJoined.with(Serdes.String(),
                        new JsonSerde<>(PaymentRequest.class),
                        new JsonSerde<>(PaymentConfirmation.class)))
                .foreach((k, v) -> log.info("Transaction ID = " + k + " Status = " + v.getStatus()));

    }
}


RecordBuilder.java
package com.pack.KafkaKStreamKStreamJoin.service;



import org.springframework.stereotype.Service;

import com.pack.KafkaKStreamKStreamJoin.model.PaymentConfirmation;
import com.pack.KafkaKStreamKStreamJoin.model.PaymentRequest;
import com.pack.KafkaKStreamKStreamJoin.model.TransactionStatus;

import lombok.extern.log4j.Log4j2;

@Service
@Log4j2
public class RecordBuilder {
    public TransactionStatus getTransactionStatus(PaymentRequest request, PaymentConfirmation confirmation){
        String status = "Failure";
        if(request.getOTP().equals(confirmation.getOTP()))
            status = "Success";

        TransactionStatus transactionStatus = new TransactionStatus();
        transactionStatus.setTransactionID(request.getTransactionID());
        transactionStatus.setStatus(status);
        return transactionStatus;
    }
}


13. Kafka-KTable-KTableJoin

pom.xml
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.4.2</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.pack</groupId>
	<artifactId>Kafka-KTable-KTableJoin</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>Kafka-KTable-KTableJoin</name>
	<description>Demo project for Spring Boot</description>
	<properties>
		<java.version>11</java.version>
		<spring-cloud.version>Hoxton.SR9</spring-cloud.version>
	</properties>
	<dependencies>
		<dependency>
			<groupId>org.apache.kafka</groupId>
			<artifactId>kafka-streams</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-stream</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-stream-binder-kafka-streams</artifactId>
		</dependency>

		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-stream</artifactId>
			<scope>test</scope>
			<classifier>test-binder</classifier>
			<type>test-jar</type>
		</dependency>
	</dependencies>
	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-dependencies</artifactId>
				<version>${spring-cloud.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<configuration>
					<excludes>
						<exclude>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok</artifactId>
						</exclude>
					</excludes>
				</configuration>
			</plugin>
		</plugins>
	</build>
	<repositories>
		<repository>
			<id>spring-milestones</id>
			<name>Spring Milestones</name>
			<url>https://repo.spring.io/milestone</url>
		</repository>
	</repositories>

</project>


application.yml
spring:
  cloud:
    stream:
      bindings:
        user-master-channel:
          destination: user-master
        user-login-channel:
          destination: user-login
      kafka:
        streams:
          binder:
            brokers:  localhost:9092
            configuration:
              commit.interval.ms: 10000
              state.dir: state-store
              default:
                key:
                  serde: org.apache.kafka.common.serialization.Serdes$StringSerde
                value:
                  serde: org.apache.kafka.common.serialization.Serdes$StringSerde


UserDetails.java

package com.pack.KafkaKTableKTableJoin.model;

import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.Data;

@Data
public class UserDetails {

    @JsonProperty("UserName")
    private String userName;
    @JsonProperty("LoginID")
    private String loginID;
    @JsonProperty("LastLogin")
    private Long lastLogin;

}


UserLogin.java

package com.pack.KafkaKTableKTableJoin.model;

import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.Data;

@Data
public class UserLogin {

    @JsonProperty("LoginID")
    private String loginID;
    @JsonProperty("CreatedTime")
    private Long createdTime;

}


UserListenerBinding.java
package com.pack.KafkaKTableKTableJoin.binding;

import org.apache.kafka.streams.kstream.KTable;
import org.springframework.cloud.stream.annotation.Input;

import com.pack.KafkaKTableKTableJoin.model.UserDetails;
import com.pack.KafkaKTableKTableJoin.model.UserLogin;

public interface UserListenerBinding {

    @Input("user-master-channel")
    KTable<String, UserDetails> userInputStream();

    @Input("user-login-channel")
    KTable<String, UserLogin> loginInputStream();

}

LoginListenerService.java
package com.pack.KafkaKTableKTableJoin.service;


import java.time.Instant;
import java.time.ZoneOffset;

import org.apache.kafka.streams.kstream.KTable;
import org.springframework.cloud.stream.annotation.EnableBinding;
import org.springframework.cloud.stream.annotation.Input;
import org.springframework.cloud.stream.annotation.StreamListener;
import org.springframework.stereotype.Service;

import com.pack.KafkaKTableKTableJoin.binding.UserListenerBinding;
import com.pack.KafkaKTableKTableJoin.model.UserDetails;
import com.pack.KafkaKTableKTableJoin.model.UserLogin;

import lombok.extern.log4j.Log4j2;

@Log4j2
@Service
@EnableBinding(UserListenerBinding.class)
public class LoginListenerService {

    @StreamListener
    public void process(@Input("user-master-channel") KTable<String, UserDetails> users,
                        @Input("user-login-channel") KTable<String, UserLogin> logins) {

        users.toStream().foreach((k, v) -> log.info("User Key: {}, Last Login: {}, Value{}",
                k, Instant.ofEpochMilli(v.getLastLogin()).atOffset(ZoneOffset.UTC), v));

        logins.toStream().foreach((k, v) -> log.info("Login Key: {}, Last Login: {}, Value{}",
                k, Instant.ofEpochMilli(v.getCreatedTime()).atOffset(ZoneOffset.UTC), v));

        logins.join(users, (l, u) -> {
            u.setLastLogin(l.getCreatedTime());
            return u;
        }).toStream().foreach((k, v) -> log.info("Updated Last Login Key: {}, Last Login: {}", k,
                Instant.ofEpochMilli(v.getLastLogin()).atOffset(ZoneOffset.UTC)));

    }

}


14. KafkaReduce

pom.xml
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.4.1</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.pack</groupId>
	<artifactId>KafkaReduce</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>KafkaReduce</name>
	<description>Demo project for Spring Boot</description>
	<properties>
		<java.version>11</java.version>
		<spring-cloud.version>Hoxton.SR9</spring-cloud.version>
	</properties>

	<dependencies>
		<dependency>
			<groupId>org.apache.kafka</groupId>
			<artifactId>kafka-streams</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-stream</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-stream-binder-kafka-streams</artifactId>
		</dependency>
		<dependency>
			<groupId>org.apache.avro</groupId>
			<artifactId>avro</artifactId>
			<version>1.9.2</version>
		</dependency>
		<dependency>
			<groupId>io.confluent</groupId>
			<artifactId>kafka-streams-avro-serde</artifactId>
			<version>6.0.0</version>
		</dependency>

		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-stream</artifactId>
			<scope>test</scope>
			<classifier>test-binder</classifier>
			<type>test-jar</type>
		</dependency>
	</dependencies>

	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-dependencies</artifactId>
				<version>${spring-cloud.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<configuration>
					<excludes>
						<exclude>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok</artifactId>
						</exclude>
					</excludes>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.avro</groupId>
				<artifactId>avro-maven-plugin</artifactId>
				<version>1.8.2</version>
				<executions>
					<execution>
						<phase>generate-sources</phase>
						<goals>
							<goal>schema</goal>
						</goals>
						<configuration>
							<sourceDirectory>src/main/avro</sourceDirectory>
							<outputDirectory>${project.build.directory}/generated-sources</outputDirectory>
							<imports>
								<import>${project.basedir}/src/main/avro/LineItem.avsc</import>
								<import>${project.basedir}/src/main/avro/DeliveryAddress.avsc</import>
							</imports>
							<stringType>String</stringType>
						</configuration>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>

	<repositories>
		<repository>
			<id>spring-milestones</id>
			<name>Spring Milestones</name>
			<url>https://repo.spring.io/milestone</url>
		</repository>
		<repository>
			<id>confluent</id>
			<url>https://packages.confluent.io/maven/</url>
		</repository>
	</repositories>


</project>


application.yml
spring:
  cloud:
    stream:
      bindings:
        invoice-input-channel:
          destination: avro-pos-topic
        notification-output-channel:
          destination: loyalty-topic
      kafka:
        streams:
          binder:
            brokers:  localhost:9092
            configuration:
              schema.registry.url: http://localhost:8081
              commit.interval.ms: 10000
              state.dir: state-store
              default:
                key:
                  serde: org.apache.kafka.common.serialization.Serdes$StringSerde
                value:
                  serde: io.confluent.kafka.streams.serdes.avro.SpecificAvroSerde


Inside src/main/avro folder
DeliveryAddress.avsc
{
  "namespace": "com.pack.model",
  "type": "record",
  "name": "DeliveryAddress",
  "fields": [
    {"name": "AddressLine","type": "string"},
    {"name": "City","type":"string"},
    {"name": "State","type": "string"},
    {"name": "PinCode","type": "string"},
    {"name": "ContactNumber","type": "string"}
  ]
}

LineItem.avsc
{
  "namespace": "com.pack.model",
  "type": "record",
  "name": "LineItem",
  "fields": [
    {"name": "ItemCode","type": "string"},
    {"name": "ItemDescription","type": "string"},
    {"name": "ItemPrice","type":"double"},
    {"name": "ItemQty","type": "int"},
    {"name": "TotalValue","type": "double"}
  ]
}


Notification.avsc
{"namespace": "com.pack.model",
  "type": "record",
  "name": "Notification",
  "fields": [
    {"name": "InvoiceNumber", "type": "string"},
    {"name": "CustomerCardNo",  "type":"string"},
    {"name": "TotalAmount",  "type": "double"},
    {"name": "EarnedLoyaltyPoints",  "type": "double"},
    {"name": "TotalLoyaltyPoints",  "type":"double"}
  ]
}


PosInvoice.avsc
{
  "namespace": "com.pack.model",
  "type": "record",
  "name": "PosInvoice",
  "fields": [
    {"name": "InvoiceNumber","type": "string"},
    {"name": "CreatedTime","type": "long"},
    {"name": "CustomerCardNo","type": "string"},
    {"name": "TotalAmount","type": "double"},
    {"name": "NumberOfItems","type": "int"},
    {"name": "PaymentMethod","type": "string"},
    {"name": "TaxableAmount","type": "double"},
    {"name": "CGST","type": "double"},
    {"name": "SGST","type": "double"},
    {"name": "CESS","type": "double"},
    {"name": "StoreID","type": "string"},
    {"name": "PosID","type": "string"},
    {"name": "CashierID","type": "string"},
    {"name": "CustomerType","type": "string"},
    {"name": "DeliveryType","type": "string"},
    {"name": "DeliveryAddress","type": ["null","DeliveryAddress"]},
    {"name": "InvoiceLineItems","type": {"type": "array", "items": "LineItem"}}
  ]
}

PosListenerBinding.java
package com.pack.KafkaReduce.binding;

import org.apache.kafka.streams.kstream.KStream;
import gorg.springframework.cloud.stream.annotation.Input;
import org.springframework.cloud.stream.annotation.Output;

import com.pack.model.Notification;
import com.pack.model.PosInvoice;

public interface PosListenerBinding {

    @Input("invoice-input-channel")
    KStream<String, PosInvoice> invoiceInputStream();

    @Output("notification-output-channel")
    KStream<String, Notification> notificationOutputStream();

}


RecordBuilder.java
package com.pack.KafkaReduce.service;

import org.springframework.stereotype.Service;

import com.pack.model.Notification;
import com.pack.model.PosInvoice;


@Service
public class RecordBuilder {

    public Notification getNotification(PosInvoice invoice){
        Notification notification = new Notification();
        notification.setInvoiceNumber(invoice.getInvoiceNumber());
        notification.setCustomerCardNo(invoice.getCustomerCardNo());
        notification.setTotalAmount(invoice.getTotalAmount());
        notification.setEarnedLoyaltyPoints(invoice.getTotalAmount() * 0.02);
        notification.setTotalLoyaltyPoints(notification.getEarnedLoyaltyPoints());
        return notification;
    }
}


LoyaltyService.java
package com.pack.KafkaReduce.services;


import org.apache.kafka.streams.KeyValue;
import org.apache.kafka.streams.kstream.KStream;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cloud.stream.annotation.EnableBinding;
import org.springframework.cloud.stream.annotation.StreamListener;
import org.springframework.messaging.handler.annotation.SendTo;
import org.springframework.stereotype.Service;

import com.pack.model.Notification;
import com.pack.model.PosInvoice;
import com.pack.KafkaReduce.binding.PosListenerBinding;
import com.pack.KafkaReduce.service.RecordBuilder;

import lombok.extern.log4j.Log4j2;

@Log4j2
@Service
@EnableBinding(PosListenerBinding.class)
public class LoyaltyService {

    @Autowired
    RecordBuilder recordBuilder;

    @StreamListener("invoice-input-channel")
    @SendTo("notification-output-channel")
    public KStream<String, Notification> process(KStream<String, PosInvoice> input) {

        KStream<String, Notification> notificationKStream = input
                .filter((k, v) -> v.getCustomerType().equalsIgnoreCase("PRIME"))
                .map((k, v) -> new KeyValue<>(v.getCustomerCardNo(), recordBuilder.getNotification(v)))
                .groupByKey()
                .reduce((aggValue, newValue) -> {
                    newValue.setTotalLoyaltyPoints(newValue.getEarnedLoyaltyPoints() + aggValue.getTotalLoyaltyPoints());
                    return newValue;
                }).toStream();

        notificationKStream.foreach((k, v) -> log.info(String.format("Notification:- Key: %s, Value: %s", k, v)));
        return notificationKStream;
    }
}


15. KafkaRestProducer

pom.xml
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.7.3</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.pack</groupId>
	<artifactId>KafkaRestProducer</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>KafkaRestProducer</name>
	<description>Demo project for Spring Boot</description>
	<properties>
		<java.version>11</java.version>
	</properties>
	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.kafka</groupId>
			<artifactId>spring-kafka</artifactId>
		</dependency>

		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.kafka</groupId>
			<artifactId>spring-kafka-test</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<configuration>
					<excludes>
						<exclude>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok</artifactId>
						</exclude>
					</excludes>
				</configuration>
			</plugin>
		</plugins>
	</build>

</project>


application.properties
server.port=1111

application.yml
spring:
   kafka:
      producer:
         client-id: rest-producer
         bootstrap-servers: localhost:9092
         key-serializer: org.apache.kafka.common.serialization.StringSerializer
         value-serializer: org.apache.kafka.common.serialization.StringSerializer

IncomingMessage.java
package com.pack.KafkaRestProducer.model;

import lombok.Data;

@Data
public class IncomingMessage {
     private String topic;
     private String key;
     private String value;
}


KafkaMessageController.java
package com.pack.KafkaRestProducer.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import com.pack.KafkaRestProducer.model.IncomingMessage;
import com.pack.KafkaRestProducer.service.KafkaProducerService;

@RestController
public class KafkaMessageController {

     @Autowired
     KafkaProducerService kafkaProducerService;
     
     @PostMapping("/post")
     public String sendMessageToKafka(@RequestBody IncomingMessage message){
         kafkaProducerService.sendMessage(message.getTopic(),message.getKey(),message.getValue());
         return String.format("Success - Message for key %s is sent to Kafka Topic: %s",message.getKey(),message.getTopic());
     }
}


KafkaProducerService.java
package com.pack.KafkaRestProducer.service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.stereotype.Service;

import lombok.extern.log4j.Log4j2;

@Service
@Log4j2
public class KafkaProducerService {
   
     @Autowired
     private KafkaTemplate<String,String> kafkaTemplate;

     public void sendMessage(String topic, String key, String value) {
    	   kafkaTemplate.send(topic,key,value);
           log.info(String.format("Producing Message- Key: %s, Value: %s to topic: %s", key, value, topic));
     }
}



16. KafkaSessionWindows

pom.xml
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.4.2</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.pack</groupId>
	<artifactId>KafkaSessionWindow</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>KafkaSessionWindow</name>
	<description>Demo project for Spring Boot</description>
	<properties>
		<java.version>11</java.version>
		<spring-cloud.version>Hoxton.SR9</spring-cloud.version>
	</properties>
	<dependencies>
		<dependency>
			<groupId>org.apache.kafka</groupId>
			<artifactId>kafka-streams</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-stream</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-stream-binder-kafka-streams</artifactId>
		</dependency>

		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-stream</artifactId>
			<scope>test</scope>
			<classifier>test-binder</classifier>
			<type>test-jar</type>
		</dependency>
	</dependencies>
	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-dependencies</artifactId>
				<version>${spring-cloud.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<configuration>
					<excludes>
						<exclude>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok</artifactId>
						</exclude>
					</excludes>
				</configuration>
			</plugin>
		</plugins>
	</build>
	<repositories>
		<repository>
			<id>spring-milestones</id>
			<name>Spring Milestones</name>
			<url>https://repo.spring.io/milestone</url>
		</repository>
	</repositories>


</project>


application.yml
spring:
  cloud:
    stream:
      bindings:
        click-input-channel:
          destination: user-clicks-topic
      kafka:
        streams:
          binder:
            brokers:  localhost:9092
            configuration:
              commit.interval.ms: 10000
              state.dir: state-store
              default:
                key:
                  serde: org.apache.kafka.common.serialization.Serdes$StringSerde
                value:
                  serde: org.apache.kafka.common.serialization.Serdes$StringSerde
          bindings:
            click-input-channel:
              consumer:
                timestampExtractorBeanName: userClickTimeExtractor


UserClick.java
package com.pack.KafkaSessionWindow.model;

import com.fasterxml.jackson.annotation.JsonProperty;

import lombok.Data;

@Data
public class UserClick {
    @JsonProperty("UserID")
    private String userID;
    @JsonProperty("CreatedTime")
    private Long createdTime;
    @JsonProperty("CurrentLink")
    private String currentLink;
    @JsonProperty("NextLink")
    private String nextLink;
}


ClickListenerBinding.java
package com.pack.KafkaSessionWindow.binding;

import org.apache.kafka.streams.kstream.KStream;
import org.springframework.cloud.stream.annotation.Input;

import com.pack.KafkaSessionWindow.model.UserClick;

public interface ClickListenerBinding {

    @Input("click-input-channel")
    KStream<String, UserClick> clickInputStream();

}


ClickTimeExtractor.java
package com.pack.KafkaSessionWindow.config;

import org.apache.kafka.clients.consumer.ConsumerRecord;
import org.apache.kafka.streams.processor.TimestampExtractor;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import com.pack.KafkaSessionWindow.model.UserClick;

import lombok.extern.log4j.Log4j2;

@Configuration
@Log4j2
public class ClickTimeExtractor implements TimestampExtractor{

    @Override
    public long extract(ConsumerRecord<Object, Object> consumerRecord, long prevTime) {
        UserClick click = (UserClick) consumerRecord.value();
        log.info("Click Time: {}", click.getCreatedTime());
        return ((click.getCreatedTime() > 0) ? click.getCreatedTime() : prevTime);
    }

    @Bean
    public TimestampExtractor userClickTimeExtractor() {
        return new ClickTimeExtractor();
    }
}


ClickListerService.java
package com.pack.KafkaSessionWindow.service;

import java.time.Duration;
import java.time.Instant;
import java.time.ZoneOffset;

import org.apache.kafka.streams.kstream.KStream;
import org.apache.kafka.streams.kstream.SessionWindows;
import org.springframework.cloud.stream.annotation.EnableBinding;
import org.springframework.cloud.stream.annotation.StreamListener;
import org.springframework.stereotype.Service;

import com.pack.KafkaSessionWindow.binding.ClickListenerBinding;
import com.pack.KafkaSessionWindow.model.UserClick;

import lombok.extern.log4j.Log4j2;

@Log4j2
@Service
@EnableBinding(ClickListenerBinding.class)
public class ClickListerService {

    @StreamListener("click-input-channel")
    public void process(KStream<String, UserClick> input) {

        input.peek((k, v) -> log.info("Key = " + k + " Created Time = "
                + Instant.ofEpochMilli(v.getCreatedTime()).atOffset(ZoneOffset.UTC)))
                .groupByKey()
                .windowedBy(SessionWindows.with(Duration.ofMinutes(5)))
                .count()
                .toStream()
                .foreach((k, v) -> log.info(
                        "UserID: " + k.key() +
                                " Window start: " +
                                Instant.ofEpochMilli(k.window().start())
                                        .atOffset(ZoneOffset.UTC) +
                                " Window end: " +
                                Instant.ofEpochMilli(k.window().end())
                                        .atOffset(ZoneOffset.UTC) +
                                " Count: " + v +
                                " Window#: " + k.window().hashCode()
                ));

    }
}


17. KafkaStream1Application

pom.xml
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.7.3</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.pack</groupId>
	<artifactId>KafkaStream1Application</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>KafkaStream1Application</name>
	<description>Demo project for Spring Boot</description>
	<properties>
		<java.version>11</java.version>
		<spring-cloud.version>Hoxton.SR9</spring-cloud.version>
	</properties>
	<dependencies>
		<dependency>
			<groupId>org.apache.kafka</groupId>
			<artifactId>kafka-streams</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-stream</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-stream-binder-kafka-streams</artifactId>
		</dependency>

		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-stream</artifactId>
			<scope>test</scope>
			<classifier>test-binder</classifier>
			<type>test-jar</type>
		</dependency>
	</dependencies>
	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-dependencies</artifactId>
				<version>${spring-cloud.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<configuration>
					<excludes>
						<exclude>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok</artifactId>
						</exclude>
					</excludes>
				</configuration>
			</plugin>
		</plugins>
	</build>

</project>


application.yml
spring:
   cloud:
      stream:
        bindings:
           input-channel-1:
              destination: users
        kafka:
           streams:
              binder:
                applicationId: hellostreams
                brokers: localhost:9092
                configuration:
                   default:
                      key:
                        serde: org.apache.kafka.common.serialization.Serdes$StringSerde
                      value:
                        serde: org.apache.kafka.common.serialization.Serdes$StringSerde

KafkaListenerBinding.java
package com.pack.KafkaStream1Application.binding;

import org.apache.kafka.streams.kstream.KStream;
import org.springframework.cloud.stream.annotation.Input;

public interface KafkaListenerBinding {
     
    @Input("input-channel-1")
    KStream<String,String> inputStream();
}


KafkaListenerService.java
package com.pack.KafkaStream1Application.service;

import org.apache.kafka.streams.kstream.KStream;
import org.springframework.cloud.stream.annotation.EnableBinding;
import org.springframework.cloud.stream.annotation.StreamListener;
import org.springframework.stereotype.Service;

import com.pack.KafkaStream1Application.binding.KafkaListenerBinding;

import lombok.extern.log4j.Log4j2;

@Service
@Log4j2
@EnableBinding(KafkaListenerBinding.class)
public class KafkaListenerService {
 
    @StreamListener("input-channel-1")
    public void process(KStream<String,String> input) {
      input.foreach((k,v) -> log.info(String.format("Key: %s, Value: %s",k,v)));
    }
}


18. KafkaStreams

pom.xml
<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>com.pack</groupId>
	<artifactId>KafkaStreams</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>KafkaStreams</name>
	<properties>
	   <java-version>11</java-version>
	</properties>
	<dependencies>
		<dependency>
			<groupId>org.apache.kafka</groupId>
			<artifactId>kafka-clients</artifactId>
			<version>2.8.0</version>
		</dependency>
		<dependency>
			<groupId>org.apache.kafka</groupId>
			<artifactId>kafka-streams</artifactId>
			<version>2.8.0</version>
		</dependency>

	</dependencies>
</project>


ProducerExample1.java
package com.pack;

import java.util.Properties;

import org.apache.kafka.common.serialization.Serdes;
import org.apache.kafka.streams.KafkaStreams;
import org.apache.kafka.streams.StreamsBuilder;
import org.apache.kafka.streams.StreamsConfig;
import org.apache.kafka.streams.kstream.Consumed;
import org.apache.kafka.streams.kstream.KStream;
import org.apache.kafka.streams.kstream.Produced;

public class ProducerExample1 {

	public static void main(String[] args) {
		Properties prop=new Properties();
		prop.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, "localhost:9092");
		prop.put(StreamsConfig.APPLICATION_ID_CONFIG, "stream1");
		
		StreamsBuilder builder=new StreamsBuilder();
		
		KStream<String, String> stream=builder.stream("streaminput", Consumed.with(Serdes.String(), Serdes.String()));
        stream.peek((k,v)->System.out.println("key="+k+" value="+v))
             .filter((k,v)->v.contains("orderNumber-"))
             .mapValues(v->v.substring(v.indexOf("-") + 1))
             .filter((k,v)->Long.parseLong(v)>1000)
             .peek((k,v)->System.out.println("key="+k+" value="+v))
              .to("streamoutput",Produced.with(Serdes.String(), Serdes.String()));
        KafkaStreams st=new KafkaStreams(builder.build(),prop);
        st.start();
	}

}


ProducerExample2.java
package com.pack;

import java.util.Properties;

import org.apache.kafka.common.serialization.Serdes;
import org.apache.kafka.streams.KafkaStreams;
import org.apache.kafka.streams.StreamsBuilder;
import org.apache.kafka.streams.StreamsConfig;
import org.apache.kafka.streams.kstream.Consumed;
import org.apache.kafka.streams.kstream.Grouped;
import org.apache.kafka.streams.kstream.KStream;
import org.apache.kafka.streams.kstream.KTable;
import org.apache.kafka.streams.kstream.Produced;

public class ProducerExample2 {

	public static void main(String[] args) {
		Properties prop=new Properties();
		prop.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, "localhost:9092");
		prop.put(StreamsConfig.APPLICATION_ID_CONFIG, "stream3");
		
		StreamsBuilder builder=new StreamsBuilder();
		
		//here we provide topic name, with materialized config object along with we need to provide name for KTable in order to be materialized
		//It will use caching and only admit the latest records for each key after the commit which is 30 sec or when cache is full at 10MB
		//KTable<String, String> firstKTable = builder.table("streaminput1",
			   // Materialized.<String, String, KeyValueStore<Bytes, byte[]>>as("ktable-store").withKeySerde(Serdes.String()).withValueSerde(Serdes.String()));
				                                                        
		//KTable<String, String> firstKTable = builder.table("streaminput1",Consumed.with(Serdes.String(),Serdes.String()));
           //  firstKTable.filter((k,v)->v.contains("orderNumber-"))
           // .mapValues(v->v.substring(v.indexOf("-") + 1))
           // .filter((k,v)->Long.parseLong(v)>1000)
            // .toStream()
            // .peek((k,v)->System.out.println("key="+k+" value="+v))
             // .to("streamoutput1",Produced.with(Serdes.String(), Serdes.String()));
		
		KStream<String,String> views=builder.stream("streaminput1",Consumed.with(Serdes.String(),Serdes.String()));
		
		KTable<String,Long> table=views.mapValues(v->Long.parseLong(v))
				                       .groupByKey(Grouped.with(Serdes.String(), Serdes.Long()))
				                       .reduce(Long::sum);
		table.toStream().to("streamoutput1",Produced.with(Serdes.String(), Serdes.Long()));
        KafkaStreams st=new KafkaStreams(builder.build(),prop);
        st.start();
	}

}


ProducerExample3.java
package com.pack;

import java.util.Arrays;
import java.util.Properties;

import org.apache.kafka.clients.consumer.ConsumerConfig;
import org.apache.kafka.common.serialization.Serdes;
import org.apache.kafka.streams.KafkaStreams;
import org.apache.kafka.streams.StreamsBuilder;
import org.apache.kafka.streams.StreamsConfig;
import org.apache.kafka.streams.kstream.Consumed;
import org.apache.kafka.streams.kstream.KStream;
import org.apache.kafka.streams.kstream.KTable;
import org.apache.kafka.streams.kstream.Produced;

public class ProducerExample3 {

	public static void main(String[] args) {
		Properties prop=new Properties();
		prop.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, "localhost:9092");
		prop.put(StreamsConfig.APPLICATION_ID_CONFIG, "stream5");
		prop.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG,"earliest");
		prop.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.String().getClass());
		prop.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.String().getClass());
		
		StreamsBuilder builder=new StreamsBuilder();
		
		KStream<String, String> stream=builder.stream("streaminput2");

		KTable<String,Object> wordCount = stream.mapValues(t->t.toLowerCase())
				.flatMapValues(lt->Arrays.asList(lt.split(" ")))
				.selectKey((ig,word)->word)
				.groupByKey()
				.count().mapValues(value->Long.toString(value));
		wordCount.toStream().peek((k,v)->System.out.println("key="+k+" value="+v)).to("streamoutput2");	

        KafkaStreams st=new KafkaStreams(builder.build(),prop);
        st.start();
	}

}


19. KafkaStudentProducer

pom.xml
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.5.6</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.pack</groupId>
	<artifactId>KafkaStudentProducer</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>KafkaStudentProducer</name>
	<description>Demo project for Spring Boot</description>
	<properties>
		<java.version>11</java.version>
	</properties>
	<dependencies>

		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-databind</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.kafka</groupId>
			<artifactId>spring-kafka</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<scope>runtime</scope>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.kafka</groupId>
			<artifactId>spring-kafka-test</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<configuration>
					<excludes>
						<exclude>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok</artifactId>
						</exclude>
					</excludes>
				</configuration>
			</plugin>
		</plugins>
	</build>
	

</project>


application.properties

server.port=2000
spring.cloud.stream.default.producer.useNativeEncoding=true


Student.java
package com.pack.KafkaStudentProducer.model;

import lombok.Data;

@Data
public class Student {
    private Integer id;
    private String name;
    private String course;
    private String status;
}


KafkaProducerConfig.java
package com.pack.KafkaStudentProducer.config;

import java.util.HashMap;
import java.util.Map;

import org.apache.kafka.clients.producer.ProducerConfig;
import org.apache.kafka.common.serialization.StringSerializer;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.kafka.core.DefaultKafkaProducerFactory;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.kafka.core.ProducerFactory;
import org.springframework.kafka.support.serializer.JsonDeserializer;
import org.springframework.kafka.support.serializer.JsonSerializer;

import com.pack.KafkaStudentProducer.model.Student;

@Configuration
public class KafkaProducerConfig {

	@Bean
	public KafkaTemplate<String, Student> kafkaTemplate(){
		return new KafkaTemplate<>(producerFactory());
	}
	
	@Bean
	public ProducerFactory<String,Student> producerFactory(){
		Map<String, Object> config=new HashMap<>();
		config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, "localhost:9092");
		config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);
		config.put(JsonSerializer.ADD_TYPE_INFO_HEADERS, false);
		config.put(JsonSerializer.TYPE_MAPPINGS, "com.pack.KafkaStudentProducer.model.Student");
		JsonSerializer jsonSerializer = new JsonSerializer();
		jsonSerializer.setAddTypeInfo(false);

		config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, jsonSerializer);
		return new DefaultKafkaProducerFactory<String,Student>(config);	
	}
}


StudentController.java
package com.pack.KafkaStudentProducer.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import com.pack.KafkaStudentProducer.model.Student;
import com.pack.KafkaStudentProducer.service.KafkaProducerService;

@RestController
public class StudentController {

	@Autowired
	KafkaProducerService kafkaService;
	
	@PostMapping("/post")
	public void student(@RequestBody Student student) {
		kafkaService.send(student);
	}
}


KafkaProducerService.java
package com.pack.KafkaStudentProducer.service;

import java.util.UUID;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.stereotype.Service;

import com.pack.KafkaStudentProducer.model.Student;

import lombok.extern.log4j.Log4j2;

@Service
@Log4j2
public class KafkaProducerService {

	@Autowired
	KafkaTemplate<String, Student> kafkaTemplate;
	
	public void send(Student student) {
		log.info("Student object is {}",student);
		kafkaTemplate.send("studentTopic",UUID.randomUUID().toString(),student);
	}
}


20. KafkaStudentStreamService

pom.xml
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.5.6</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.pack</groupId>
	<artifactId>KafkaStudentStreamService</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>KafkaStudentStreamService</name>
	<description>Demo project for Spring Boot</description>
	<properties>
		<java.version>11</java.version>
		<spring-cloud.version>2020.0.4</spring-cloud.version>
	</properties>
	<dependencies>
		<dependency>
			<groupId>org.apache.kafka</groupId>
			<artifactId>kafka-streams</artifactId>
		</dependency>
		
		<dependency>
			<groupId>org.springframework.kafka</groupId>
			<artifactId>spring-kafka</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-stream</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-stream-binder-kafka-streams</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<scope>runtime</scope>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-stream</artifactId>
			<scope>test</scope>
			<classifier>test-binder</classifier>
			<type>test-jar</type>
		</dependency>
	</dependencies>
	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-dependencies</artifactId>
				<version>${spring-cloud.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<configuration>
					<excludes>
						<exclude>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok</artifactId>
						</exclude>
					</excludes>
				</configuration>
			</plugin>
		</plugins>
	</build>
	<repositories>
		<repository>
			<id>spring-milestones</id>
			<name>Spring Milestones</name>
			<url>https://repo.spring.io/milestone</url>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
		</repository>
	</repositories>
</project>


application.yml
spring:
  cloud:
    stream:
      bindings:
        student-input-channel:
          destination: studentTopic
        student-pass-output-channel:
          destination: passTopic
        student-fail-output-channel:
          destination: failTopic
      kafka:
        streams:
          binder:
             brokers: localhost:9092
        properties:
           processing.guarantee: exactly_once
           spring.json.trusted.packages: com.pack.KafkaStudentStreamService.model.*


Student.java
package com.pack.KafkaStudentStreamService.model;

import lombok.Data;

@Data
public class Student {
    private Integer id;
    private String name;
    private String course;
    private String status;
}


KafkaStreamBindings.java
package com.pack.KafkaStudentStreamService.binding;

import org.apache.kafka.streams.kstream.KStream;
import org.springframework.cloud.stream.annotation.Input;
import org.springframework.cloud.stream.annotation.Output;

import com.pack.KafkaStudentStreamService.model.Student;

public interface KafkaStreamBindings {
    @Input("student-input-channel")
	KStream<String, Student> inputStream();
    @Output("student-pass-output-channel")
	KStream<String, Student> passStream();
    @Output("student-fail-output-channel")
	KStream<String, Student> failStream();
}


KafkaConsumerConfig.java
package com.pack.KafkaStudentStreamService.config;

import java.util.HashMap;
import java.util.Map;

import org.apache.kafka.clients.consumer.ConsumerConfig;
import org.apache.kafka.common.serialization.StringDeserializer;
import org.springframework.boot.autoconfigure.security.SecurityProperties.User;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.kafka.config.ConcurrentKafkaListenerContainerFactory;
import org.springframework.kafka.core.ConsumerFactory;
import org.springframework.kafka.core.DefaultKafkaConsumerFactory;
import org.springframework.kafka.support.serializer.ErrorHandlingDeserializer;
import org.springframework.kafka.support.serializer.JsonDeserializer;
import org.springframework.kafka.support.serializer.JsonSerializer;

import com.pack.KafkaStudentStreamService.model.Student;

@Configuration
public class KafkaConsumerConfig {
	@Bean
    public ConsumerFactory<String, Student> consumerFactory() {
        
        Map<String, Object> config = new HashMap<>();
        
        config.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, "localhost:9092");
        config.put(ConsumerConfig.GROUP_ID_CONFIG, "group_json");
        config.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class);
        config.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, JsonDeserializer.class);
        config.put(JsonSerializer.TYPE_MAPPINGS, "com.pack.KafkaStudentStreamService.model.Student");
        config.put(JsonDeserializer.VALUE_DEFAULT_TYPE, "com.pack.KafkaStudentStreamService.model.Student");
        config.put(ErrorHandlingDeserializer.KEY_DESERIALIZER_CLASS, StringDeserializer.class);
        config.put(ErrorHandlingDeserializer.VALUE_DESERIALIZER_CLASS, JsonDeserializer.class);
        
        return new DefaultKafkaConsumerFactory<String, Student>(config, new StringDeserializer(), new JsonDeserializer<>(Student.class,false));
    }
    
    @Bean
    public ConcurrentKafkaListenerContainerFactory<String, Student> kafkaLister() {
        
        ConcurrentKafkaListenerContainerFactory<String, Student> factory = new ConcurrentKafkaListenerContainerFactory<>();
        
        factory.setMissingTopicsFatal(false);
        
        factory.setConsumerFactory(consumerFactory());
        
        return factory;
    }
    
}


StreamService.java
package com.pack.KafkaStudentStreamService.service;

import java.util.HashMap;
import java.util.Map;

import org.apache.kafka.clients.consumer.ConsumerConfig;
import org.apache.kafka.common.serialization.StringDeserializer;
import org.apache.kafka.streams.kstream.KStream;
import org.springframework.cloud.stream.annotation.EnableBinding;
import org.springframework.cloud.stream.annotation.StreamListener;
import org.springframework.context.annotation.Bean;
import org.springframework.kafka.core.ConsumerFactory;
import org.springframework.kafka.core.DefaultKafkaConsumerFactory;
import org.springframework.kafka.support.serializer.JsonDeserializer;
import org.springframework.messaging.handler.annotation.SendTo;
import org.springframework.stereotype.Service;

import com.pack.KafkaStudentStreamService.binding.KafkaStreamBindings;
import com.pack.KafkaStudentStreamService.model.Student;

@EnableBinding(KafkaStreamBindings.class)
@Service
public class StreamService {

	@StreamListener("student-input-channel")
	@SendTo("student-pass-output-channel")
	public KStream<String, Student> passStudent(KStream<String, Student> student) {
		return student.filter((k,v)-> v.getStatus().equalsIgnoreCase("pass"));
	}

	@StreamListener("student-input-channel")
	@SendTo("student-fail-output-channel")
	public KStream<String, Student> failStudent(KStream<String, Student> student) {
		return student.filter((k,v)-> v.getStatus().equalsIgnoreCase("fail"));
	}
	


		@Bean
		public ConsumerFactory<String, Student> customerConsumerFactory(){
		Map<String, Object> customerConfigMap = new HashMap<>();
		customerConfigMap.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG,"localhost:9092");
		customerConfigMap.put(ConsumerConfig.GROUP_ID_CONFIG,"group_json");
		customerConfigMap.put(JsonDeserializer.TRUSTED_PACKAGES, "*");
		return new DefaultKafkaConsumerFactory<>(customerConfigMap, new StringDeserializer(), new JsonDeserializer());
		}

}


21. KafkaTest

pom.xml
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.4.2</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.pack</groupId>
	<artifactId>KafkaTest</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>KafkaTest</name>
	<description>Demo project for Spring Boot</description>
	<properties>
		<java.version>11</java.version>
		<spring-cloud.version>Hoxton.SR9</spring-cloud.version>
	</properties>
	<dependencies>
		<dependency>
			<groupId>org.apache.kafka</groupId>
			<artifactId>kafka-streams</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-stream</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-stream-binder-kafka-streams</artifactId>
		</dependency>

		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <scope>test</scope>
        </dependency>
		<dependency>
			<groupId>org.springframework.kafka</groupId>
			<artifactId>spring-kafka-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.kafka</groupId>
			<artifactId>kafka-streams-test-utils</artifactId>
			<version>${kafka.version}</version>
			<scope>test</scope>
		</dependency>
    </dependencies>
	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-dependencies</artifactId>
				<version>${spring-cloud.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<configuration>
					<excludes>
						<exclude>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok</artifactId>
						</exclude>
					</excludes>
				</configuration>
			</plugin>
		</plugins>
	</build>
	<repositories>
		<repository>
			<id>spring-milestones</id>
			<name>Spring Milestones</name>
			<url>https://repo.spring.io/milestone</url>
		</repository>
	</repositories>
	
</project>


application.yml in src/main/resources
spring:
  cloud:
    stream:
      bindings:
        process-in-0:
          destination: input-topic
        process-out-0:
          destination: output-topic
      kafka:
        streams:
          binder:
            brokers:  localhost:9092
            configuration:
              commit.interval.ms: 100
              default:
                key.serde: org.apache.kafka.common.serialization.Serdes$StringSerde
                value.serde: org.apache.kafka.common.serialization.Serdes$StringSerde


ListenerBinding.java
package com.pack.KafkaTest.binding;

import org.apache.kafka.streams.kstream.KStream;
import org.springframework.cloud.stream.annotation.Input;
import org.springframework.cloud.stream.annotation.Output;

public interface ListenerBinding {

    @Input("process-in-0")
    KStream<String, String> inputStream();

    @Output("process-out-0")
    KStream<String, String> outStream();

}


ListenerService.java
package com.pack.KafkaTest.service;


import org.apache.kafka.streams.kstream.KStream;
import org.springframework.cloud.stream.annotation.EnableBinding;
import org.springframework.cloud.stream.annotation.StreamListener;
import org.springframework.messaging.handler.annotation.SendTo;
import org.springframework.stereotype.Service;

import com.pack.KafkaTest.binding.ListenerBinding;

import lombok.extern.log4j.Log4j2;

@Log4j2
@Service
@EnableBinding(ListenerBinding.class)
public class ListenerService {

    @StreamListener("process-in-0")
    @SendTo("process-out-0")
    public KStream<String, String> process(KStream<String, String> input) {

        input.foreach((k,v) -> log.info("Received Input: {}",v));
        return input.mapValues(v -> v.toUpperCase());

    }
}


application.yml in src/test/resources
spring:
  cloud:
    stream:
      bindings:
        process-in-0:
          destination: input-topic
        process-out-0:
          destination: output-topic
      kafka:
        streams:
          binder:
            brokers:  ${spring.embedded.kafka.brokers}
            configuration:
              commit.interval.ms: 100
              default:
                key.serde: org.apache.kafka.common.serialization.Serdes$StringSerde
                value.serde: org.apache.kafka.common.serialization.Serdes$StringSerde


KafkaTestApplicationTests.java
package com.pack.KafkaTest;

import lombok.extern.log4j.Log4j2;
import org.apache.kafka.clients.consumer.Consumer;
import org.apache.kafka.clients.consumer.ConsumerConfig;
import org.apache.kafka.clients.consumer.ConsumerRecords;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.ClassRule;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.kafka.config.StreamsBuilderFactoryBean;
import org.springframework.kafka.core.DefaultKafkaConsumerFactory;
import org.springframework.kafka.core.DefaultKafkaProducerFactory;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.kafka.test.EmbeddedKafkaBroker;
import org.springframework.kafka.test.rule.EmbeddedKafkaRule;
import org.springframework.test.annotation.DirtiesContext;
import org.springframework.test.context.junit4.SpringRunner;

import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import static org.assertj.core.api.Assertions.assertThat;
import static org.springframework.kafka.test.utils.KafkaTestUtils.*;

@Log4j2
@RunWith(SpringRunner.class)
@DirtiesContext
@SpringBootTest(
        webEnvironment = SpringBootTest.WebEnvironment.NONE,
        properties = {"server.port=0"})
public class KafkaTestApplicationTests {


    @ClassRule
    public static EmbeddedKafkaRule embeddedKafkaRule = new EmbeddedKafkaRule(1, true, 1,
            "input-topic", "output-topic");
    private static EmbeddedKafkaBroker embeddedKafka = embeddedKafkaRule.getEmbeddedKafka();

    @Autowired
    StreamsBuilderFactoryBean streamsBuilderFactoryBean;

    private static Consumer<String, String> consumer;

    @BeforeClass
    public static void setUp() {

        Map<String, Object> consumerProps = consumerProps("group", "false", embeddedKafka);
        consumerProps.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, "earliest");
        DefaultKafkaConsumerFactory<String, String> cf = new DefaultKafkaConsumerFactory<>(consumerProps);
        consumer = cf.createConsumer();
        embeddedKafka.consumeFromAnEmbeddedTopic(consumer, "output-topic");
    }

    @AfterClass
    public static void tearDown() {
        consumer.close();
    }

    @Test
    public void SimpleProcessorApplicationTest() {
        Set<String> actualResultSet = new HashSet<>();
        Set<String> expectedResultSet = new HashSet<>();
        expectedResultSet.add("HELLO1");
        expectedResultSet.add("HELLO2");

        Map<String, Object> senderProps = producerProps(embeddedKafka);
        DefaultKafkaProducerFactory<Integer, String> pf = new DefaultKafkaProducerFactory<>(senderProps);
        try {
            KafkaTemplate<Integer, String> template = new KafkaTemplate<>(pf, true);
            template.setDefaultTopic("input-topic");

            template.sendDefault("hello1");
            template.sendDefault("hello2");

            int receivedAll = 0;
            while(receivedAll<2) {
                ConsumerRecords<String, String> cr = getRecords(consumer);
                receivedAll = receivedAll + cr.count();
                cr.iterator().forEachRemaining(r -> actualResultSet.add(r.value()));
            }

            assertThat(actualResultSet.equals(expectedResultSet)).isTrue();
        }
        finally {
            pf.destroy();
        }
    }

}


22. KafkaWindow

pom.xml
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.4.2</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.pack</groupId>
	<artifactId>KafkaWindow</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>KafkaWindow</name>
	<description>Demo project for Spring Boot</description>
	<properties>
		<java.version>11</java.version>
		<spring-cloud.version>Hoxton.SR9</spring-cloud.version>
	</properties>

	<dependencies>
		<dependency>
			<groupId>org.apache.kafka</groupId>
			<artifactId>kafka-streams</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-stream</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-stream-binder-kafka-streams</artifactId>
		</dependency>

		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-stream</artifactId>
			<scope>test</scope>
			<classifier>test-binder</classifier>
			<type>test-jar</type>
		</dependency>
	</dependencies>

	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-dependencies</artifactId>
				<version>${spring-cloud.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<configuration>
					<excludes>
						<exclude>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok</artifactId>
						</exclude>
					</excludes>
				</configuration>
			</plugin>
		</plugins>
	</build>

	<repositories>
		<repository>
			<id>spring-snapshots</id>
			<name>Spring Snapshots</name>
			<url>https://repo.spring.io/snapshot</url>
			<snapshots>
				<enabled>true</enabled>
			</snapshots>
		</repository>
		<repository>
			<id>spring-milestones</id>
			<name>Spring Milestones</name>
			<url>https://repo.spring.io/milestone</url>
		</repository>
	</repositories>


</project>


application.yml
spring:
  cloud:
    stream:
      bindings:
        invoice-input-channel:
          destination: simple-invoice-topic
      kafka:
        streams:
          binder:
            brokers:  localhost:9092
            configuration:
              commit.interval.ms: 10000
              state.dir: state-store
              default:
                key:
                  serde: org.apache.kafka.common.serialization.Serdes$StringSerde
                value:
                  serde: org.apache.kafka.common.serialization.Serdes$StringSerde
          bindings:
            invoice-input-channel:
              consumer:
                timestampExtractorBeanName: invoiceTimesExtractor


SimpleInvoice.java
package com.pack.KafkaWindow.model;

import com.fasterxml.jackson.annotation.JsonProperty;

import lombok.Data;

@Data
public class SimpleInvoice {
    @JsonProperty("InvoiceNumber")
    private String invoiceNumber;
    @JsonProperty("CreatedTime")
    private Long createdTime;
    @JsonProperty("StoreID")
    private String storeID;
    @JsonProperty("TotalAmount")
    private Double totalAmount;
}


InvoiceListenerBinding.java
package com.pack.KafkaWindow.binding;

import org.apache.kafka.streams.kstream.KStream;
import org.springframework.cloud.stream.annotation.Input;

import com.pack.KafkaWindow.model.SimpleInvoice;

public interface InvoiceListenerBinding {

    @Input("invoice-input-channel")
    KStream<String, SimpleInvoice> invoiceInputStream();

}


InvoiceTimeExtractor.java
package com.pack.KafkaWindow.config;

import org.apache.kafka.clients.consumer.ConsumerRecord;
import org.apache.kafka.streams.processor.TimestampExtractor;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import com.pack.KafkaWindow.model.SimpleInvoice;

@Configuration
public class InvoiceTimeExtractor implements TimestampExtractor{

    @Override
    public long extract(ConsumerRecord<Object, Object> consumerRecord, long prevTime) {
        SimpleInvoice invoice = (SimpleInvoice) consumerRecord.value();
        return ((invoice.getCreatedTime() > 0) ? invoice.getCreatedTime() : prevTime);
    }

    @Bean
    public TimestampExtractor invoiceTimesExtractor() {
        return new InvoiceTimeExtractor();
    }
}


InvoiceListenerService.java
package com.pack.KafkaWindow.service;

import java.time.Duration;
import java.time.Instant;
import java.time.ZoneOffset;

import org.apache.kafka.streams.kstream.KStream;
import org.apache.kafka.streams.kstream.TimeWindows;
import org.springframework.cloud.stream.annotation.EnableBinding;
import org.springframework.cloud.stream.annotation.StreamListener;
import org.springframework.stereotype.Service;

import com.pack.KafkaWindow.binding.InvoiceListenerBinding;
import com.pack.KafkaWindow.model.SimpleInvoice;

import lombok.extern.log4j.Log4j2;

@Log4j2
@Service
@EnableBinding(InvoiceListenerBinding.class)
public class InvoiceListenerService {

    @StreamListener("invoice-input-channel")
    public void process(KStream<String, SimpleInvoice> input) {

        input.peek((k, v) -> log.info("Key = " + k + " Created Time = "
                + Instant.ofEpochMilli(v.getCreatedTime()).atOffset(ZoneOffset.UTC)))
                .groupByKey()
                .windowedBy(TimeWindows.of(Duration.ofMinutes(5)))
                .count()
                .toStream()
                .foreach((k, v) -> log.info(
                        "StoreID: " + k.key() +
                                " Window start: " +
                                Instant.ofEpochMilli(k.window().start())
                                        .atOffset(ZoneOffset.UTC) +
                                " Window end: " +
                                Instant.ofEpochMilli(k.window().end())
                                        .atOffset(ZoneOffset.UTC) +
                                " Count: " + v +
                                " Window#: " + k.window().hashCode()
                ));

    }
}


23. KafkaXMLBranching

pom.xml
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.4.1</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.pack</groupId>
	<artifactId>KafkaXMLBranching</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>KafkaXMLBranching</name>
	<description>Demo project for Spring Boot</description>
	<properties>
		<java.version>1.8</java.version>
		<spring-cloud.version>Hoxton.SR9</spring-cloud.version>
	</properties>

	<dependencies>
		<dependency>
			<groupId>org.apache.kafka</groupId>
			<artifactId>kafka-streams</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-stream</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-stream-binder-kafka-streams</artifactId>
		</dependency>
		<dependency>
			<groupId>javax.xml.bind</groupId>
			<artifactId>jaxb-api</artifactId>
			<version>2.3.0</version>
		</dependency>
		<dependency>
			<groupId>com.sun.xml.bind</groupId>
			<artifactId>jaxb-core</artifactId>
			<version>2.3.0</version>
		</dependency>
		<dependency>
			<groupId>com.sun.xml.bind</groupId>
			<artifactId>jaxb-impl</artifactId>
			<version>2.3.0</version>
		</dependency>
		<dependency>
			<groupId>javax.activation</groupId>
			<artifactId>activation</artifactId>
			<version>1.1.1</version>
		</dependency>

		<dependency>
			<groupId>io.confluent</groupId>
			<artifactId>kafka-streams-json-schema-serde</artifactId>
			<version>6.0.0</version>
		</dependency>

		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-stream</artifactId>
			<scope>test</scope>
			<classifier>test-binder</classifier>
			<type>test-jar</type>
		</dependency>
	</dependencies>

	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-dependencies</artifactId>
				<version>${spring-cloud.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<configuration>
					<excludes>
						<exclude>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok</artifactId>
						</exclude>
					</excludes>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>jaxb2-maven-plugin</artifactId>
				<version>2.5.0</version>
				<executions>
					<execution>
						<id>xjc</id>
						<goals>
							<goal>xjc</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<sources>
						<source>${project.basedir}/src/main/resources/schema</source>
					</sources>
					<packageName>com.pack.KafkaXMLBranching.model</packageName>
				</configuration>
			</plugin>
		</plugins>
	</build>

	<repositories>
		<repository>
			<id>spring-milestones</id>
			<name>Spring Milestones</name>
			<url>https://repo.spring.io/milestone</url>
		</repository>
		<repository>
			<id>confluent</id>
			<url>http://packages.confluent.io/maven/</url>
		</repository>
	</repositories>
	

</project>


application.yml
spring:
  cloud:
    stream:
      bindings:
        xml-input-channel:
          destination: xml-order-topic
        india-orders-channel:
          destination: india-orders
        abroad-orders-channel:
          destination: abroad-orders
      kafka:
        streams:
          binder:
            brokers:  localhost:9092
            configuration:
              schema.registry.url: http://localhost:8081
              processing.guarantee: exactly_once
          bindings:
            india-orders-channel:
              producer:
                valueSerde: io.confluent.kafka.streams.serdes.json.KafkaJsonSchemaSerde
            abroad-orders-channel:
              producer:
                valueSerde: io.confluent.kafka.streams.serdes.json.KafkaJsonSchemaSerde


application:
  configs:
    error.topic.name: error-topic

Inside src/main/resources/schema
order.xsd
<?xml version="1.0" encoding="UTF-8" ?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema">
    <xs:element name="order">
        <xs:complexType>
            <xs:sequence>
                <xs:element name="order-by" type="xs:string"/>
                <xs:element name="ship-to">
                    <xs:complexType>
                        <xs:sequence>
                            <xs:element name="name" type="xs:string"/>
                            <xs:element name="address" type="xs:string"/>
                            <xs:element name="city" type="xs:string"/>
                            <xs:element name="country" type="xs:string"/>
                        </xs:sequence>
                    </xs:complexType>
                </xs:element>
                <xs:element name="item" maxOccurs="unbounded">
                    <xs:complexType>
                        <xs:sequence>
                            <xs:element name="title" type="xs:string"/>
                            <xs:element name="note" type="xs:string" minOccurs="0"/>
                            <xs:element name="quantity" type="xs:positiveInteger"/>
                            <xs:element name="price" type="xs:decimal"/>
                        </xs:sequence>
                    </xs:complexType>
                </xs:element>
            </xs:sequence>
            <xs:attribute name="order-id" type="xs:string" use="required"/>
        </xs:complexType>
    </xs:element>
</xs:schema>


OrderListenerBinding.java
package com.pack.KafkaXMLBranching.binding;

import org.apache.kafka.streams.kstream.KStream;
import org.springframework.cloud.stream.annotation.Input;
import org.springframework.cloud.stream.annotation.Output;

import com.pack.KafkaXMLBranching.model.Order;

public interface OrderListenerBinding {

    @Input("xml-input-channel")
    KStream<String, String> xmlInputStream();

    @Output("india-orders-channel")
    KStream<String, Order> indiaOutputStream();

    @Output("abroad-orders-channel")
    KStream<String, Order> abroadOutputStream();

}


OrderEnvelop.java
package com.pack.KafkaXMLBranching.models;

import com.pack.KafkaXMLBranching.model.Order;

import lombok.Data;

@Data
public class OrderEnvelop {
    String xmlOrderKey;
    String xmlOrderValue;

    String orderTag;
    Order validOrder;
}


AppSerdes.java
package com.pack.KafkaXMLBranching.service;

import java.util.Collections;
import java.util.Map;

import org.apache.kafka.common.serialization.Serde;
import org.apache.kafka.common.serialization.Serdes;
import org.springframework.stereotype.Service;

import com.pack.KafkaXMLBranching.models.OrderEnvelop;

import io.confluent.kafka.streams.serdes.json.KafkaJsonSchemaSerde;

@Service
public class AppSerdes extends Serdes {

    private static final String schema_registry_url = "http://localhost:8081";

    private final static Map<String, String> serdeConfig = Collections.singletonMap(
            "schema.registry.url", schema_registry_url);

    public static Serde<OrderEnvelop> OrderEnvelop() {
        final Serde<OrderEnvelop> specificJsonSerde = new KafkaJsonSchemaSerde<>();
        specificJsonSerde.configure(serdeConfig, false);
        return specificJsonSerde;
    }
}


OrderListenerService.java
package com.pack.KafkaXMLBranching.service;

import java.io.StringReader;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Unmarshaller;

import org.apache.kafka.streams.KeyValue;
import org.apache.kafka.streams.kstream.KStream;
import org.apache.kafka.streams.kstream.Predicate;
import org.apache.kafka.streams.kstream.Produced;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.cloud.stream.annotation.EnableBinding;
import org.springframework.cloud.stream.annotation.StreamListener;
import org.springframework.messaging.handler.annotation.SendTo;
import org.springframework.stereotype.Service;

import com.pack.KafkaXMLBranching.binding.OrderListenerBinding;
import com.pack.KafkaXMLBranching.model.Order;
import com.pack.KafkaXMLBranching.models.OrderEnvelop;

import lombok.extern.log4j.Log4j2;

@Service
@Log4j2
@EnableBinding(OrderListenerBinding.class)
public class OrderListenerService {
	
	    public static String VALID_ORDER = "ValidOrder";
	    public static String PARSE_ERROR = "ParseError";
	    public static String ADDRESS_ERROR = "AddressError";

    @Value("${application.configs.error.topic.name}")
    private String ERROR_TOPIC;

    @StreamListener("xml-input-channel")
    @SendTo({"india-orders-channel", "abroad-orders-channel"})
    public KStream<String, Order>[] process(KStream<String, String> input) {

        input.foreach((k, v) -> log.info(String.format("Received XML Order Key: %s, Value: %s", k, v)));

        KStream<String, OrderEnvelop> orderEnvelopKStream = input.map((key, value) -> {
            OrderEnvelop orderEnvelop = new OrderEnvelop();
            orderEnvelop.setXmlOrderKey(key);
            orderEnvelop.setXmlOrderValue(value);
            try {
                JAXBContext jaxbContext = JAXBContext.newInstance(Order.class);
                Unmarshaller jaxbUnmarshaller = jaxbContext.createUnmarshaller();

                orderEnvelop.setValidOrder((Order) jaxbUnmarshaller.unmarshal(new StringReader(value)));
                orderEnvelop.setOrderTag(VALID_ORDER);

                if(orderEnvelop.getValidOrder().getShipTo().getCity().isEmpty()){
                    log.error("Missing destination City");
                    orderEnvelop.setOrderTag(ADDRESS_ERROR);
                }

            } catch (JAXBException e) {
                log.error("Failed to Unmarshal the incoming XML");
                orderEnvelop.setOrderTag(PARSE_ERROR);
            }
            return KeyValue.pair(orderEnvelop.getOrderTag(), orderEnvelop);
        });

        orderEnvelopKStream.filter((k, v) -> !k.equalsIgnoreCase(VALID_ORDER))
                .to(ERROR_TOPIC, Produced.with(AppSerdes.String(), AppSerdes.OrderEnvelop()));

        KStream<String, Order> validOrders = orderEnvelopKStream
                .filter((k, v) -> k.equalsIgnoreCase(VALID_ORDER))
                .map((k, v) -> KeyValue.pair(v.getValidOrder().getOrderId(), v.getValidOrder()));

        validOrders.foreach((k, v) -> log.info(String.format("Valid Order with ID: %s", v.getOrderId())));

        Predicate<String, Order> isIndiaOrder = (k, v) -> v.getShipTo().getCountry().equalsIgnoreCase("india");
        Predicate<String, Order> isAbroadOrder = (k, v) -> !v.getShipTo().getCountry().equalsIgnoreCase("india");

        return validOrders.branch(isIndiaOrder, isAbroadOrder);

    }

}


24. KTableAggregation

pom.xml
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.4.1</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.pack</groupId>
	<artifactId>KTableAggregation</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>KTableAggregation</name>
	<description>Demo project for Spring Boot</description>
	<properties>
		<java.version>11</java.version>
		<spring-cloud.version>Hoxton.SR9</spring-cloud.version>
	</properties>
	<dependencies>
		<dependency>
			<groupId>org.apache.kafka</groupId>
			<artifactId>kafka-streams</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-stream</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-stream-binder-kafka</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-stream-binder-kafka-streams</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.kafka</groupId>
			<artifactId>spring-kafka</artifactId>
		</dependency>

		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-stream</artifactId>
			<scope>test</scope>
			<classifier>test-binder</classifier>
			<type>test-jar</type>
		</dependency>
		<dependency>
			<groupId>org.springframework.kafka</groupId>
			<artifactId>spring-kafka-test</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>
	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-dependencies</artifactId>
				<version>${spring-cloud.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<configuration>
					<excludes>
						<exclude>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok</artifactId>
						</exclude>
					</excludes>
				</configuration>
			</plugin>
		</plugins>
	</build>

</project>


application.yml
spring:
  cloud:
    stream:
      bindings:
        words-input-channel:
          destination: streaming-words-topic
      kafka:
        streams:
          binder:
            brokers:  localhost:9092
            configuration:
              commit.interval.ms: 10000
              state.dir: state-store
              default:
                key:
                  serde: org.apache.kafka.common.serialization.Serdes$StringSerde
                value:
                  serde: org.apache.kafka.common.serialization.Serdes$StringSerde


WordListenerBinding.java
package com.pack.KTableAggregation.binding;

import org.apache.kafka.streams.kstream.KStream;
import org.springframework.cloud.stream.annotation.Input;

public interface WordListenerBinding {
    @Input("words-input-channel")
    KStream<String, String> wordsInputStream();
}


WordListenerService.java
package com.pack.KTableAggregation.services;

import java.util.Arrays;

import org.apache.kafka.streams.kstream.KStream;
import org.springframework.cloud.stream.annotation.EnableBinding;
import org.springframework.cloud.stream.annotation.StreamListener;
import org.springframework.stereotype.Service;

import com.pack.KTableAggregation.binding.WordListenerBinding;

import lombok.extern.log4j.Log4j2;

@Service
@Log4j2
@EnableBinding(WordListenerBinding.class)
public class WordListenerService {

    @StreamListener("words-input-channel")
    public void process(KStream<String, String> input) {

        KStream<String, String> wordStream = input
                .flatMapValues(value -> Arrays.asList(value.toLowerCase().split(" ")));

        wordStream.groupBy((key, value) -> value)
                .count()
                .toStream()
                .peek((k, v) -> log.info("Word: {} Count: {}", k, v));
    }

}


25. KTableDemo

pom.xml
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.4.1</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.pack</groupId>
	<artifactId>KTableDemo</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>KTableDemo</name>
	<description>Demo project for Spring Boot</description>
	<properties>
		<java.version>11</java.version>
		<spring-cloud.version>Hoxton.SR9</spring-cloud.version>
	</properties>
	<dependencies>
	    <dependency>
			<groupId>org.apache.kafka</groupId>
			<artifactId>kafka-streams</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-stream</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-stream-binder-kafka</artifactId>
		</dependency>
		<dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-stream-binder-kafka-streams</artifactId>
        </dependency>
		<dependency>
			<groupId>org.springframework.kafka</groupId>
			<artifactId>spring-kafka</artifactId>
		</dependency>

		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-stream</artifactId>
			<scope>test</scope>
			<classifier>test-binder</classifier>
			<type>test-jar</type>
		</dependency>
		<dependency>
			<groupId>org.springframework.kafka</groupId>
			<artifactId>spring-kafka-test</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>
	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-dependencies</artifactId>
				<version>${spring-cloud.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<configuration>
					<excludes>
						<exclude>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok</artifactId>
						</exclude>
					</excludes>
				</configuration>
			</plugin>
		</plugins>
	</build>

</project>


application.yml
spring:
  cloud:
    stream:
      bindings:
        stock-input-channel:
          destination: stock-tick-topic
      kafka:
        streams:
          binder:
            brokers:  localhost:9092
            configuration:
              commit.interval.ms: 10000
              state.dir: state-store
          bindings:
            stock-input-channel:
              consumer:
                materializedAs: stock-input-store


StockListenerBinding.java
package com.pack.KTableDemo.binding;

import org.apache.kafka.streams.kstream.KTable;
import org.springframework.cloud.stream.annotation.Input;

public interface StockListenerBinding {
    @Input("stock-input-channel")
    KTable<String, String> stockInputStream();
}


StockTickListenerService.java
package com.pack.KTableDemo.service;

import org.apache.kafka.streams.kstream.KTable;
import org.springframework.cloud.stream.annotation.EnableBinding;
import org.springframework.cloud.stream.annotation.StreamListener;
import org.springframework.stereotype.Service;

import com.pack.KTableDemo.binding.StockListenerBinding;

import lombok.extern.log4j.Log4j2;

@Service
@Log4j2
@EnableBinding(StockListenerBinding.class)
public class StockTickListenerService {

    @StreamListener("stock-input-channel")
    public void process(KTable<String, String> input) {

        input.filter((key, value) -> key.contains("HDFCBANK"))
                .toStream()
                .foreach((k, v) -> System.out.println("Key = " + k + " Value = " + v));
    }
}



26. SpringBootKafkaStream

pom.xml
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.7.3</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.pack</groupId>
	<artifactId>SpringBootKafkaStream</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>SpringBootKafkaStream</name>
	<description>Demo project for Spring Boot</description>
	<properties>
		<java.version>11</java.version>
	</properties>
	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter</artifactId>
		</dependency>
		<dependency>
			<groupId>org.apache.kafka</groupId>
			<artifactId>kafka-streams</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.kafka</groupId>
			<artifactId>spring-kafka</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.kafka</groupId>
			<artifactId>spring-kafka-test</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
		</plugins>
	</build>

</project>


application.properties
spring.kafka.streams.bootstrap-servers=localhost:9092
spring.kafka.streams.application-id=spring-kafka-stream-id

SpringBootKafkaStreamApplication.java
package com.pack.SpringBootKafkaStream;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.kafka.annotation.EnableKafka;
import org.springframework.kafka.annotation.EnableKafkaStreams;

@SpringBootApplication
@EnableKafka
@EnableKafkaStreams
public class SpringBootKafkaStreamApplication {

	public static void main(String[] args) {
		SpringApplication.run(SpringBootKafkaStreamApplication.class, args);
	}

}


Config.java
package com.pack.SpringBootKafkaStream;

import org.apache.kafka.streams.StreamsConfig;
import org.springframework.boot.autoconfigure.kafka.KafkaProperties;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class Config {

    @Bean
    public StreamsConfig streamsConfig(KafkaProperties properties){
        return new StreamsConfig(properties.buildStreamsProperties());
    }
}

EventStreamProcessor.java
package com.pack.SpringBootKafkaStream;

import javax.annotation.PostConstruct;

import org.apache.kafka.common.serialization.Serdes;
import org.apache.kafka.streams.StreamsBuilder;
import org.apache.kafka.streams.kstream.Consumed;
import org.apache.kafka.streams.kstream.KStream;
import org.apache.kafka.streams.kstream.Produced;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

@Component
public class EventStreamProcessor {

    @Autowired
    private StreamsBuilder streamsBuilder;

    @PostConstruct
    public void streamTopology() {
        KStream<String, String> kStream = streamsBuilder.stream("spring.boot.kafka.stream.input", Consumed.with(Serdes.String(), Serdes.String()));
        kStream.filter((key, value) -> value.startsWith("Message_")).mapValues((k, v) -> v.toUpperCase()).peek((k, v) -> System.out.println("Key : " + k + " Value : " + v)).to("spring.boot.kafka.stream.output", Produced.with(Serdes.String(), Serdes.String()));
    }
}
